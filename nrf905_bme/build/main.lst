ARM GAS  /tmp/ccKFTvd8.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SystemClock_Config,"ax",%progbits
  16              		.align	1
  17              		.global	SystemClock_Config
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	SystemClock_Config:
  24              	.LFB35:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** 
  21:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/main.c **** #include "main.h"
  23:Core/Src/main.c **** #include "spi.h"
  24:Core/Src/main.c **** #include "gpio.h"
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/main.c **** #include "bme280.h"
  29:Core/Src/main.c **** #include "nrf905.h"
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END Includes */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccKFTvd8.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  35:Core/Src/main.c **** #define Day 25
  36:Core/Src/main.c **** #define Mes 04
  37:Core/Src/main.c **** #define year 2020
  38:Core/Src/main.c **** #define hour 21
  39:Core/Src/main.c **** #define min 01
  40:Core/Src/main.c **** #define sec 13
  41:Core/Src/main.c **** Packet_send P;
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PTD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PD */
  47:Core/Src/main.c **** struct bme280_dev dev_bme = {0};
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PD */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  53:Core/Src/main.c **** /* USER CODE BEGIN PM */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PM */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE BEGIN PV */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE END PV */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  64:Core/Src/main.c **** void SystemClock_Config(void);
  65:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END PFP */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  70:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* USER CODE END 0 */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /**
  75:Core/Src/main.c ****   * @brief  The application entry point.
  76:Core/Src/main.c ****   * @retval int
  77:Core/Src/main.c ****   */
  78:Core/Src/main.c **** int main(void)
  79:Core/Src/main.c **** {
  80:Core/Src/main.c ****   /* USER CODE BEGIN */
  81:Core/Src/main.c ****   long j=0;
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* USER CODE END 1 */
  84:Core/Src/main.c ****   
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  89:Core/Src/main.c ****   HAL_Init();
  90:Core/Src/main.c **** 
ARM GAS  /tmp/ccKFTvd8.s 			page 3


  91:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END Init */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Configure the system clock */
  96:Core/Src/main.c ****   SystemClock_Config();
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END SysInit */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* Initialize all configured peripherals */
 103:Core/Src/main.c ****   MX_GPIO_Init();
 104:Core/Src/main.c ****   MX_SPI1_Init();
 105:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 106:Core/Src/main.c **** HAL_GPIO_WritePin(CS_BME_GPIO_Port, CS_BME_Pin, GPIO_PIN_SET);
 107:Core/Src/main.c **** HAL_GPIO_WritePin(CS_NRF_GPIO_Port, CS_NRF_Pin, GPIO_PIN_SET);
 108:Core/Src/main.c **** NRF905_POWER_ON();
 109:Core/Src/main.c **** HAL_Delay(2);
 110:Core/Src/main.c **** NRF905_Config_t.AUTO_RETRAN = AUTO_RET_DISABLE ;
 111:Core/Src/main.c **** NRF905_Config_t.CH_NO_1 = 138;
 112:Core/Src/main.c **** NRF905_Config_t.CH_NO_2 = 0;
 113:Core/Src/main.c **** NRF905_Config_t.CRC_EN = CRC_CHECK_ENABLE;
 114:Core/Src/main.c **** NRF905_Config_t.CRC_MODE = CRC_MODE_16bit;
 115:Core/Src/main.c **** NRF905_Config_t.HFREQ_PLL = FREQ_433MHz ;
 116:Core/Src/main.c **** NRF905_Config_t.PA_PWR = PWR_10dBm;
 117:Core/Src/main.c **** NRF905_Config_t.RX_ADDRESS = 0xE7E7E7E7;
 118:Core/Src/main.c **** NRF905_Config_t.RX_AFW = TX_ADDR_WIDTH_4Byte ;
 119:Core/Src/main.c **** NRF905_Config_t.RX_PW =  sizeof(P);
 120:Core/Src/main.c **** NRF905_Config_t.RX_RED_PWR = RED_PWR_DISABLE;
 121:Core/Src/main.c **** NRF905_Config_t.TX_AFW = TX_ADDR_WIDTH_4Byte;
 122:Core/Src/main.c **** NRF905_Config_t.TX_PW = sizeof(P);
 123:Core/Src/main.c **** NRF905_Config_t.UP_CLK_EN = OUT_CLOCK_ENABLE;
 124:Core/Src/main.c **** NRF905_Config_t.UP_CLK_FREQ =  OUT_CLOCK_FREQ_500kHz;
 125:Core/Src/main.c **** NRF905_Config_t.XOF = CRYSTAL_OSC_FREQ_16MHz;
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** if (NRF905_INIT(&NRF905_Config_t ))
 128:Core/Src/main.c ****   {
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   }
 131:Core/Src/main.c ****   /* USER CODE END 2 */
 132:Core/Src/main.c ****  
 133:Core/Src/main.c ****  
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /* Infinite loop */
 136:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 137:Core/Src/main.c ****   while (1)
 138:Core/Src/main.c ****   {
 139:Core/Src/main.c ****     /* USER CODE END WHILE */
 140:Core/Src/main.c ****     
 141:Core/Src/main.c ****     HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 142:Core/Src/main.c ****     if (initBME280(&dev_bme) == 1)
 143:Core/Src/main.c **** 	   { 
 144:Core/Src/main.c **** 		  GetCalibData_BME280(&dev_bme);
 145:Core/Src/main.c **** 		  GetData_BME280(&dev_bme); 
 146:Core/Src/main.c ****   	 }
 147:Core/Src/main.c ****      P.descr[0]='B';
ARM GAS  /tmp/ccKFTvd8.s 			page 4


 148:Core/Src/main.c **** 	   P.descr[1]='M';
 149:Core/Src/main.c **** 	   P.descr[2]='E';
 150:Core/Src/main.c **** 	   P.descr[3]='0';
 151:Core/Src/main.c **** 	   P.descr[4]='1';
 152:Core/Src/main.c **** 	   P.humm = dev_bme.data.humidity;
 153:Core/Src/main.c **** 	   P.press = dev_bme.data.pressure;
 154:Core/Src/main.c **** 	   P.temp = dev_bme.data.temperature;
 155:Core/Src/main.c **** 	   P.count = j;
 156:Core/Src/main.c ****      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 157:Core/Src/main.c ****      WriteDataToSend(0xE7E7E7E7, &P, sizeof(P));
 158:Core/Src/main.c ****      StartSend();
 159:Core/Src/main.c ****      j++;
 160:Core/Src/main.c ****      HAL_Delay(300000);
 161:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 162:Core/Src/main.c ****   }
 163:Core/Src/main.c ****   /* USER CODE END 3 */
 164:Core/Src/main.c **** }
 165:Core/Src/main.c **** 
 166:Core/Src/main.c **** /**
 167:Core/Src/main.c ****   * @brief System Clock Configuration
 168:Core/Src/main.c ****   * @retval None
 169:Core/Src/main.c ****   */
 170:Core/Src/main.c **** void SystemClock_Config(void)
 171:Core/Src/main.c **** {
  26              		.loc 1 171 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 72
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 92B0     		sub	sp, sp, #72
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 80
 172:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  38              		.loc 1 172 0
  39 0004 3422     		movs	r2, #52
  40 0006 0021     		movs	r1, #0
  41 0008 05A8     		add	r0, sp, #20
  42 000a FFF7FEFF 		bl	memset
  43              	.LVL0:
 173:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  44              		.loc 1 173 0
  45 000e 1422     		movs	r2, #20
  46 0010 0021     		movs	r1, #0
  47 0012 6846     		mov	r0, sp
  48 0014 FFF7FEFF 		bl	memset
  49              	.LVL1:
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /** Configure the main internal regulator output voltage 
 176:Core/Src/main.c ****   */
 177:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  50              		.loc 1 177 0
  51 0018 1049     		ldr	r1, .L2
  52 001a 0B68     		ldr	r3, [r1]
ARM GAS  /tmp/ccKFTvd8.s 			page 5


  53 001c 104A     		ldr	r2, .L2+4
  54 001e 1A40     		ands	r2, r3
  55 0020 8023     		movs	r3, #128
  56 0022 1B01     		lsls	r3, r3, #4
  57 0024 1343     		orrs	r3, r2
  58 0026 0B60     		str	r3, [r1]
 178:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB busses clocks 
 179:Core/Src/main.c ****   */
 180:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  59              		.loc 1 180 0
  60 0028 1023     		movs	r3, #16
  61 002a 0593     		str	r3, [sp, #20]
 181:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  62              		.loc 1 181 0
  63 002c 0F3B     		subs	r3, r3, #15
  64 002e 0B93     		str	r3, [sp, #44]
 182:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
  65              		.loc 1 182 0
  66 0030 0024     		movs	r4, #0
  67 0032 0C94     		str	r4, [sp, #48]
 183:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  68              		.loc 1 183 0
  69 0034 A023     		movs	r3, #160
  70 0036 1B02     		lsls	r3, r3, #8
  71 0038 0D93     		str	r3, [sp, #52]
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  72              		.loc 1 184 0
  73 003a 0E94     		str	r4, [sp, #56]
 185:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  74              		.loc 1 185 0
  75 003c 05A8     		add	r0, sp, #20
  76 003e FFF7FEFF 		bl	HAL_RCC_OscConfig
  77              	.LVL2:
 186:Core/Src/main.c ****   {
 187:Core/Src/main.c ****     Error_Handler();
 188:Core/Src/main.c ****   }
 189:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB busses clocks 
 190:Core/Src/main.c ****   */
 191:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
  78              		.loc 1 191 0
  79 0042 0F23     		movs	r3, #15
  80 0044 0093     		str	r3, [sp]
 192:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 193:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  81              		.loc 1 193 0
  82 0046 0194     		str	r4, [sp, #4]
 194:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  83              		.loc 1 194 0
  84 0048 0294     		str	r4, [sp, #8]
 195:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  85              		.loc 1 195 0
  86 004a 0394     		str	r4, [sp, #12]
 196:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  87              		.loc 1 196 0
  88 004c 0494     		str	r4, [sp, #16]
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
ARM GAS  /tmp/ccKFTvd8.s 			page 6


  89              		.loc 1 198 0
  90 004e 0021     		movs	r1, #0
  91 0050 6846     		mov	r0, sp
  92 0052 FFF7FEFF 		bl	HAL_RCC_ClockConfig
  93              	.LVL3:
 199:Core/Src/main.c ****   {
 200:Core/Src/main.c ****     Error_Handler();
 201:Core/Src/main.c ****   }
 202:Core/Src/main.c **** }
  94              		.loc 1 202 0
  95 0056 12B0     		add	sp, sp, #72
  96              		@ sp needed
  97 0058 10BD     		pop	{r4, pc}
  98              	.L3:
  99 005a C046     		.align	2
 100              	.L2:
 101 005c 00700040 		.word	1073770496
 102 0060 FFE7FFFF 		.word	-6145
 103              		.cfi_endproc
 104              	.LFE35:
 106              		.section	.text.main,"ax",%progbits
 107              		.align	1
 108              		.global	main
 109              		.syntax unified
 110              		.code	16
 111              		.thumb_func
 112              		.fpu softvfp
 114              	main:
 115              	.LFB34:
  79:Core/Src/main.c ****   /* USER CODE BEGIN */
 116              		.loc 1 79 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 121              	.LCFI2:
 122              		.cfi_def_cfa_offset 24
 123              		.cfi_offset 3, -24
 124              		.cfi_offset 4, -20
 125              		.cfi_offset 5, -16
 126              		.cfi_offset 6, -12
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129              	.LVL4:
  89:Core/Src/main.c **** 
 130              		.loc 1 89 0
 131 0002 FFF7FEFF 		bl	HAL_Init
 132              	.LVL5:
  96:Core/Src/main.c **** 
 133              		.loc 1 96 0
 134 0006 FFF7FEFF 		bl	SystemClock_Config
 135              	.LVL6:
 103:Core/Src/main.c ****   MX_SPI1_Init();
 136              		.loc 1 103 0
 137 000a FFF7FEFF 		bl	MX_GPIO_Init
 138              	.LVL7:
 104:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
ARM GAS  /tmp/ccKFTvd8.s 			page 7


 139              		.loc 1 104 0
 140 000e FFF7FEFF 		bl	MX_SPI1_Init
 141              	.LVL8:
 106:Core/Src/main.c **** HAL_GPIO_WritePin(CS_NRF_GPIO_Port, CS_NRF_Pin, GPIO_PIN_SET);
 142              		.loc 1 106 0
 143 0012 A024     		movs	r4, #160
 144 0014 E405     		lsls	r4, r4, #23
 145 0016 0122     		movs	r2, #1
 146 0018 0821     		movs	r1, #8
 147 001a 2000     		movs	r0, r4
 148 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 149              	.LVL9:
 107:Core/Src/main.c **** NRF905_POWER_ON();
 150              		.loc 1 107 0
 151 0020 0122     		movs	r2, #1
 152 0022 1021     		movs	r1, #16
 153 0024 2000     		movs	r0, r4
 154 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 155              	.LVL10:
 108:Core/Src/main.c **** HAL_Delay(2);
 156              		.loc 1 108 0
 157 002a FFF7FEFF 		bl	NRF905_POWER_ON
 158              	.LVL11:
 109:Core/Src/main.c **** NRF905_Config_t.AUTO_RETRAN = AUTO_RET_DISABLE ;
 159              		.loc 1 109 0
 160 002e 0220     		movs	r0, #2
 161 0030 FFF7FEFF 		bl	HAL_Delay
 162              	.LVL12:
 110:Core/Src/main.c **** NRF905_Config_t.CH_NO_1 = 138;
 163              		.loc 1 110 0
 164 0034 3848     		ldr	r0, .L7
 165 0036 4178     		ldrb	r1, [r0, #1]
 111:Core/Src/main.c **** NRF905_Config_t.CH_NO_2 = 0;
 166              		.loc 1 111 0
 167 0038 8A23     		movs	r3, #138
 168 003a 0370     		strb	r3, [r0]
 112:Core/Src/main.c **** NRF905_Config_t.CRC_EN = CRC_CHECK_ENABLE;
 169              		.loc 1 112 0
 170 003c 6A3B     		subs	r3, r3, #106
 171 003e 9943     		bics	r1, r3
 113:Core/Src/main.c **** NRF905_Config_t.CRC_MODE = CRC_MODE_16bit;
 172              		.loc 1 113 0
 173 0040 437A     		ldrb	r3, [r0, #9]
 174 0042 4022     		movs	r2, #64
 175 0044 9446     		mov	ip, r2
 114:Core/Src/main.c **** NRF905_Config_t.HFREQ_PLL = FREQ_433MHz ;
 176              		.loc 1 114 0
 177 0046 6246     		mov	r2, ip
 178 0048 1343     		orrs	r3, r2
 179 004a 8022     		movs	r2, #128
 180 004c 5242     		rsbs	r2, r2, #0
 181 004e 1343     		orrs	r3, r2
 115:Core/Src/main.c **** NRF905_Config_t.PA_PWR = PWR_10dBm;
 182              		.loc 1 115 0
 183 0050 8132     		adds	r2, r2, #129
 184 0052 9143     		bics	r1, r2
 116:Core/Src/main.c **** NRF905_Config_t.RX_ADDRESS = 0xE7E7E7E7;
ARM GAS  /tmp/ccKFTvd8.s 			page 8


 185              		.loc 1 116 0
 186 0054 0132     		adds	r2, r2, #1
 187 0056 9143     		bics	r1, r2
 117:Core/Src/main.c **** NRF905_Config_t.RX_AFW = TX_ADDR_WIDTH_4Byte ;
 188              		.loc 1 117 0
 189 0058 1B3A     		subs	r2, r2, #27
 190 005a 4271     		strb	r2, [r0, #5]
 191 005c 8271     		strb	r2, [r0, #6]
 192 005e C271     		strb	r2, [r0, #7]
 193 0060 0272     		strb	r2, [r0, #8]
 118:Core/Src/main.c **** NRF905_Config_t.RX_PW =  sizeof(P);
 194              		.loc 1 118 0
 195 0062 8278     		ldrb	r2, [r0, #2]
 196 0064 0724     		movs	r4, #7
 197 0066 A243     		bics	r2, r4
 198 0068 0424     		movs	r4, #4
 119:Core/Src/main.c **** NRF905_Config_t.RX_RED_PWR = RED_PWR_DISABLE;
 199              		.loc 1 119 0
 200 006a C578     		ldrb	r5, [r0, #3]
 201 006c 3F27     		movs	r7, #63
 202 006e BD43     		bics	r5, r7
 203 0070 1C26     		movs	r6, #28
 204 0072 3543     		orrs	r5, r6
 205 0074 C570     		strb	r5, [r0, #3]
 120:Core/Src/main.c **** NRF905_Config_t.TX_AFW = TX_ADDR_WIDTH_4Byte;
 206              		.loc 1 120 0
 207 0076 0C25     		movs	r5, #12
 208 0078 2943     		orrs	r1, r5
 209 007a 1025     		movs	r5, #16
 210 007c A943     		bics	r1, r5
 211 007e 4170     		strb	r1, [r0, #1]
 121:Core/Src/main.c **** NRF905_Config_t.TX_PW = sizeof(P);
 212              		.loc 1 121 0
 213 0080 2243     		orrs	r2, r4
 214 0082 7021     		movs	r1, #112
 215 0084 8A43     		bics	r2, r1
 216 0086 6146     		mov	r1, ip
 217 0088 0A43     		orrs	r2, r1
 218 008a 8270     		strb	r2, [r0, #2]
 122:Core/Src/main.c **** NRF905_Config_t.UP_CLK_EN = OUT_CLOCK_ENABLE;
 219              		.loc 1 122 0
 220 008c 0279     		ldrb	r2, [r0, #4]
 221 008e BA43     		bics	r2, r7
 222 0090 3243     		orrs	r2, r6
 223 0092 0271     		strb	r2, [r0, #4]
 123:Core/Src/main.c **** NRF905_Config_t.UP_CLK_FREQ =  OUT_CLOCK_FREQ_500kHz;
 224              		.loc 1 123 0
 225 0094 DBB2     		uxtb	r3, r3
 124:Core/Src/main.c **** NRF905_Config_t.XOF = CRYSTAL_OSC_FREQ_16MHz;
 226              		.loc 1 124 0
 227 0096 2343     		orrs	r3, r4
 125:Core/Src/main.c **** 
 228              		.loc 1 125 0
 229 0098 0322     		movs	r2, #3
 230 009a 1343     		orrs	r3, r2
 231 009c 3822     		movs	r2, #56
 232 009e 9343     		bics	r3, r2
ARM GAS  /tmp/ccKFTvd8.s 			page 9


 233 00a0 1822     		movs	r2, #24
 234 00a2 1343     		orrs	r3, r2
 235 00a4 4372     		strb	r3, [r0, #9]
 127:Core/Src/main.c ****   {
 236              		.loc 1 127 0
 237 00a6 FFF7FEFF 		bl	NRF905_INIT
 238              	.LVL13:
  81:Core/Src/main.c **** 
 239              		.loc 1 81 0
 240 00aa 0025     		movs	r5, #0
 241 00ac 22E0     		b	.L6
 242              	.LVL14:
 243              	.L5:
 147:Core/Src/main.c **** 	   P.descr[1]='M';
 244              		.loc 1 147 0
 245 00ae 1B4C     		ldr	r4, .L7+4
 246 00b0 4223     		movs	r3, #66
 247 00b2 2370     		strb	r3, [r4]
 148:Core/Src/main.c **** 	   P.descr[2]='E';
 248              		.loc 1 148 0
 249 00b4 0B33     		adds	r3, r3, #11
 250 00b6 6370     		strb	r3, [r4, #1]
 149:Core/Src/main.c **** 	   P.descr[3]='0';
 251              		.loc 1 149 0
 252 00b8 083B     		subs	r3, r3, #8
 253 00ba A370     		strb	r3, [r4, #2]
 150:Core/Src/main.c **** 	   P.descr[4]='1';
 254              		.loc 1 150 0
 255 00bc 153B     		subs	r3, r3, #21
 256 00be E370     		strb	r3, [r4, #3]
 151:Core/Src/main.c **** 	   P.humm = dev_bme.data.humidity;
 257              		.loc 1 151 0
 258 00c0 0133     		adds	r3, r3, #1
 259 00c2 2371     		strb	r3, [r4, #4]
 152:Core/Src/main.c **** 	   P.press = dev_bme.data.pressure;
 260              		.loc 1 152 0
 261 00c4 164B     		ldr	r3, .L7+8
 262 00c6 DA6E     		ldr	r2, [r3, #108]
 263 00c8 A260     		str	r2, [r4, #8]
 153:Core/Src/main.c **** 	   P.temp = dev_bme.data.temperature;
 264              		.loc 1 153 0
 265 00ca 5A6E     		ldr	r2, [r3, #100]
 266 00cc 2261     		str	r2, [r4, #16]
 154:Core/Src/main.c **** 	   P.count = j;
 267              		.loc 1 154 0
 268 00ce 9B6E     		ldr	r3, [r3, #104]
 269 00d0 E360     		str	r3, [r4, #12]
 155:Core/Src/main.c ****      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 270              		.loc 1 155 0
 271 00d2 6561     		str	r5, [r4, #20]
 156:Core/Src/main.c ****      WriteDataToSend(0xE7E7E7E7, &P, sizeof(P));
 272              		.loc 1 156 0
 273 00d4 0022     		movs	r2, #0
 274 00d6 0821     		movs	r1, #8
 275 00d8 1248     		ldr	r0, .L7+12
 276 00da FFF7FEFF 		bl	HAL_GPIO_WritePin
 277              	.LVL15:
ARM GAS  /tmp/ccKFTvd8.s 			page 10


 157:Core/Src/main.c ****      StartSend();
 278              		.loc 1 157 0
 279 00de 1C22     		movs	r2, #28
 280 00e0 2100     		movs	r1, r4
 281 00e2 1148     		ldr	r0, .L7+16
 282 00e4 FFF7FEFF 		bl	WriteDataToSend
 283              	.LVL16:
 158:Core/Src/main.c ****      j++;
 284              		.loc 1 158 0
 285 00e8 FFF7FEFF 		bl	StartSend
 286              	.LVL17:
 159:Core/Src/main.c ****      HAL_Delay(300000);
 287              		.loc 1 159 0
 288 00ec 0135     		adds	r5, r5, #1
 289              	.LVL18:
 160:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 290              		.loc 1 160 0
 291 00ee 0F48     		ldr	r0, .L7+20
 292 00f0 FFF7FEFF 		bl	HAL_Delay
 293              	.LVL19:
 294              	.L6:
 141:Core/Src/main.c ****     if (initBME280(&dev_bme) == 1)
 295              		.loc 1 141 0
 296 00f4 0122     		movs	r2, #1
 297 00f6 0821     		movs	r1, #8
 298 00f8 0A48     		ldr	r0, .L7+12
 299 00fa FFF7FEFF 		bl	HAL_GPIO_WritePin
 300              	.LVL20:
 142:Core/Src/main.c **** 	   { 
 301              		.loc 1 142 0
 302 00fe 0848     		ldr	r0, .L7+8
 303 0100 FFF7FEFF 		bl	initBME280
 304              	.LVL21:
 305 0104 0128     		cmp	r0, #1
 306 0106 D2D1     		bne	.L5
 144:Core/Src/main.c **** 		  GetData_BME280(&dev_bme); 
 307              		.loc 1 144 0
 308 0108 054C     		ldr	r4, .L7+8
 309 010a 2000     		movs	r0, r4
 310 010c FFF7FEFF 		bl	GetCalibData_BME280
 311              	.LVL22:
 145:Core/Src/main.c ****   	 }
 312              		.loc 1 145 0
 313 0110 2000     		movs	r0, r4
 314 0112 FFF7FEFF 		bl	GetData_BME280
 315              	.LVL23:
 316 0116 CAE7     		b	.L5
 317              	.L8:
 318              		.align	2
 319              	.L7:
 320 0118 00000000 		.word	NRF905_Config_t
 321 011c 00000000 		.word	P
 322 0120 00000000 		.word	.LANCHOR0
 323 0124 00040050 		.word	1342178304
 324 0128 E7E7E7E7 		.word	-404232217
 325 012c E0930400 		.word	300000
 326              		.cfi_endproc
ARM GAS  /tmp/ccKFTvd8.s 			page 11


 327              	.LFE34:
 329              		.section	.text.SPI_GET_DAT,"ax",%progbits
 330              		.align	1
 331              		.global	SPI_GET_DAT
 332              		.syntax unified
 333              		.code	16
 334              		.thumb_func
 335              		.fpu softvfp
 337              	SPI_GET_DAT:
 338              	.LFB36:
 203:Core/Src/main.c **** 
 204:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 205:Core/Src/main.c **** void SPI_GET_DAT( uint8_t *ADDR, uint8_t *data)
 206:Core/Src/main.c **** {
 339              		.loc 1 206 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              	.LVL24:
 344 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 345              	.LCFI3:
 346              		.cfi_def_cfa_offset 24
 347              		.cfi_offset 3, -24
 348              		.cfi_offset 4, -20
 349              		.cfi_offset 5, -16
 350              		.cfi_offset 6, -12
 351              		.cfi_offset 7, -8
 352              		.cfi_offset 14, -4
 353 0002 0700     		movs	r7, r0
 354 0004 0E00     		movs	r6, r1
 207:Core/Src/main.c **** 	HAL_GPIO_WritePin(CS_BME_GPIO_Port, CS_BME_Pin, GPIO_PIN_RESET);
 355              		.loc 1 207 0
 356 0006 A024     		movs	r4, #160
 357 0008 E405     		lsls	r4, r4, #23
 358 000a 0022     		movs	r2, #0
 359 000c 0821     		movs	r1, #8
 360              	.LVL25:
 361 000e 2000     		movs	r0, r4
 362              	.LVL26:
 363 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 364              	.LVL27:
 208:Core/Src/main.c **** 	HAL_SPI_Transmit(&hspi1, ADDR, 1, 10);
 365              		.loc 1 208 0
 366 0014 094D     		ldr	r5, .L10
 367 0016 0A23     		movs	r3, #10
 368 0018 0122     		movs	r2, #1
 369 001a 3900     		movs	r1, r7
 370 001c 2800     		movs	r0, r5
 371 001e FFF7FEFF 		bl	HAL_SPI_Transmit
 372              	.LVL28:
 209:Core/Src/main.c **** 	HAL_SPI_Receive(&hspi1, data, 1, 10);
 373              		.loc 1 209 0
 374 0022 0A23     		movs	r3, #10
 375 0024 0122     		movs	r2, #1
 376 0026 3100     		movs	r1, r6
 377 0028 2800     		movs	r0, r5
 378 002a FFF7FEFF 		bl	HAL_SPI_Receive
ARM GAS  /tmp/ccKFTvd8.s 			page 12


 379              	.LVL29:
 210:Core/Src/main.c **** 	HAL_GPIO_WritePin(CS_BME_GPIO_Port, CS_BME_Pin, GPIO_PIN_SET);
 380              		.loc 1 210 0
 381 002e 0122     		movs	r2, #1
 382 0030 0821     		movs	r1, #8
 383 0032 2000     		movs	r0, r4
 384 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 385              	.LVL30:
 211:Core/Src/main.c **** }
 386              		.loc 1 211 0
 387              		@ sp needed
 388              	.LVL31:
 389              	.LVL32:
 390 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 391              	.L11:
 392 003a C046     		.align	2
 393              	.L10:
 394 003c 00000000 		.word	hspi1
 395              		.cfi_endproc
 396              	.LFE36:
 398              		.section	.text.SPI_SET_DAT,"ax",%progbits
 399              		.align	1
 400              		.global	SPI_SET_DAT
 401              		.syntax unified
 402              		.code	16
 403              		.thumb_func
 404              		.fpu softvfp
 406              	SPI_SET_DAT:
 407              	.LFB37:
 212:Core/Src/main.c **** 
 213:Core/Src/main.c **** void SPI_SET_DAT( uint8_t *ADDR, uint8_t *data)
 214:Core/Src/main.c **** {
 408              		.loc 1 214 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 8
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              	.LVL33:
 413 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 414              	.LCFI4:
 415              		.cfi_def_cfa_offset 20
 416              		.cfi_offset 4, -20
 417              		.cfi_offset 5, -16
 418              		.cfi_offset 6, -12
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 83B0     		sub	sp, sp, #12
 422              	.LCFI5:
 423              		.cfi_def_cfa_offset 32
 424 0004 0D00     		movs	r5, r1
 215:Core/Src/main.c **** 	uint8_t addr;
 216:Core/Src/main.c **** 	addr = *(uint8_t *)ADDR;
 425              		.loc 1 216 0
 426 0006 0278     		ldrb	r2, [r0]
 217:Core/Src/main.c **** 	addr = addr & 0x7f;
 427              		.loc 1 217 0
 428 0008 7F23     		movs	r3, #127
 429 000a 1340     		ands	r3, r2
ARM GAS  /tmp/ccKFTvd8.s 			page 13


 430 000c 6A46     		mov	r2, sp
 431 000e D71D     		adds	r7, r2, #7
 432 0010 D371     		strb	r3, [r2, #7]
 218:Core/Src/main.c **** 
 219:Core/Src/main.c **** 	HAL_GPIO_WritePin(CS_BME_GPIO_Port, CS_BME_Pin, GPIO_PIN_RESET);
 433              		.loc 1 219 0
 434 0012 A024     		movs	r4, #160
 435 0014 E405     		lsls	r4, r4, #23
 436 0016 0022     		movs	r2, #0
 437 0018 0821     		movs	r1, #8
 438              	.LVL34:
 439 001a 2000     		movs	r0, r4
 440              	.LVL35:
 441 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 442              	.LVL36:
 220:Core/Src/main.c **** 	HAL_SPI_Transmit(&hspi1, &addr, 1, 10);
 443              		.loc 1 220 0
 444 0020 094E     		ldr	r6, .L13
 445 0022 0A23     		movs	r3, #10
 446 0024 0122     		movs	r2, #1
 447 0026 3900     		movs	r1, r7
 448 0028 3000     		movs	r0, r6
 449 002a FFF7FEFF 		bl	HAL_SPI_Transmit
 450              	.LVL37:
 221:Core/Src/main.c **** 	HAL_SPI_Transmit(&hspi1, data, 1, 10);
 451              		.loc 1 221 0
 452 002e 0A23     		movs	r3, #10
 453 0030 0122     		movs	r2, #1
 454 0032 2900     		movs	r1, r5
 455 0034 3000     		movs	r0, r6
 456 0036 FFF7FEFF 		bl	HAL_SPI_Transmit
 457              	.LVL38:
 222:Core/Src/main.c **** 	HAL_GPIO_WritePin(CS_BME_GPIO_Port, CS_BME_Pin, GPIO_PIN_SET);
 458              		.loc 1 222 0
 459 003a 0122     		movs	r2, #1
 460 003c 0821     		movs	r1, #8
 461 003e 2000     		movs	r0, r4
 462 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
 463              	.LVL39:
 223:Core/Src/main.c **** }
 464              		.loc 1 223 0
 465 0044 03B0     		add	sp, sp, #12
 466              		@ sp needed
 467              	.LVL40:
 468 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 469              	.L14:
 470              		.align	2
 471              	.L13:
 472 0048 00000000 		.word	hspi1
 473              		.cfi_endproc
 474              	.LFE37:
 476              		.section	.text.Error_Handler,"ax",%progbits
 477              		.align	1
 478              		.global	Error_Handler
 479              		.syntax unified
 480              		.code	16
 481              		.thumb_func
ARM GAS  /tmp/ccKFTvd8.s 			page 14


 482              		.fpu softvfp
 484              	Error_Handler:
 485              	.LFB38:
 224:Core/Src/main.c **** /* USER CODE END 4 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c **** /**
 227:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 228:Core/Src/main.c ****   * @retval None
 229:Core/Src/main.c ****   */
 230:Core/Src/main.c **** void Error_Handler(void)
 231:Core/Src/main.c **** {
 486              		.loc 1 231 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 232:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 233:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /* USER CODE END Error_Handler_Debug */
 236:Core/Src/main.c **** }
 491              		.loc 1 236 0
 492              		@ sp needed
 493 0000 7047     		bx	lr
 494              		.cfi_endproc
 495              	.LFE38:
 497              		.global	dev_bme
 498              		.comm	P,28,4
 499              		.comm	NRF905_Config_t,10,4
 500              		.section	.bss.dev_bme,"aw",%nobits
 501              		.align	2
 502              		.set	.LANCHOR0,. + 0
 505              	dev_bme:
 506 0000 00000000 		.space	112
 506      00000000 
 506      00000000 
 506      00000000 
 506      00000000 
 507              		.text
 508              	.Letext0:
 509              		.file 2 "/home/maxx/develop/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_defa
 510              		.file 3 "/home/maxx/develop/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h
 511              		.file 4 "/home/maxx/STM32Cube/Repository/STM32Cube_FW_L0_V1.11.2/Drivers/CMSIS/Device/ST/STM32L0xx
 512              		.file 5 "/home/maxx/STM32Cube/Repository/STM32Cube_FW_L0_V1.11.2/Drivers/CMSIS/Device/ST/STM32L0xx
 513              		.file 6 "/home/maxx/STM32Cube/Repository/STM32Cube_FW_L0_V1.11.2/Drivers/STM32L0xx_HAL_Driver/Inc/
 514              		.file 7 "/home/maxx/STM32Cube/Repository/STM32Cube_FW_L0_V1.11.2/Drivers/STM32L0xx_HAL_Driver/Inc/
 515              		.file 8 "/home/maxx/STM32Cube/Repository/STM32Cube_FW_L0_V1.11.2/Drivers/STM32L0xx_HAL_Driver/Inc/
 516              		.file 9 "/home/maxx/STM32Cube/Repository/STM32Cube_FW_L0_V1.11.2/Drivers/STM32L0xx_HAL_Driver/Inc/
 517              		.file 10 "/home/maxx/STM32Cube/Repository/STM32Cube_FW_L0_V1.11.2/Drivers/STM32L0xx_HAL_Driver/Inc
 518              		.file 11 "/home/maxx/STM32Cube/Repository/STM32Cube_FW_L0_V1.11.2/Drivers/STM32L0xx_HAL_Driver/Inc
 519              		.file 12 "Core/Inc/main.h"
 520              		.file 13 "Core/Inc/spi.h"
 521              		.file 14 "Core/Inc/bme280_defs.h"
 522              		.file 15 "Core/Inc/nrf905.h"
 523              		.file 16 "Core/Inc/gpio.h"
 524              		.file 17 "Core/Inc/bme280.h"
 525              		.file 18 "<built-in>"
ARM GAS  /tmp/ccKFTvd8.s 			page 15


ARM GAS  /tmp/ccKFTvd8.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccKFTvd8.s:16     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccKFTvd8.s:23     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccKFTvd8.s:101    .text.SystemClock_Config:000000000000005c $d
     /tmp/ccKFTvd8.s:107    .text.main:0000000000000000 $t
     /tmp/ccKFTvd8.s:114    .text.main:0000000000000000 main
     /tmp/ccKFTvd8.s:320    .text.main:0000000000000118 $d
                            *COM*:000000000000000a NRF905_Config_t
                            *COM*:000000000000001c P
     /tmp/ccKFTvd8.s:330    .text.SPI_GET_DAT:0000000000000000 $t
     /tmp/ccKFTvd8.s:337    .text.SPI_GET_DAT:0000000000000000 SPI_GET_DAT
     /tmp/ccKFTvd8.s:394    .text.SPI_GET_DAT:000000000000003c $d
     /tmp/ccKFTvd8.s:399    .text.SPI_SET_DAT:0000000000000000 $t
     /tmp/ccKFTvd8.s:406    .text.SPI_SET_DAT:0000000000000000 SPI_SET_DAT
     /tmp/ccKFTvd8.s:472    .text.SPI_SET_DAT:0000000000000048 $d
     /tmp/ccKFTvd8.s:477    .text.Error_Handler:0000000000000000 $t
     /tmp/ccKFTvd8.s:484    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccKFTvd8.s:505    .bss.dev_bme:0000000000000000 dev_bme
     /tmp/ccKFTvd8.s:501    .bss.dev_bme:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_SPI1_Init
HAL_GPIO_WritePin
NRF905_POWER_ON
HAL_Delay
NRF905_INIT
WriteDataToSend
StartSend
initBME280
GetCalibData_BME280
GetData_BME280
HAL_SPI_Transmit
HAL_SPI_Receive
hspi1
