ARM GAS  /tmp/ccFp3Rha.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"usart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	MX_USART1_UART_Init
  19              		.arch armv6s-m
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  23              		.fpu softvfp
  25              	MX_USART1_UART_Init:
  26              	.LFB1053:
  27              		.file 1 "Core/Src/usart.c"
   1:Core/Src/usart.c **** /**
   2:Core/Src/usart.c ****   ******************************************************************************
   3:Core/Src/usart.c ****   * @file    usart.c
   4:Core/Src/usart.c ****   * @brief   This file provides code for the configuration
   5:Core/Src/usart.c ****   *          of the USART instances.
   6:Core/Src/usart.c ****   ******************************************************************************
   7:Core/Src/usart.c ****   * @attention
   8:Core/Src/usart.c ****   *
   9:Core/Src/usart.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/usart.c ****   * All rights reserved.</center></h2>
  11:Core/Src/usart.c ****   *
  12:Core/Src/usart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/usart.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/usart.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/usart.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/usart.c ****   *
  17:Core/Src/usart.c ****   ******************************************************************************
  18:Core/Src/usart.c ****   */
  19:Core/Src/usart.c **** 
  20:Core/Src/usart.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/usart.c **** #include "usart.h"
  22:Core/Src/usart.c **** 
  23:Core/Src/usart.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/usart.c **** 
  25:Core/Src/usart.c **** /* USER CODE END 0 */
  26:Core/Src/usart.c **** 
  27:Core/Src/usart.c **** /* USART1 init function */
  28:Core/Src/usart.c **** 
  29:Core/Src/usart.c **** void MX_USART1_UART_Init(void)
  30:Core/Src/usart.c **** {
  28              		.loc 1 30 1 view -0
ARM GAS  /tmp/ccFp3Rha.s 			page 2


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 64
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  31:Core/Src/usart.c ****   LL_USART_InitTypeDef USART_InitStruct = {0};
  32              		.loc 1 31 3 view .LVU1
  30:Core/Src/usart.c ****   LL_USART_InitTypeDef USART_InitStruct = {0};
  33              		.loc 1 30 1 is_stmt 0 view .LVU2
  34 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 20
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 91B0     		sub	sp, sp, #68
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 88
  45              		.loc 1 31 24 view .LVU3
  46 0004 1C22     		movs	r2, #28
  47 0006 0021     		movs	r1, #0
  48 0008 09A8     		add	r0, sp, #36
  49 000a FFF7FEFF 		bl	memset
  50              	.LVL0:
  32:Core/Src/usart.c **** 
  33:Core/Src/usart.c ****   LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
  51              		.loc 1 33 3 is_stmt 1 view .LVU4
  34:Core/Src/usart.c **** 
  35:Core/Src/usart.c ****   /* Peripheral clock enable */
  36:Core/Src/usart.c ****   LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
  52              		.loc 1 36 3 view .LVU5
  53              	.LBB10:
  54              	.LBI10:
  55              		.file 2 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h"
   1:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @file    stm32l0xx_ll_bus.h
   4:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief   Header file of BUS LL module.
   6:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
   7:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   @verbatim
   8:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****                       ##### RCC Limitations #####
   9:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   ==============================================================================
  10:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****     [..]
  11:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       A delay between an RCC peripheral clock enable and the effective peripheral
  12:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       enabling should be taken into account in order to manage the peripheral read/write
  13:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       from/to registers.
  14:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       (+) This delay depends on the peripheral mapping.
  15:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  16:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  17:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****     [..]
  18:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       Workarounds:
  19:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  20:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****           inserted in each LL_{BUS}_GRP{x}_EnableClock() function.
  21:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  22:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   @endverbatim
  23:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   ******************************************************************************
ARM GAS  /tmp/ccFp3Rha.s 			page 3


  24:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @attention
  25:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
  26:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * <h2><center>&copy; Copyright(c) 2016 STMicroelectronics.
  27:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * All rights reserved.</center></h2>
  28:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
  29:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  30:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * the "License"; You may not use this file except in compliance with the
  31:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * License. You may obtain a copy of the License at:
  32:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *                        opensource.org/licenses/BSD-3-Clause
  33:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
  34:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   ******************************************************************************
  35:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  36:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  37:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  38:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #ifndef __STM32L0xx_LL_BUS_H
  39:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define __STM32L0xx_LL_BUS_H
  40:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  41:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #ifdef __cplusplus
  42:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** extern "C" {
  43:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
  44:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  45:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Includes ------------------------------------------------------------------*/
  46:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #include "stm32l0xx.h"
  47:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  48:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @addtogroup STM32L0xx_LL_Driver
  49:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
  50:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  51:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  52:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(RCC)
  53:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  54:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL BUS
  55:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
  56:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  57:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  58:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Private types -------------------------------------------------------------*/
  59:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Private variables ---------------------------------------------------------*/
  60:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  61:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Private constants ---------------------------------------------------------*/
  62:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  63:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Private macros ------------------------------------------------------------*/
  64:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  65:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Exported types ------------------------------------------------------------*/
  66:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Exported constants --------------------------------------------------------*/
  67:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Constants BUS Exported Constants
  68:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
  69:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  70:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  71:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_AHB1_GRP1_PERIPH  AHB1 GRP1 PERIPH
  72:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
  73:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  74:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ALL            0xFFFFFFFFU
  75:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA1           RCC_AHBENR_DMA1EN      /*!< DMA1 clock enable */
  76:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_MIF            RCC_AHBENR_MIFEN       /*!< MIF clock enable */
  77:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_SRAM           RCC_AHBSMENR_SRAMSMEN  /*!< Sleep Mode SRAM clock enable
  78:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRC            RCC_AHBENR_CRCEN       /*!< CRC clock enable */
  79:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(TSC)
  80:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_TSC            RCC_AHBENR_TSCEN       /*!< TSC clock enable */
ARM GAS  /tmp/ccFp3Rha.s 			page 4


  81:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*TSC*/
  82:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(RNG)
  83:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_RNG            RCC_AHBENR_RNGEN       /*!< RNG clock enable */
  84:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*RNG*/
  85:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(AES)
  86:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRYP           RCC_AHBENR_CRYPEN      /*!< CRYP clock enable */
  87:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*AES*/
  88:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
  89:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
  90:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  91:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  92:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
  93:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB1_GRP1_PERIPH  APB1 GRP1 PERIPH
  94:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
  95:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
  96:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_ALL            0xFFFFFFFFU
  97:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM2           RCC_APB1ENR_TIM2EN     /*!< TIM2 clock enable */
  98:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(TIM3)
  99:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM3           RCC_APB1ENR_TIM3EN     /*!< TIM3 clock enable */
 100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(TIM6)
 102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM6           RCC_APB1ENR_TIM6EN     /*!< TIM6 clock enable */
 103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(TIM7)
 105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM7           RCC_APB1ENR_TIM7EN     /*!< TIM7 clock enable */
 106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(LCD)
 108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LCD            RCC_APB1ENR_LCDEN      /*!< LCD clock enable */
 109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*LCD*/
 110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_WWDG           RCC_APB1ENR_WWDGEN     /*!< WWDG clock enable */
 111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(SPI2)
 112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_SPI2           RCC_APB1ENR_SPI2EN     /*!< SPI2 clock enable */
 113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART2         RCC_APB1ENR_USART2EN   /*!< USART2 clock enable */
 115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LPUART1        RCC_APB1ENR_LPUART1EN  /*!< LPUART1 clock enable */
 116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(USART4)
 117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART4         RCC_APB1ENR_USART4EN   /*!< USART4 clock enable */
 118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(USART5)
 120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART5         RCC_APB1ENR_USART5EN   /*!< USART5 clock enable */
 121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C1           RCC_APB1ENR_I2C1EN     /*!< I2C1 clock enable */
 123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(I2C2)
 124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C2           RCC_APB1ENR_I2C2EN     /*!< I2C2 clock enable */
 125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(USB)
 127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USB            RCC_APB1ENR_USBEN      /*!< USB clock enable */
 128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*USB*/
 129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(CRS)
 130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_CRS            RCC_APB1ENR_CRSEN      /*!< CRS clock enable */
 131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*CRS*/
 132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_PWR            RCC_APB1ENR_PWREN      /*!< PWR clock enable */
 133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(DAC)
 134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_DAC1           RCC_APB1ENR_DACEN      /*!< DAC clock enable */
 135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(I2C3)
 137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C3           RCC_APB1ENR_I2C3EN     /*!< I2C3 clock enable */
ARM GAS  /tmp/ccFp3Rha.s 			page 5


 138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LPTIM1         RCC_APB1ENR_LPTIM1EN   /*!< LPTIM1 clock enable */
 140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB2_GRP1_PERIPH  APB2 GRP1 PERIPH
 148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ALL            0xFFFFFFFFU
 151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SYSCFG         RCC_APB2ENR_SYSCFGEN  /*!< SYSCFG clock enable */
 152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM21          RCC_APB2ENR_TIM21EN   /*!< TIM21 clock enable */
 153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(TIM22)
 154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM22          RCC_APB2ENR_TIM22EN   /*!< TIM22 clock enable */
 155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_FW             RCC_APB2ENR_FWEN      /*!< FireWall clock enable */
 157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ADC1           RCC_APB2ENR_ADC1EN    /*!< ADC1 clock enable */
 158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SPI1           RCC_APB2ENR_SPI1EN    /*!< SPI1 clock enable */
 159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(USART1)
 160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_USART1         RCC_APB2ENR_USART1EN  /*!< USART1 clock enable */
 161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif
 162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_DBGMCU         RCC_APB2ENR_DBGMCUEN  /*!< DBGMCU clock enable */
 163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EC_IOP_GRP1_PERIPH  IOP GRP1 PERIPH
 171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_ALL             0xFFFFFFFFU
 174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOA           RCC_IOPENR_GPIOAEN    /*!< GPIO port A control */
 175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOB           RCC_IOPENR_GPIOBEN    /*!< GPIO port B control */
 176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOC           RCC_IOPENR_GPIOCEN    /*!< GPIO port C control */
 177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(GPIOD)
 178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOD           RCC_IOPENR_GPIODEN    /*!< GPIO port D control */
 179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*GPIOD*/
 180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(GPIOE)
 181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOE           RCC_IOPENR_GPIOEEN    /*!< GPIO port H control */
 182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*GPIOE*/
 183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #if defined(GPIOH)
 184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #define LL_IOP_GRP1_PERIPH_GPIOH           RCC_IOPENR_GPIOHEN    /*!< GPIO port H control */
 185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** #endif /*GPIOH*/
 186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
ARM GAS  /tmp/ccFp3Rha.s 			page 6


 195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Exported macro ------------------------------------------------------------*/
 196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /* Exported functions --------------------------------------------------------*/
 197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Functions BUS Exported Functions
 198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EF_AHB1 AHB1
 202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock.
 207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBENR      DMAEN        LL_AHB1_GRP1_EnableClock\n
 208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      MIFEN        LL_AHB1_GRP1_EnableClock\n
 209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRCEN        LL_AHB1_GRP1_EnableClock\n
 210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      TSCEN        LL_AHB1_GRP1_EnableClock\n
 211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      RNGEN        LL_AHB1_GRP1_EnableClock\n
 212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRYPEN       LL_AHB1_GRP1_EnableClock
 213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
 225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->AHBENR, Periphs);
 228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
 231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Check if AHB1 peripheral clock is enabled or not
 235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBENR      DMAEN        LL_AHB1_GRP1_IsEnabledClock\n
 236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      MIFEN        LL_AHB1_GRP1_IsEnabledClock\n
 237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRCEN        LL_AHB1_GRP1_IsEnabledClock\n
 238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      TSCEN        LL_AHB1_GRP1_IsEnabledClock\n
 239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      RNGEN        LL_AHB1_GRP1_IsEnabledClock\n
 240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRYPEN       LL_AHB1_GRP1_IsEnabledClock
 241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval State of Periphs (1 or 0).
 251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
ARM GAS  /tmp/ccFp3Rha.s 			page 7


 252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE uint32_t LL_AHB1_GRP1_IsEnabledClock(uint32_t Periphs)
 253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   return ((READ_BIT(RCC->AHBENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock.
 259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBENR      DMAEN        LL_AHB1_GRP1_DisableClock\n
 260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      MIFEN        LL_AHB1_GRP1_DisableClock\n
 261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRCEN        LL_AHB1_GRP1_DisableClock\n
 262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      TSCEN        LL_AHB1_GRP1_DisableClock\n
 263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      RNGEN        LL_AHB1_GRP1_DisableClock\n
 264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBENR      CRYPEN       LL_AHB1_GRP1_DisableClock
 265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClock(uint32_t Periphs)
 277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBENR, Periphs);
 279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Force AHB1 peripherals reset.
 283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBRSTR      DMARST        LL_AHB1_GRP1_ForceReset\n
 284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      MIFRST        LL_AHB1_GRP1_ForceReset\n
 285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      CRCRST        LL_AHB1_GRP1_ForceReset\n
 286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      TSCRST        LL_AHB1_GRP1_ForceReset\n
 287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      RNGRST        LL_AHB1_GRP1_ForceReset\n
 288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      CRYPRST       LL_AHB1_GRP1_ForceReset
 289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
 302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->AHBRSTR, Periphs);
 304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Release AHB1 peripherals reset.
 308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBRSTR      DMARST        LL_AHB1_GRP1_ReleaseReset\n
ARM GAS  /tmp/ccFp3Rha.s 			page 8


 309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      MIFRST        LL_AHB1_GRP1_ReleaseReset\n
 310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      CRCRST        LL_AHB1_GRP1_ReleaseReset\n
 311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      TSCRST        LL_AHB1_GRP1_ReleaseReset\n
 312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      RNGRST        LL_AHB1_GRP1_ReleaseReset\n
 313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBRSTR      CRYPRST       LL_AHB1_GRP1_ReleaseReset
 314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
 327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBRSTR, Periphs);
 329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock during Low Power (Sleep) mode.
 333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBSMENR     DMASMEN       LL_AHB1_GRP1_EnableClockSleep\n
 334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     MIFSMEN       LL_AHB1_GRP1_EnableClockSleep\n
 335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     SRAMSMEN      LL_AHB1_GRP1_EnableClockSleep\n
 336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     CRCSMEN       LL_AHB1_GRP1_EnableClockSleep\n
 337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     TSCSMEN       LL_AHB1_GRP1_EnableClockSleep\n
 338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     RNGSMEN       LL_AHB1_GRP1_EnableClockSleep\n
 339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     CRYPSMEN      LL_AHB1_GRP1_EnableClockSleep
 340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClockSleep(uint32_t Periphs)
 353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->AHBSMENR, Periphs);
 356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHBSMENR, Periphs);
 358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
 359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock during Low Power (Sleep) mode.
 363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll AHBSMENR     DMASMEN       LL_AHB1_GRP1_DisableClockSleep\n
 364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     MIFSMEN       LL_AHB1_GRP1_DisableClockSleep\n
 365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     SRAMSMEN      LL_AHB1_GRP1_DisableClockSleep\n
ARM GAS  /tmp/ccFp3Rha.s 			page 9


 366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     CRCSMEN       LL_AHB1_GRP1_DisableClockSleep\n
 367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     TSCSMEN       LL_AHB1_GRP1_DisableClockSleep\n
 368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     RNGSMEN       LL_AHB1_GRP1_DisableClockSleep\n
 369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         AHBSMENR     CRYPSMEN      LL_AHB1_GRP1_DisableClockSleep
 370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_MIF
 373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC (*)
 376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG (*)
 377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClockSleep(uint32_t Periphs)
 383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBSMENR, Periphs);
 385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EF_APB1 APB1
 392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Enable APB1 peripherals clock.
 397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB1ENR     TIM2EN        LL_APB1_GRP1_EnableClock\n
 398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM3EN        LL_APB1_GRP1_EnableClock\n
 399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM6EN        LL_APB1_GRP1_EnableClock\n
 400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM7EN        LL_APB1_GRP1_EnableClock\n
 401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LCDEN         LL_APB1_GRP1_EnableClock\n
 402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     WWDGEN        LL_APB1_GRP1_EnableClock\n
 403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     SPI2EN        LL_APB1_GRP1_EnableClock\n
 404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART2EN      LL_APB1_GRP1_EnableClock\n
 405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LPUART1EN     LL_APB1_GRP1_EnableClock\n
 406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART4EN      LL_APB1_GRP1_EnableClock\n
 407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART5EN      LL_APB1_GRP1_EnableClock\n
 408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C1EN        LL_APB1_GRP1_EnableClock\n
 409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C2EN        LL_APB1_GRP1_EnableClock\n
 410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USBEN         LL_APB1_GRP1_EnableClock\n
 411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     CRSEN         LL_APB1_GRP1_EnableClock\n
 412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     PWREN         LL_APB1_GRP1_EnableClock\n
 413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     DACEN         LL_APB1_GRP1_EnableClock\n
 414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C3EN        LL_APB1_GRP1_EnableClock\n
 415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LPTIM1EN      LL_APB1_GRP1_EnableClock
 416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3 (*)
 419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
ARM GAS  /tmp/ccFp3Rha.s 			page 10


 423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPUART1
 426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART4 (*)
 427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART5 (*)
 428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CRS (*)
 432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C3 (*)
 435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
 436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
 441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->APB1ENR, Periphs);
 444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
 447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Check if APB1 peripheral clock is enabled or not
 451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB1ENR     TIM2EN        LL_APB1_GRP1_IsEnabledClock\n
 452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM3EN        LL_APB1_GRP1_IsEnabledClock\n
 453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM6EN        LL_APB1_GRP1_IsEnabledClock\n
 454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM7EN        LL_APB1_GRP1_IsEnabledClock\n
 455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LCDEN         LL_APB1_GRP1_IsEnabledClock\n
 456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     WWDGEN        LL_APB1_GRP1_IsEnabledClock\n
 457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     SPI2EN        LL_APB1_GRP1_IsEnabledClock\n
 458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART2EN      LL_APB1_GRP1_IsEnabledClock\n
 459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LPUART1EN     LL_APB1_GRP1_IsEnabledClock\n
 460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART4EN      LL_APB1_GRP1_IsEnabledClock\n
 461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART5EN      LL_APB1_GRP1_IsEnabledClock\n
 462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C1EN        LL_APB1_GRP1_IsEnabledClock\n
 463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C2EN        LL_APB1_GRP1_IsEnabledClock\n
 464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USBEN         LL_APB1_GRP1_IsEnabledClock\n
 465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     CRSEN         LL_APB1_GRP1_IsEnabledClock\n
 466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     PWREN         LL_APB1_GRP1_IsEnabledClock\n
 467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     DACEN         LL_APB1_GRP1_IsEnabledClock\n
 468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C3EN        LL_APB1_GRP1_IsEnabledClock\n
 469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LPTIM1EN      LL_APB1_GRP1_IsEnabledClock
 470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3 (*)
 473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPUART1
ARM GAS  /tmp/ccFp3Rha.s 			page 11


 480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART4 (*)
 481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART5 (*)
 482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CRS (*)
 486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C3 (*)
 489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
 490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval State of Periphs (1 or 0).
 493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
 495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   return ((READ_BIT(RCC->APB1ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Disable APB1 peripherals clock.
 501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB1ENR     TIM2EN        LL_APB1_GRP1_DisableClock\n
 502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM3EN        LL_APB1_GRP1_DisableClock\n
 503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM6EN        LL_APB1_GRP1_DisableClock\n
 504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     TIM7EN        LL_APB1_GRP1_DisableClock\n
 505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LCDEN         LL_APB1_GRP1_DisableClock\n
 506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     WWDGEN        LL_APB1_GRP1_DisableClock\n
 507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     SPI2EN        LL_APB1_GRP1_DisableClock\n
 508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART2EN      LL_APB1_GRP1_DisableClock\n
 509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LPUART1EN     LL_APB1_GRP1_DisableClock\n
 510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART4EN      LL_APB1_GRP1_DisableClock\n
 511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USART5EN      LL_APB1_GRP1_DisableClock\n
 512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C1EN        LL_APB1_GRP1_DisableClock\n
 513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C2EN        LL_APB1_GRP1_DisableClock\n
 514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     USBEN         LL_APB1_GRP1_DisableClock\n
 515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     CRSEN         LL_APB1_GRP1_DisableClock\n
 516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     PWREN         LL_APB1_GRP1_DisableClock\n
 517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     DACEN         LL_APB1_GRP1_DisableClock\n
 518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     I2C3EN        LL_APB1_GRP1_DisableClock\n
 519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1ENR     LPTIM1EN      LL_APB1_GRP1_DisableClock
 520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3 (*)
 523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPUART1
 530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART4 (*)
 531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART5 (*)
 532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CRS (*)
 536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
ARM GAS  /tmp/ccFp3Rha.s 			page 12


 537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C3 (*)
 539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
 540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
 545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->APB1ENR, Periphs);
 547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Force APB1 peripherals reset.
 551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB1RSTR     TIM2RST        LL_APB1_GRP1_ForceReset\n
 552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     TIM3RST        LL_APB1_GRP1_ForceReset\n
 553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     TIM6RST        LL_APB1_GRP1_ForceReset\n
 554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     TIM7RST        LL_APB1_GRP1_ForceReset\n
 555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     LCDRST         LL_APB1_GRP1_ForceReset\n
 556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     WWDGRST        LL_APB1_GRP1_ForceReset\n
 557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     SPI2RST        LL_APB1_GRP1_ForceReset\n
 558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     USART2RST      LL_APB1_GRP1_ForceReset\n
 559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     LPUART1RST     LL_APB1_GRP1_ForceReset\n
 560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     USART4RST      LL_APB1_GRP1_ForceReset\n
 561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     USART5RST      LL_APB1_GRP1_ForceReset\n
 562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     I2C1RST        LL_APB1_GRP1_ForceReset\n
 563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     I2C2RST        LL_APB1_GRP1_ForceReset\n
 564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     USBRST         LL_APB1_GRP1_ForceReset\n
 565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     CRSRST         LL_APB1_GRP1_ForceReset\n
 566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     PWRRST         LL_APB1_GRP1_ForceReset\n
 567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     DACRST         LL_APB1_GRP1_ForceReset\n
 568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     I2C3RST        LL_APB1_GRP1_ForceReset\n
 569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     LPTIM1RST      LL_APB1_GRP1_ForceReset
 570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
 572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3 (*)
 574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPUART1
 581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART4 (*)
 582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART5 (*)
 583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CRS (*)
 587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C3 (*)
 590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
 591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
ARM GAS  /tmp/ccFp3Rha.s 			page 13


 594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
 596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->APB1RSTR, Periphs);
 598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Release APB1 peripherals reset.
 602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB1RSTR     TIM2RST        LL_APB1_GRP1_ReleaseReset\n
 603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     TIM3RST        LL_APB1_GRP1_ReleaseReset\n
 604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     TIM6RST        LL_APB1_GRP1_ReleaseReset\n
 605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     TIM7RST        LL_APB1_GRP1_ReleaseReset\n
 606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     LCDRST         LL_APB1_GRP1_ReleaseReset\n
 607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     WWDGRST        LL_APB1_GRP1_ReleaseReset\n
 608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     SPI2RST        LL_APB1_GRP1_ReleaseReset\n
 609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     USART2RST      LL_APB1_GRP1_ReleaseReset\n
 610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     LPUART1RST     LL_APB1_GRP1_ReleaseReset\n
 611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     USART4RST      LL_APB1_GRP1_ReleaseReset\n
 612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     USART5RST      LL_APB1_GRP1_ReleaseReset\n
 613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     I2C1RST        LL_APB1_GRP1_ReleaseReset\n
 614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     I2C2RST        LL_APB1_GRP1_ReleaseReset\n
 615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     USBRST         LL_APB1_GRP1_ReleaseReset\n
 616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     CRSRST         LL_APB1_GRP1_ReleaseReset\n
 617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     PWRRST         LL_APB1_GRP1_ReleaseReset\n
 618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     DACRST         LL_APB1_GRP1_ReleaseReset\n
 619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     I2C3RST        LL_APB1_GRP1_ReleaseReset\n
 620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1RSTR     LPTIM1RST      LL_APB1_GRP1_ReleaseReset
 621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
 623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3 (*)
 625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPUART1
 632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART4 (*)
 633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART5 (*)
 634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CRS (*)
 638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C3 (*)
 641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
 642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
 647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->APB1RSTR, Periphs);
 649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
ARM GAS  /tmp/ccFp3Rha.s 			page 14


 651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Enable APB1 peripherals clock during Low Power (Sleep) mode.
 653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB1SMENR    TIM2SMEN      LL_APB1_GRP1_EnableClockSleep\n
 654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    TIM3SMEN      LL_APB1_GRP1_EnableClockSleep\n
 655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    TIM6SMEN      LL_APB1_GRP1_EnableClockSleep\n
 656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    TIM7SMEN      LL_APB1_GRP1_EnableClockSleep\n
 657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    LCDSMEN       LL_APB1_GRP1_EnableClockSleep\n
 658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    WWDGSMEN      LL_APB1_GRP1_EnableClockSleep\n
 659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    SPI2SMEN      LL_APB1_GRP1_EnableClockSleep\n
 660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    USART2SMEN    LL_APB1_GRP1_EnableClockSleep\n
 661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    LPUART1SMEN   LL_APB1_GRP1_EnableClockSleep\n
 662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    USART4SMEN    LL_APB1_GRP1_EnableClockSleep\n
 663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    USART5SMEN    LL_APB1_GRP1_EnableClockSleep\n
 664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    I2C1SMEN      LL_APB1_GRP1_EnableClockSleep\n
 665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    I2C2SMEN      LL_APB1_GRP1_EnableClockSleep\n
 666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    USBSMEN       LL_APB1_GRP1_EnableClockSleep\n
 667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    CRSSMEN       LL_APB1_GRP1_EnableClockSleep\n
 668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    PWRSMEN       LL_APB1_GRP1_EnableClockSleep\n
 669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    DACSMEN       LL_APB1_GRP1_EnableClockSleep\n
 670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    I2C3SMEN      LL_APB1_GRP1_EnableClockSleep\n
 671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    LPTIM1SMEN    LL_APB1_GRP1_EnableClockSleep
 672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3 (*)
 675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPUART1
 682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART4 (*)
 683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART5 (*)
 684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CRS (*)
 688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C3 (*)
 691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
 692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_EnableClockSleep(uint32_t Periphs)
 697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->APB1SMENR, Periphs);
 700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB1SMENR, Periphs);
 702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
 703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Disable APB1 peripherals clock during Low Power (Sleep) mode.
 707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB1SMENR    TIM2SMEN      LL_APB1_GRP1_DisableClockSleep\n
ARM GAS  /tmp/ccFp3Rha.s 			page 15


 708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    TIM3SMEN      LL_APB1_GRP1_DisableClockSleep\n
 709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    TIM6SMEN      LL_APB1_GRP1_DisableClockSleep\n
 710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    TIM7SMEN      LL_APB1_GRP1_DisableClockSleep\n
 711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    LCDSMEN       LL_APB1_GRP1_DisableClockSleep\n
 712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    WWDGSMEN      LL_APB1_GRP1_DisableClockSleep\n
 713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    SPI2SMEN      LL_APB1_GRP1_DisableClockSleep\n
 714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    USART2SMEN    LL_APB1_GRP1_DisableClockSleep\n
 715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    LPUART1SMEN   LL_APB1_GRP1_DisableClockSleep\n
 716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    USART4SMEN    LL_APB1_GRP1_DisableClockSleep\n
 717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    USART5SMEN    LL_APB1_GRP1_DisableClockSleep\n
 718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    I2C1SMEN      LL_APB1_GRP1_DisableClockSleep\n
 719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    I2C2SMEN      LL_APB1_GRP1_DisableClockSleep\n
 720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    USBSMEN       LL_APB1_GRP1_DisableClockSleep\n
 721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    CRSSMEN       LL_APB1_GRP1_DisableClockSleep\n
 722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    PWRSMEN       LL_APB1_GRP1_DisableClockSleep\n
 723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    DACSMEN       LL_APB1_GRP1_DisableClockSleep\n
 724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    I2C3SMEN      LL_APB1_GRP1_DisableClockSleep\n
 725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB1SMENR    LPTIM1SMEN    LL_APB1_GRP1_DisableClockSleep
 726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3 (*)
 729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPUART1
 736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART4 (*)
 737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART5 (*)
 738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CRS (*)
 742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C3 (*)
 745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
 746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
 751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->APB1SMENR, Periphs);
 753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EF_APB2 APB2
 760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Enable APB2 peripherals clock.
ARM GAS  /tmp/ccFp3Rha.s 			page 16


 765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB2ENR      SYSCFGEN      LL_APB2_GRP1_EnableClock\n
 766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      TIM21EN       LL_APB2_GRP1_EnableClock\n
 767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      TIM22EN       LL_APB2_GRP1_EnableClock\n
 768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      FWEN          LL_APB2_GRP1_EnableClock\n
 769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      ADCEN         LL_APB2_GRP1_EnableClock\n
 770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      SPI1EN        LL_APB2_GRP1_EnableClock\n
 771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      USART1EN      LL_APB2_GRP1_EnableClock\n
 772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      DBGEN         LL_APB2_GRP1_EnableClock
 773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SYSCFG
 775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM21
 776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM22  (*)
 777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_FW
 778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
 779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
 780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_USART1 (*)
 781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_DBGMCU
 782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
  56              		.loc 2 786 22 view .LVU6
  57              	.LBB11:
 787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   __IO uint32_t tmpreg;
  58              		.loc 2 788 3 view .LVU7
 789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->APB2ENR, Periphs);
  59              		.loc 2 789 3 view .LVU8
  60 000e 8020     		movs	r0, #128
  61              	.LBE11:
  62              	.LBE10:
  63              	.LBB15:
  64              	.LBB16:
 790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
 793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Check if APB2 peripheral clock is enabled or not
 797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB2ENR      SYSCFGEN      LL_APB2_GRP1_IsEnabledClock\n
 798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      TIM21EN       LL_APB2_GRP1_IsEnabledClock\n
 799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      TIM22EN       LL_APB2_GRP1_IsEnabledClock\n
 800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      FWEN          LL_APB2_GRP1_IsEnabledClock\n
 801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      ADCEN         LL_APB2_GRP1_IsEnabledClock\n
 802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      SPI1EN        LL_APB2_GRP1_IsEnabledClock\n
 803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      USART1EN      LL_APB2_GRP1_IsEnabledClock\n
 804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      DBGEN         LL_APB2_GRP1_IsEnabledClock
 805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SYSCFG
 807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM21
 808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM22  (*)
 809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_FW
 810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
 811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
 812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_USART1 (*)
ARM GAS  /tmp/ccFp3Rha.s 			page 17


 813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_DBGMCU
 814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval State of Periphs (1 or 0).
 817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
 819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Disable APB2 peripherals clock.
 825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB2ENR      SYSCFGEN      LL_APB2_GRP1_DisableClock\n
 826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      TIM21EN       LL_APB2_GRP1_DisableClock\n
 827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      TIM22EN       LL_APB2_GRP1_DisableClock\n
 828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      FWEN          LL_APB2_GRP1_DisableClock\n
 829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      ADCEN         LL_APB2_GRP1_DisableClock\n
 830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      SPI1EN        LL_APB2_GRP1_DisableClock\n
 831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      USART1EN      LL_APB2_GRP1_DisableClock\n
 832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2ENR      DBGEN         LL_APB2_GRP1_DisableClock
 833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SYSCFG
 835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM21
 836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM22  (*)
 837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_FW
 838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
 839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
 840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_USART1  (*)
 841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_DBGMCU
 842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
 847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->APB2ENR, Periphs);
 849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Force APB2 peripherals reset.
 853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB2RSTR     SYSCFGRST     LL_APB2_GRP1_ForceReset\n
 854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     TIM21RST      LL_APB2_GRP1_ForceReset\n
 855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     TIM22RST      LL_APB2_GRP1_ForceReset\n
 856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     ADCRST        LL_APB2_GRP1_ForceReset\n
 857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     SPI1RST       LL_APB2_GRP1_ForceReset\n
 858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     USART1RST     LL_APB2_GRP1_ForceReset\n
 859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     DBGRST        LL_APB2_GRP1_ForceReset
 860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ALL
 862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SYSCFG
 863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM21
 864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM22  (*)
 865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
 866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
 867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_USART1 (*)
 868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_DBGMCU
 869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
ARM GAS  /tmp/ccFp3Rha.s 			page 18


 870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
 874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->APB2RSTR, Periphs);
 876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Release APB2 peripherals reset.
 880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB2RSTR     SYSCFGRST     LL_APB2_GRP1_ReleaseReset\n
 881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     TIM21RST      LL_APB2_GRP1_ReleaseReset\n
 882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     TIM22RST      LL_APB2_GRP1_ReleaseReset\n
 883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     ADCRST        LL_APB2_GRP1_ReleaseReset\n
 884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     SPI1RST       LL_APB2_GRP1_ReleaseReset\n
 885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     USART1RST     LL_APB2_GRP1_ReleaseReset\n
 886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2RSTR     DBGRST        LL_APB2_GRP1_ReleaseReset
 887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ALL
 889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SYSCFG
 890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM21
 891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM22  (*)
 892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
 893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
 894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_USART1  (*)
 895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_DBGMCU
 896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
 901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->APB2RSTR, Periphs);
 903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Enable APB2 peripherals clock during Low Power (Sleep) mode.
 907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB2SMENR    SYSCFGSMEN    LL_APB2_GRP1_EnableClockSleep\n
 908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    TIM21SMEN     LL_APB2_GRP1_EnableClockSleep\n
 909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    TIM22SMEN     LL_APB2_GRP1_EnableClockSleep\n
 910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    ADCSMEN       LL_APB2_GRP1_EnableClockSleep\n
 911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    SPI1SMEN      LL_APB2_GRP1_EnableClockSleep\n
 912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    USART1SMEN    LL_APB2_GRP1_EnableClockSleep\n
 913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    DBGSMEN       LL_APB2_GRP1_EnableClockSleep
 914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SYSCFG
 916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM21
 917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM22  (*)
 918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
 919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
 920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_USART1  (*)
 921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_DBGMCU
 922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB2_GRP1_EnableClockSleep(uint32_t Periphs)
ARM GAS  /tmp/ccFp3Rha.s 			page 19


 927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->APB2SMENR, Periphs);
 930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB2SMENR, Periphs);
 932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
 933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Disable APB2 peripherals clock during Low Power (Sleep) mode.
 937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll APB2SMENR    SYSCFGSMEN    LL_APB2_GRP1_DisableClockSleep\n
 938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    TIM21SMEN     LL_APB2_GRP1_DisableClockSleep\n
 939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    TIM22SMEN     LL_APB2_GRP1_DisableClockSleep\n
 940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    ADCSMEN       LL_APB2_GRP1_DisableClockSleep\n
 941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    SPI1SMEN      LL_APB2_GRP1_DisableClockSleep\n
 942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    USART1SMEN    LL_APB2_GRP1_DisableClockSleep\n
 943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         APB2SMENR    DBGSMEN       LL_APB2_GRP1_DisableClockSleep
 944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SYSCFG
 946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM21
 947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM22  (*)
 948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
 949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
 950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_USART1  (*)
 951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_DBGMCU
 952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
 953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_APB2_GRP1_DisableClockSleep(uint32_t Periphs)
 957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   CLEAR_BIT(RCC->APB2SMENR, Periphs);
 959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @}
 963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /** @defgroup BUS_LL_EF_IOP IOP
 965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @{
 966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   */
 967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** 
 968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** /**
 969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @brief  Enable IOP peripherals clock.
 970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @rmtoll IOPENR       GPIOAEN       LL_IOP_GRP1_EnableClock\n
 971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         IOPENR       GPIOBEN       LL_IOP_GRP1_EnableClock\n
 972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         IOPENR       GPIOCEN       LL_IOP_GRP1_EnableClock\n
 973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         IOPENR       GPIODEN       LL_IOP_GRP1_EnableClock\n
 974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         IOPENR       GPIOEEN       LL_IOP_GRP1_EnableClock\n
 975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         IOPENR       GPIOHEN       LL_IOP_GRP1_EnableClock
 976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOA
 978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOB
 979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOC
 980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD (*)
 981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE (*)
 982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOH (*)
 983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *
ARM GAS  /tmp/ccFp3Rha.s 			page 20


 984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   *         (*) value not defined in all devices.
 985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   * @retval None
 986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** */
 987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** __STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
 988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   __IO uint32_t tmpreg;
 990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->IOPENR, Periphs);
  65              		.loc 2 990 3 is_stmt 0 view .LVU9
  66 0010 0225     		movs	r5, #2
  67              	.LBE16:
  68              	.LBE15:
  69              	.LBB20:
  70              	.LBB12:
 789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->APB2ENR, Periphs);
  71              		.loc 2 789 3 view .LVU10
  72 0012 234B     		ldr	r3, .L3
  73 0014 C001     		lsls	r0, r0, #7
  74 0016 596B     		ldr	r1, [r3, #52]
  75              	.LBE12:
  76              	.LBE20:
  37:Core/Src/usart.c **** 
  38:Core/Src/usart.c ****   LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
  39:Core/Src/usart.c ****   /**USART1 GPIO Configuration
  40:Core/Src/usart.c ****   PB6   ------> USART1_TX
  41:Core/Src/usart.c ****   PB7   ------> USART1_RX
  42:Core/Src/usart.c ****   */
  43:Core/Src/usart.c ****   GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
  44:Core/Src/usart.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  45:Core/Src/usart.c ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  46:Core/Src/usart.c ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  77              		.loc 1 46 30 view .LVU11
  78 0018 0024     		movs	r4, #0
  79              	.LBB21:
  80              	.LBB13:
 789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
  81              		.loc 2 789 3 view .LVU12
  82 001a 0143     		orrs	r1, r0
  83 001c 5963     		str	r1, [r3, #52]
 791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
  84              		.loc 2 791 3 is_stmt 1 view .LVU13
 791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
  85              		.loc 2 791 12 is_stmt 0 view .LVU14
  86 001e 5A6B     		ldr	r2, [r3, #52]
  87              	.LBE13:
  88              	.LBE21:
  45:Core/Src/usart.c ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  89              		.loc 1 45 25 view .LVU15
  90 0020 0327     		movs	r7, #3
  91              	.LBB22:
  92              	.LBB14:
 791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
  93              		.loc 2 791 12 view .LVU16
  94 0022 0240     		ands	r2, r0
 791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
  95              		.loc 2 791 10 view .LVU17
  96 0024 0292     		str	r2, [sp, #8]
 792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
ARM GAS  /tmp/ccFp3Rha.s 			page 21


  97              		.loc 2 792 3 is_stmt 1 view .LVU18
  98 0026 029A     		ldr	r2, [sp, #8]
  99              	.LVL1:
 792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** }
 100              		.loc 2 792 3 is_stmt 0 view .LVU19
 101              	.LBE14:
 102              	.LBE22:
  38:Core/Src/usart.c ****   /**USART1 GPIO Configuration
 103              		.loc 1 38 3 is_stmt 1 view .LVU20
 104              	.LBB23:
 105              	.LBI15:
 987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h **** {
 106              		.loc 2 987 22 view .LVU21
 107              	.LBB17:
 989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   SET_BIT(RCC->IOPENR, Periphs);
 108              		.loc 2 989 3 view .LVU22
 109              		.loc 2 990 3 view .LVU23
 110 0028 DA6A     		ldr	r2, [r3, #44]
 111              	.LBE17:
 112              	.LBE23:
  47:Core/Src/usart.c ****   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  48:Core/Src/usart.c ****   GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  49:Core/Src/usart.c ****   LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 113              		.loc 1 49 3 is_stmt 0 view .LVU24
 114 002a 1E4E     		ldr	r6, .L3+4
 115              	.LBB24:
 116              	.LBB18:
 117              		.loc 2 990 3 view .LVU25
 118 002c 2A43     		orrs	r2, r5
 119 002e DA62     		str	r2, [r3, #44]
 991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 120              		.loc 2 992 3 is_stmt 1 view .LVU26
 121              		.loc 2 992 12 is_stmt 0 view .LVU27
 122 0030 DB6A     		ldr	r3, [r3, #44]
 123              	.LBE18:
 124              	.LBE24:
 125              		.loc 1 49 3 view .LVU28
 126 0032 03A9     		add	r1, sp, #12
 127              	.LBB25:
 128              	.LBB19:
 129              		.loc 2 992 12 view .LVU29
 130 0034 2B40     		ands	r3, r5
 131              		.loc 2 992 10 view .LVU30
 132 0036 0193     		str	r3, [sp, #4]
 993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_bus.h ****   (void)tmpreg;
 133              		.loc 2 993 3 is_stmt 1 view .LVU31
 134 0038 019B     		ldr	r3, [sp, #4]
 135              	.LVL2:
 136              		.loc 2 993 3 is_stmt 0 view .LVU32
 137              	.LBE19:
 138              	.LBE25:
  43:Core/Src/usart.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 139              		.loc 1 43 3 is_stmt 1 view .LVU33
  43:Core/Src/usart.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 140              		.loc 1 43 23 is_stmt 0 view .LVU34
 141 003a 4023     		movs	r3, #64
ARM GAS  /tmp/ccFp3Rha.s 			page 22


 142              		.loc 1 49 3 view .LVU35
 143 003c 3000     		movs	r0, r6
  43:Core/Src/usart.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 144              		.loc 1 43 23 view .LVU36
 145 003e 0393     		str	r3, [sp, #12]
  44:Core/Src/usart.c ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 146              		.loc 1 44 3 is_stmt 1 view .LVU37
  46:Core/Src/usart.c ****   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 147              		.loc 1 46 30 is_stmt 0 view .LVU38
 148 0040 0694     		str	r4, [sp, #24]
  47:Core/Src/usart.c ****   GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 149              		.loc 1 47 24 view .LVU39
 150 0042 0794     		str	r4, [sp, #28]
  48:Core/Src/usart.c ****   LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 151              		.loc 1 48 29 view .LVU40
 152 0044 0894     		str	r4, [sp, #32]
  44:Core/Src/usart.c ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 153              		.loc 1 44 24 view .LVU41
 154 0046 0495     		str	r5, [sp, #16]
  45:Core/Src/usart.c ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 155              		.loc 1 45 3 is_stmt 1 view .LVU42
  45:Core/Src/usart.c ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 156              		.loc 1 45 25 is_stmt 0 view .LVU43
 157 0048 0597     		str	r7, [sp, #20]
  46:Core/Src/usart.c ****   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 158              		.loc 1 46 3 is_stmt 1 view .LVU44
  47:Core/Src/usart.c ****   GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 159              		.loc 1 47 3 view .LVU45
  48:Core/Src/usart.c ****   LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 160              		.loc 1 48 3 view .LVU46
 161              		.loc 1 49 3 view .LVU47
 162 004a FFF7FEFF 		bl	LL_GPIO_Init
 163              	.LVL3:
  50:Core/Src/usart.c **** 
  51:Core/Src/usart.c ****   GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 164              		.loc 1 51 3 view .LVU48
 165              		.loc 1 51 23 is_stmt 0 view .LVU49
 166 004e 8023     		movs	r3, #128
  52:Core/Src/usart.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  53:Core/Src/usart.c ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  54:Core/Src/usart.c ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  55:Core/Src/usart.c ****   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  56:Core/Src/usart.c ****   GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  57:Core/Src/usart.c ****   LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 167              		.loc 1 57 3 view .LVU50
 168 0050 03A9     		add	r1, sp, #12
 169 0052 3000     		movs	r0, r6
  51:Core/Src/usart.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 170              		.loc 1 51 23 view .LVU51
 171 0054 0393     		str	r3, [sp, #12]
  52:Core/Src/usart.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 172              		.loc 1 52 3 is_stmt 1 view .LVU52
  54:Core/Src/usart.c ****   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 173              		.loc 1 54 30 is_stmt 0 view .LVU53
 174 0056 0694     		str	r4, [sp, #24]
  55:Core/Src/usart.c ****   GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 175              		.loc 1 55 24 view .LVU54
ARM GAS  /tmp/ccFp3Rha.s 			page 23


 176 0058 0794     		str	r4, [sp, #28]
  56:Core/Src/usart.c ****   LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 177              		.loc 1 56 29 view .LVU55
 178 005a 0894     		str	r4, [sp, #32]
  52:Core/Src/usart.c ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 179              		.loc 1 52 24 view .LVU56
 180 005c 0495     		str	r5, [sp, #16]
  53:Core/Src/usart.c ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 181              		.loc 1 53 3 is_stmt 1 view .LVU57
  53:Core/Src/usart.c ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 182              		.loc 1 53 25 is_stmt 0 view .LVU58
 183 005e 0597     		str	r7, [sp, #20]
  54:Core/Src/usart.c ****   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 184              		.loc 1 54 3 is_stmt 1 view .LVU59
  55:Core/Src/usart.c ****   GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 185              		.loc 1 55 3 view .LVU60
  56:Core/Src/usart.c ****   LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 186              		.loc 1 56 3 view .LVU61
 187              		.loc 1 57 3 view .LVU62
 188 0060 FFF7FEFF 		bl	LL_GPIO_Init
 189              	.LVL4:
  58:Core/Src/usart.c **** 
  59:Core/Src/usart.c ****   USART_InitStruct.BaudRate = 115200;
 190              		.loc 1 59 3 view .LVU63
 191              		.loc 1 59 29 is_stmt 0 view .LVU64
 192 0064 E123     		movs	r3, #225
 193 0066 5B02     		lsls	r3, r3, #9
 194 0068 0993     		str	r3, [sp, #36]
  60:Core/Src/usart.c ****   USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 195              		.loc 1 60 3 is_stmt 1 view .LVU65
  61:Core/Src/usart.c ****   USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  62:Core/Src/usart.c ****   USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  63:Core/Src/usart.c ****   USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 196              		.loc 1 63 38 is_stmt 0 view .LVU66
 197 006a 0C23     		movs	r3, #12
  60:Core/Src/usart.c ****   USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 198              		.loc 1 60 30 view .LVU67
 199 006c 0A94     		str	r4, [sp, #40]
  61:Core/Src/usart.c ****   USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 200              		.loc 1 61 3 is_stmt 1 view .LVU68
  61:Core/Src/usart.c ****   USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 201              		.loc 1 61 29 is_stmt 0 view .LVU69
 202 006e 0B94     		str	r4, [sp, #44]
  62:Core/Src/usart.c ****   USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 203              		.loc 1 62 3 is_stmt 1 view .LVU70
  62:Core/Src/usart.c ****   USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 204              		.loc 1 62 27 is_stmt 0 view .LVU71
 205 0070 0C94     		str	r4, [sp, #48]
 206              		.loc 1 63 3 is_stmt 1 view .LVU72
  64:Core/Src/usart.c ****   USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 207              		.loc 1 64 40 is_stmt 0 view .LVU73
 208 0072 0E94     		str	r4, [sp, #56]
  65:Core/Src/usart.c ****   USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 209              		.loc 1 65 33 view .LVU74
 210 0074 0F94     		str	r4, [sp, #60]
  66:Core/Src/usart.c ****   LL_USART_Init(USART1, &USART_InitStruct);
 211              		.loc 1 66 3 view .LVU75
ARM GAS  /tmp/ccFp3Rha.s 			page 24


 212 0076 0C4C     		ldr	r4, .L3+8
 213 0078 09A9     		add	r1, sp, #36
 214 007a 2000     		movs	r0, r4
  63:Core/Src/usart.c ****   USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 215              		.loc 1 63 38 view .LVU76
 216 007c 0D93     		str	r3, [sp, #52]
  64:Core/Src/usart.c ****   USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 217              		.loc 1 64 3 is_stmt 1 view .LVU77
  65:Core/Src/usart.c ****   LL_USART_Init(USART1, &USART_InitStruct);
 218              		.loc 1 65 3 view .LVU78
 219              		.loc 1 66 3 view .LVU79
 220 007e FFF7FEFF 		bl	LL_USART_Init
 221              	.LVL5:
  67:Core/Src/usart.c ****   LL_USART_ConfigAsyncMode(USART1);
 222              		.loc 1 67 3 view .LVU80
 223              	.LBB26:
 224              	.LBI26:
 225              		.file 3 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h"
   1:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @file    stm32l0xx_ll_usart.h
   4:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @attention
   8:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *
   9:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *
  12:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *
  17:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   ******************************************************************************
  18:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  19:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  20:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #ifndef STM32L0xx_LL_USART_H
  22:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define STM32L0xx_LL_USART_H
  23:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  24:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #ifdef __cplusplus
  25:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** extern "C" {
  26:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif
  27:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  28:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #include "stm32l0xx.h"
  30:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  31:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @addtogroup STM32L0xx_LL_Driver
  32:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
  33:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  34:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  35:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART4) || defined (USART5)
  36:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  37:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL USART
  38:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
  39:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccFp3Rha.s 			page 25


  40:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  41:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  44:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  46:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  47:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  48:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
  49:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  50:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
  51:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
  52:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  53:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  54:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  55:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  56:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  57:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  58:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
  59:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  60:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  61:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
  62:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  63:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
  64:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** typedef struct
  65:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
  66:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  67:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  68:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  69:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  70:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            function @ref LL_USART_SetBaudRate().*/
  71:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  72:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  73:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  74:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  75:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  76:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            function @ref LL_USART_SetDataWidth().*/
  77:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  78:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
  79:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
  80:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  81:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  82:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            function @ref LL_USART_SetStopBitsLength().*/
  83:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  84:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
  85:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
  86:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  87:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  88:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            function @ref LL_USART_SetParity().*/
  89:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  90:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
  91:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
  92:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  93:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  94:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            function @ref LL_USART_SetTransferDirection().*/
  95:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  96:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
ARM GAS  /tmp/ccFp3Rha.s 			page 26


  97:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
  98:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
  99:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            function @ref LL_USART_SetHWFlowCtrl().*/
 101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            function @ref LL_USART_SetOverSampling().*/
 107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** } LL_USART_InitTypeDef;
 109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** typedef struct
 114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPolarity().
 127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPhase().
 134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            functions @ref LL_USART_SetLastClkPulseOutput().
 142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                            For more details, refer to description of this function.
 143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
ARM GAS  /tmp/ccFp3Rha.s 			page 27


 154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLEAR_FLAG Clear Flags Defines
 157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_WriteReg function
 158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_PECF                       USART_ICR_PECF                /*!< Parity error fla
 161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_FECF                       USART_ICR_FECF                /*!< Framing error fl
 162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_NCF                        USART_ICR_NCF                 /*!< Noise error dete
 163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_ORECF                      USART_ICR_ORECF               /*!< Overrun error fl
 164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_IDLECF                     USART_ICR_IDLECF              /*!< Idle line detect
 165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_TCCF                       USART_ICR_TCCF                /*!< Transmission com
 166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_TCBGTCF                    USART_ICR_TCBGTCF             /*!< Transmission com
 168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
 169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_LBDCF                      USART_ICR_LBDCF               /*!< LIN break detect
 170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_CTSCF                      USART_ICR_CTSCF               /*!< CTS flag */
 171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_RTOCF                      USART_ICR_RTOCF               /*!< Receiver timeout
 172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_EOBCF                      USART_ICR_EOBCF               /*!< End of block fla
 173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_CMCF                       USART_ICR_CMCF                /*!< Character match 
 174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ICR_WUCF                       USART_ICR_WUCF                /*!< Wakeup from Stop
 175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_PE                         USART_ISR_PE                  /*!< Parity error fla
 184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_FE                         USART_ISR_FE                  /*!< Framing error fl
 185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_NE                         USART_ISR_NE                  /*!< Noise detected f
 186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_ORE                        USART_ISR_ORE                 /*!< Overrun error fl
 187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_IDLE                       USART_ISR_IDLE                /*!< Idle line detect
 188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_RXNE                       USART_ISR_RXNE                /*!< Read data regist
 189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_TC                         USART_ISR_TC                  /*!< Transmission com
 190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_TXE                        USART_ISR_TXE                 /*!< Transmit data re
 191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_LBDF                       USART_ISR_LBDF                /*!< LIN break detect
 192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_CTSIF                      USART_ISR_CTSIF               /*!< CTS interrupt fl
 193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_CTS                        USART_ISR_CTS                 /*!< CTS flag */
 194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_RTOF                       USART_ISR_RTOF                /*!< Receiver timeout
 195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_EOBF                       USART_ISR_EOBF                /*!< End of block fla
 196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_ABRE                       USART_ISR_ABRE                /*!< Auto baud rate e
 197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_ABRF                       USART_ISR_ABRF                /*!< Auto baud rate f
 198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_BUSY                       USART_ISR_BUSY                /*!< Busy flag */
 199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_CMF                        USART_ISR_CMF                 /*!< Character match 
 200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_SBKF                       USART_ISR_SBKF                /*!< Send break flag 
 201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_RWU                        USART_ISR_RWU                 /*!< Receiver wakeup 
 202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_WUF                        USART_ISR_WUF                 /*!< Wakeup from Stop
 203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_TEACK                      USART_ISR_TEACK               /*!< Transmit enable 
 204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_REACK                      USART_ISR_REACK               /*!< Receive enable a
 205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ISR_TCBGT                      USART_ISR_TCBGT               /*!< Transmission com
 207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
 208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccFp3Rha.s 			page 28


 211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_CMIE                       USART_CR1_CMIE                /*!< Character match 
 222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_RTOIE                      USART_CR1_RTOIE               /*!< Receiver timeout
 223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR1_EOBIE                      USART_CR1_EOBIE               /*!< End of Block int
 224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR3_WUFIE                      USART_CR3_WUFIE               /*!< Wakeup from Stop
 228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USART_TCBGT_SUPPORT)
 229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CR3_TCBGTIE                    USART_CR3_TCBGTIE             /*!< Transmission com
 230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif /* USART_TCBGT_SUPPORT */
 231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccFp3Rha.s 			page 29


 268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_7B                   USART_CR1_M1            /*!< 7 bits word length : S
 269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M0            /*!< 9 bits word length : S
 271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
ARM GAS  /tmp/ccFp3Rha.s 			page 30


 325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXRX TX RX Pins Swap
 335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_TXRX_STANDARD                  0x00000000U           /*!< TX/RX pins are used as d
 338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_TXRX_SWAPPED                   (USART_CR2_SWAP)      /*!< TX and RX pins functions
 339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_RXPIN_LEVEL RX Pin Active Level Inversion
 344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_STANDARD           0x00000000U           /*!< RX pin signal works usin
 347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_INVERTED           (USART_CR2_RXINV)     /*!< RX pin signal values are
 348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXPIN_LEVEL TX Pin Active Level Inversion
 353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_STANDARD           0x00000000U           /*!< TX pin signal works usin
 356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_INVERTED           (USART_CR2_TXINV)     /*!< TX pin signal values are
 357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_BINARY_LOGIC Binary Data Inversion
 362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_POSITIVE          0x00000000U           /*!< Logical data from the da
 365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_NEGATIVE          USART_CR2_DATAINV     /*!< Logical data from the da
 366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_BITORDER Bit Order
 371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_BITORDER_LSBFIRST              0x00000000U           /*!< data is transmitted/rece
 374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_BITORDER_MSBFIRST              USART_CR2_MSBFIRST    /*!< data is transmitted/rece
 375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_AUTOBAUD_DETECT_ON Autobaud Detection
 380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccFp3Rha.s 			page 31


 382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT    0x00000000U                                 /*!< Me
 383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0                         /*!< Fa
 384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME    USART_CR2_ABRMODE_1                         /*!< 0x
 385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME    (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0) /*!< 0x
 386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_ADDRESS_DETECT Address Length Detection
 391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_4B              0x00000000U           /*!< 4-bit address detection 
 394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_7B              USART_CR2_ADDM7       /*!< 7-bit address detection 
 395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP_ON Wakeup Activation
 411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_ADDRESS              0x00000000U                             /*!< Wake u
 414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_STARTBIT             USART_CR3_WUS_1                         /*!< Wake u
 415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_RXNE                 (USART_CR3_WUS_0 | USART_CR3_WUS_1)     /*!< Wake u
 416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DE_POLARITY Driver Enable Polarity
ARM GAS  /tmp/ccFp3Rha.s 			page 32


 439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DE_POLARITY_HIGH               0x00000000U           /*!< DE signal is active high
 442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DE_POLARITY_LOW                USART_CR3_DEP         /*!< DE signal is active low 
 443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EC_DMA_REG_DATA DMA Register Data
 448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_TRANSMIT          0x00000000U          /*!< Get address of data regis
 451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_RECEIVE           0x00000001U          /*!< Get address of data regis
 452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Write a value in USART register
 471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __REG__ Register to be written
 473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Read a value in USART register
 480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __REG__ Register to be read
 482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Register value
 483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
ARM GAS  /tmp/ccFp3Rha.s 			page 33


 496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__) ((((__PERIPHCLK__)*2U)\
 501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                                                 + ((__BAUDRATE__)/2U))/(__BAUDRATE_
 502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__) (((__PERIPHCLK__) + ((__BAUDRATE__)/
 511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
 518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
 528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  USART Enable
 532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         flags, in the USARTx_ISR are set to their default values.
 546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
ARM GAS  /tmp/ccFp3Rha.s 			page 34


 553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  USART enabled in STOP Mode.
 568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   When this function is enabled, USART is able to wake up the MCU from Stop mode, provide
 569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         USART clock selection is HSI or LSE in RCC.
 570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_EnableInStopMode
 573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
 577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UESM);
 579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  USART disabled in STOP Mode.
 583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   When this function is disabled, USART is not able to wake up the MCU from Stop mode
 584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_DisableInStopMode
 587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
 591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if USART is enabled in STOP Mode (able to wake up MCU from Stop mode or not)
 597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_IsEnabledInStopMode
 600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledInStopMode(USART_TypeDef *USARTx)
 604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UESM) == (USART_CR1_UESM)) ? 1UL : 0UL);
 606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  USART Clock enabled in STOP Mode
ARM GAS  /tmp/ccFp3Rha.s 			page 35


 610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   When this function is called, USART Clock is enabled while in STOP mode
 611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          UCESM         LL_USART_EnableClockInStopMode
 612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableClockInStopMode(USART_TypeDef *USARTx)
 616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_UCESM);
 618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  USART clock disabled in STOP Mode
 622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   When this function is called, USART Clock is disabled while in STOP mode
 623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          UCESM         LL_USART_DisableClockInStopMode
 624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableClockInStopMode(USART_TypeDef *USARTx)
 628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_UCESM);
 630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if USART clock is enabled in STOP Mode
 634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          UCESM         LL_USART_IsClockEnabledInStopMode
 635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsClockEnabledInStopMode(USART_TypeDef *USARTx)
 639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_UCESM) == (USART_CR3_UCESM));
 641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Receiver Disable
 656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Transmitter Enable
ARM GAS  /tmp/ccFp3Rha.s 			page 36


 667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Transmitter Disable
 678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         of Transmitter and Receiver
 690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
ARM GAS  /tmp/ccFp3Rha.s 			page 37


 724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
ARM GAS  /tmp/ccFp3Rha.s 			page 38


 781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_SetDataWidth\n
 785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          M1            LL_USART_SetDataWidth
 786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
 789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_GetDataWidth\n
 801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          M1            LL_USART_GetDataWidth
 802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
 805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
 809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Allow switch between Mute Mode and Active mode
 815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_EnableMuteMode
 816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
 820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_MME);
 822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Prevent Mute Mode use. Set Receiver in active mode permanently.
 826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_DisableMuteMode
 827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
 831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_MME);
 833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if switch between Mute Mode and Active mode is allowed
 837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_IsEnabledMuteMode
ARM GAS  /tmp/ccFp3Rha.s 			page 39


 838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledMuteMode(USART_TypeDef *USARTx)
 842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_MME) == (USART_CR1_MME)) ? 1UL : 0UL);
 844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Oversampling mode
 862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
ARM GAS  /tmp/ccFp3Rha.s 			page 40


 895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
 932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
ARM GAS  /tmp/ccFp3Rha.s 			page 41


 952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
 979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
 989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
 990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
 992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 994:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
 995:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
 996:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
 997:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 998:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 999:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
1000:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1001:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1002:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1003:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
1004:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1005:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1006:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1007:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1008:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccFp3Rha.s 			page 42


1009:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
1010:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1011:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1012:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
1013:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1014:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1015:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1016:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
1017:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1018:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
1019:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1020:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1021:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1022:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
1023:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1024:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1025:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
1026:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1027:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1028:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1029:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
1030:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1031:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN)) ? 1UL : 0UL);
1032:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1033:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1034:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1035:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set the length of the stop bits
1036:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
1037:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1038:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1039:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1040:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1041:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1042:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1043:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1044:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1045:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
1046:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1047:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1048:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1049:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1050:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1051:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
1052:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
1053:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1054:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1055:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1056:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1057:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1058:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1059:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1060:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
1061:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1062:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
1063:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1064:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1065:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccFp3Rha.s 			page 43


1066:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
1067:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1068:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
1069:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
1070:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
1071:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
1072:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
1073:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          M0            LL_USART_ConfigCharacter\n
1074:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR1          M1            LL_USART_ConfigCharacter\n
1075:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
1076:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1077:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1078:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1079:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1080:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1081:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1082:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1083:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1084:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1085:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1086:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1087:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1088:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1089:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1090:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1091:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1092:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
1093:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                               uint32_t StopBits)
1094:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1095:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
1096:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1097:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1098:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1099:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure TX/RX pins swapping setting.
1101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_SetTXRXSwap
1102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  SwapConfig This parameter can be one of the following values:
1104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
1109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
1111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve TX/RX pins swapping configuration.
1115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_GetTXRXSwap
1116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXRXSwap(USART_TypeDef *USARTx)
1122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/ccFp3Rha.s 			page 44


1123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_SWAP));
1124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure RX pin active level logic
1128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_SetRXPinLevel
1129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
1138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve RX pin active level logic configuration
1142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_GetRXPinLevel
1143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXPinLevel(USART_TypeDef *USARTx)
1149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_RXINV));
1151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure TX pin active level logic
1155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_SetTXPinLevel
1156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
1165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve TX pin active level logic configuration
1169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_GetTXPinLevel
1170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXPinLevel(USART_TypeDef *USARTx)
1176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_TXINV));
1178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
ARM GAS  /tmp/ccFp3Rha.s 			page 45


1180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure Binary data logic.
1182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Allow to define how Logical data from the data register are send/received :
1183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         either in positive/direct logic (1=H, 0=L) or in negative/inverse logic (1=L, 0=H)
1184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_SetBinaryDataLogic
1185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  DataLogic This parameter can be one of the following values:
1187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
1192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_DATAINV, DataLogic);
1194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve Binary data configuration
1198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_GetBinaryDataLogic
1199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBinaryDataLogic(USART_TypeDef *USARTx)
1205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_DATAINV));
1207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure transfer bit order (either Less or Most Significant Bit First)
1211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_SetTransferBitOrder
1214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  BitOrder This parameter can be one of the following values:
1216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
1221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_MSBFIRST, BitOrder);
1223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return transfer bit order (either Less or Most Significant Bit First)
1227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_GetTransferBitOrder
1230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferBitOrder(USART_TypeDef *USARTx)
1236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/ccFp3Rha.s 			page 46


1237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_MSBFIRST));
1238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Auto Baud-Rate Detection
1242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
1245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
1249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_ABREN);
1251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Auto Baud-Rate Detection
1255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_DisableAutoBaudRate
1258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
1262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_ABREN);
1264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Auto Baud-Rate Detection mechanism is enabled
1268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_IsEnabledAutoBaud
1271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledAutoBaud(USART_TypeDef *USARTx)
1275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_ABREN) == (USART_CR2_ABREN)) ? 1UL : 0UL);
1277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Auto Baud-Rate mode bits
1281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_SetAutoBaudRateMode
1284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  AutoBaudRateMode This parameter can be one of the following values:
1286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
1293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/ccFp3Rha.s 			page 47


1294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
1295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Auto Baud-Rate mode
1299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_GetAutoBaudRateMode
1302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetAutoBaudRateMode(USART_TypeDef *USARTx)
1310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ABRMODE));
1312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Receiver Timeout
1316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
1317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
1321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
1323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Receiver Timeout
1327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_DisableRxTimeout
1328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
1332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_RTOEN);
1334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Receiver Timeout feature is enabled
1338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_IsEnabledRxTimeout
1339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledRxTimeout(USART_TypeDef *USARTx)
1343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_RTOEN) == (USART_CR2_RTOEN)) ? 1UL : 0UL);
1345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Address of the USART node.
1349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
1350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         for wake up with address mark detection.
ARM GAS  /tmp/ccFp3Rha.s 			page 48


1351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   4bits address node is used when 4-bit Address Detection is selected in ADDM7.
1352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (b7-b4 should be set to 0)
1353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         8bits address node is used when 7-bit Address Detection is selected in ADDM7.
1354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (This is used in multiprocessor communication during Mute mode or Stop mode,
1355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         for wake up with 7-bit address mark detection.
1356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         The MSB of the character sent by the transmitter should be equal to 1.
1357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         It may also be used for character detection during normal reception,
1358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Mute mode inactive (for example, end of block detection in ModBus protocol).
1359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         In this case, the whole received character (8-bit) is compared to the ADD[7:0]
1360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         value and CMF flag is set on match)
1361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_ConfigNodeAddress\n
1362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          ADDM7         LL_USART_ConfigNodeAddress
1363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  AddressLen This parameter can be one of the following values:
1365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  NodeAddress 4 or 7 bit Address of the USART node.
1368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_
1371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
1373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****              (uint32_t)(AddressLen | (NodeAddress << USART_CR2_ADD_Pos)));
1374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return 8 bit Address of the USART node as set in ADD field of CR2.
1378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   If 4-bit Address Detection is selected in ADDM7,
1379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
1380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         If 7-bit Address Detection is selected in ADDM7,
1381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         only 8bits (b7-b0) of returned value are relevant (b31-b8 are not relevant)
1382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
1383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
1385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
1387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD) >> USART_CR2_ADD_Pos);
1389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Length of Node Address used in Address Detection mode (7-bit or 4-bit)
1393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          ADDM7         LL_USART_GetNodeAddressLen
1394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddressLen(USART_TypeDef *USARTx)
1400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADDM7));
1402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
1406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
ARM GAS  /tmp/ccFp3Rha.s 			page 49


1408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
1409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
1415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
1419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
1422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
1428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
1432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
1435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
1441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
1445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
1448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
1454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
1458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
1461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
1462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
1464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
ARM GAS  /tmp/ccFp3Rha.s 			page 50


1465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
1471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
1473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
1477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
1480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
1481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
1489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
1491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable One bit sampling method
1495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
1496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccFp3Rha.s 			page 51


1522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT)) ? 1UL : 0UL);
1524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Overrun detection
1528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_EnableOverrunDetect
1529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
1533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Overrun detection
1539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
1540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
1544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Overrun detection is enabled
1550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_IsEnabledOverrunDetect
1551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOverrunDetect(USART_TypeDef *USARTx)
1555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_OVRDIS) != USART_CR3_OVRDIS) ? 1UL : 0UL);
1557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Select event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_SetWKUPType
1564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Type This parameter can be one of the following values:
1566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
1572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_WUS, Type);
1574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccFp3Rha.s 			page 52


1579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_GetWKUPType
1581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWKUPType(USART_TypeDef *USARTx)
1588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
1590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (Baud rate value != 0)
1598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****                                           uint32_t BaudRate)
1610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t usartdiv;
1612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t brrtemp;
1613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
1616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     brrtemp = usartdiv & 0xFFF0U;
1618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     USARTx->BRR = brrtemp;
1620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
1621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   else
1622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
1623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
1625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
ARM GAS  /tmp/ccFp3Rha.s 			page 53


1636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Baud Rate
1639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t usartdiv;
1643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   uint32_t brrresult = 0x0U;
1644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   if (usartdiv == 0U)
1648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
1649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     /* Do not perform a division by 0 */
1650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
1651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   else if (OverSampling == LL_USART_OVERSAMPLING_8)
1652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
1653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     if (usartdiv != 0U)
1655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     {
1656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     }
1658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
1659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   else
1660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   {
1661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     {
1663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****     }
1665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   }
1666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (brrresult);
1667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Receiver Time Out Value (expressed in nb of bits duration)
1671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_SetRxTimeout
1672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
1677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
1679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Get Receiver Time Out Value (expressed in nb of bits duration)
1683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_GetRxTimeout
1684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRxTimeout(USART_TypeDef *USARTx)
1688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_RTO));
1690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccFp3Rha.s 			page 54


1693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Block Length value in reception
1694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_SetBlockLength
1695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  BlockLength Value between Min_Data=0x00 and Max_Data=0xFF
1697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
1700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_BLEN, BlockLength << USART_RTOR_BLEN_Pos);
1702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Get Block Length value in reception
1706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_GetBlockLength
1707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
1709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBlockLength(USART_TypeDef *USARTx)
1711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_BLEN) >> USART_RTOR_BLEN_Pos);
1713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
1717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
1721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable IrDA mode
1725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable IrDA mode
1738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
ARM GAS  /tmp/ccFp3Rha.s 			page 55


1750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN)) ? 1UL : 0UL);
1760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)PrescalerValue);
1806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
ARM GAS  /tmp/ccFp3Rha.s 			page 56


1807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
1824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
1828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccFp3Rha.s 			page 57


1864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK)) ? 1UL : 0UL);
1867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
1904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN)) ? 1UL : 0UL);
1906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
1910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   This bit-field specifies the number of retries in transmit and receive, in Smartcard mo
1913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         In transmission mode, it specifies the number of automatic retransmission retries, befo
1914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         generating a transmission error (FE bit set).
1915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         In reception mode, it specifies the number or erroneous reception trials, before genera
1916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         reception error (RXNE and PE bits set)
1917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_SetSmartcardAutoRetryCount
1918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  AutoRetryCount Value between Min_Data=0 and Max_Data=7
1920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccFp3Rha.s 			page 58


1921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryC
1923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_SCARCNT, AutoRetryCount << USART_CR3_SCARCNT_Pos);
1925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
1929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_GetSmartcardAutoRetryCount
1932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Smartcard Auto-Retry Count value (Value between Min_Data=0 and Max_Data=7)
1934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardAutoRetryCount(USART_TypeDef *USARTx)
1936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_SCARCNT) >> USART_CR3_SCARCNT_Pos);
1938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
1949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)PrescalerValue);
1953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccFp3Rha.s 			page 59


1978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
1980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, (uint16_t)USART_GTPR_GT, (uint16_t)(GuardTime << USART_GTPR_GT_Pos));
1982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
1991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
1993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
1994:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
1995:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_GTPR_GT_Pos);
1996:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
1997:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
1998:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
1999:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
2000:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2001:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2002:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
2003:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
2004:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2005:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2006:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2007:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
2008:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2009:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2010:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
2011:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2012:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2013:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2014:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
2015:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2016:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2017:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2018:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2019:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2020:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
2021:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2022:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2023:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
2024:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2025:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2026:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2027:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
2028:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2029:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2030:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2031:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2032:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2033:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
2034:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccFp3Rha.s 			page 60


2035:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2036:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
2037:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2038:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2039:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2040:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
2041:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2042:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL)) ? 1UL : 0UL);
2043:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2044:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2045:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2046:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
2047:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2048:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2049:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
2050:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
2051:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2052:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2053:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2054:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
2055:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2056:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2057:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
2058:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2059:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
2060:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2061:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2062:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2063:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2064:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
2065:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2066:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
2067:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2068:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2069:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2070:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
2071:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2072:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2073:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
2074:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2075:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2076:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2077:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2078:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2079:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
2080:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2081:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
2082:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2083:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2084:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2085:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable LIN mode
2086:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2087:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2088:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
2089:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2090:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2091:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccFp3Rha.s 			page 61


2092:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
2093:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2094:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2095:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2096:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2097:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2098:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable LIN mode
2099:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
2102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
2106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
2108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
2112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
2115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
2119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN)) ? 1UL : 0UL);
2121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
2125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_DE Configuration functions related to Driver Enable feature
2128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
2129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set DEDT (Driver Enable De-Assertion Time), Time value expressed on 5 bits ([4:0] bits)
2133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_SetDEDeassertionTime
2136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
2141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
2143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return DEDT (Driver Enable De-Assertion Time)
2147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
ARM GAS  /tmp/ccFp3Rha.s 			page 62


2149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_GetDEDeassertionTime
2150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEDeassertionTime(USART_TypeDef *USARTx)
2154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEDT) >> USART_CR1_DEDT_Pos);
2156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Set DEAT (Driver Enable Assertion Time), Time value expressed on 5 bits ([4:0] bits).
2160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_SetDEAssertionTime
2163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
2168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
2170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return DEAT (Driver Enable Assertion Time)
2174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_GetDEAssertionTime
2177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEAssertionTime(USART_TypeDef *USARTx)
2181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEAT) >> USART_CR1_DEAT_Pos);
2183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Enable Driver Enable (DE) Mode
2187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_EnableDEMode
2190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
2194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DEM);
2196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Disable Driver Enable (DE) Mode
2200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_DisableDEMode
2203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
ARM GAS  /tmp/ccFp3Rha.s 			page 63


2206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
2207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
2209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Indicate if Driver Enable (DE) Mode is enabled
2213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_IsEnabledDEMode
2216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(USART_TypeDef *USARTx)
2220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
2222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Select Driver Enable Polarity
2226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_SetDESignalPolarity
2229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
2231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
2236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
2238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Return Driver Enable Polarity
2242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_GetDESignalPolarity
2245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDESignalPolarity(USART_TypeDef *USARTx)
2251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_DEP));
2253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
2254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @}
2257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
2259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
2260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @{
2261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** 
ARM GAS  /tmp/ccFp3Rha.s 			page 64


2263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** /**
2264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
2265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
2266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
2278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         dedicated functions
2280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
2281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
2282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
2283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
2284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
2285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @param  USARTx USART Instance
2286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   * @retval None
2287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
 226              		.loc 3 2288 22 view .LVU81
 227              	.LBB27:
2289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
2290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
2291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
2292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.
2293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   */
2294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 228              		.loc 3 2294 3 view .LVU82
 229 0082 6368     		ldr	r3, [r4, #4]
 230 0084 094A     		ldr	r2, .L3+12
 231 0086 1340     		ands	r3, r2
2295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 232              		.loc 3 2295 3 is_stmt 0 view .LVU83
 233 0088 2A22     		movs	r2, #42
2294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 234              		.loc 3 2294 3 view .LVU84
 235 008a 6360     		str	r3, [r4, #4]
 236              		.loc 3 2295 3 is_stmt 1 view .LVU85
 237 008c A368     		ldr	r3, [r4, #8]
 238 008e 9343     		bics	r3, r2
 239 0090 A360     		str	r3, [r4, #8]
 240              	.LVL6:
 241              		.loc 3 2295 3 is_stmt 0 view .LVU86
 242              	.LBE27:
 243              	.LBE26:
  68:Core/Src/usart.c ****   LL_USART_Enable(USART1);
 244              		.loc 1 68 3 is_stmt 1 view .LVU87
 245              	.LBB28:
 246              	.LBI28:
 536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** {
ARM GAS  /tmp/ccFp3Rha.s 			page 65


 247              		.loc 3 536 22 view .LVU88
 248              	.LBB29:
 538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 249              		.loc 3 538 3 view .LVU89
 250 0092 2368     		ldr	r3, [r4]
 251 0094 293A     		subs	r2, r2, #41
 252 0096 1343     		orrs	r3, r2
 253 0098 2360     		str	r3, [r4]
 254              	.LVL7:
 538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_usart.h **** }
 255              		.loc 3 538 3 is_stmt 0 view .LVU90
 256              	.LBE29:
 257              	.LBE28:
  69:Core/Src/usart.c **** 
  70:Core/Src/usart.c **** }
 258              		.loc 1 70 1 view .LVU91
 259 009a 11B0     		add	sp, sp, #68
 260              		@ sp needed
 261 009c F0BD     		pop	{r4, r5, r6, r7, pc}
 262              	.L4:
 263 009e C046     		.align	2
 264              	.L3:
 265 00a0 00100240 		.word	1073876992
 266 00a4 00040050 		.word	1342178304
 267 00a8 00380140 		.word	1073821696
 268 00ac FFB7FFFF 		.word	-18433
 269              		.cfi_endproc
 270              	.LFE1053:
 272              		.text
 273              	.Letext0:
 274              		.file 4 "/usr/local/arm-none-eabi/include/machine/_default_types.h"
 275              		.file 5 "/usr/local/arm-none-eabi/include/sys/_stdint.h"
 276              		.file 6 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 277              		.file 7 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l051xx.h"
 278              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_gpio.h"
 279              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_dma.h"
 280              		.file 10 "<built-in>"
ARM GAS  /tmp/ccFp3Rha.s 			page 66


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usart.c
     /tmp/ccFp3Rha.s:16     .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccFp3Rha.s:25     .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccFp3Rha.s:265    .text.MX_USART1_UART_Init:00000000000000a0 $d

UNDEFINED SYMBOLS
memset
LL_GPIO_Init
LL_USART_Init
