ARM GAS  /tmp/ccw3wHNd.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_ADC_Init,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	MX_ADC_Init
  19              		.arch armv6s-m
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  23              		.fpu softvfp
  25              	MX_ADC_Init:
  26              	.LFB34:
  27              		.file 1 "Core/Src/adc.c"
   1:Core/Src/adc.c **** /**
   2:Core/Src/adc.c ****   ******************************************************************************
   3:Core/Src/adc.c ****   * @file    adc.c
   4:Core/Src/adc.c ****   * @brief   This file provides code for the configuration
   5:Core/Src/adc.c ****   *          of the ADC instances.
   6:Core/Src/adc.c ****   ******************************************************************************
   7:Core/Src/adc.c ****   * @attention
   8:Core/Src/adc.c ****   *
   9:Core/Src/adc.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/adc.c ****   * All rights reserved.</center></h2>
  11:Core/Src/adc.c ****   *
  12:Core/Src/adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/adc.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/adc.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/adc.c ****   *
  17:Core/Src/adc.c ****   ******************************************************************************
  18:Core/Src/adc.c ****   */
  19:Core/Src/adc.c **** 
  20:Core/Src/adc.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/adc.c **** #include "adc.h"
  22:Core/Src/adc.c **** 
  23:Core/Src/adc.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/adc.c **** 
  25:Core/Src/adc.c **** /* USER CODE END 0 */
  26:Core/Src/adc.c **** 
  27:Core/Src/adc.c **** ADC_HandleTypeDef hadc;
  28:Core/Src/adc.c **** DMA_HandleTypeDef hdma_adc;
  29:Core/Src/adc.c **** 
  30:Core/Src/adc.c **** /* ADC init function */
  31:Core/Src/adc.c **** void MX_ADC_Init(void)
ARM GAS  /tmp/ccw3wHNd.s 			page 2


  32:Core/Src/adc.c **** {
  28              		.loc 1 32 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  33:Core/Src/adc.c ****   ADC_ChannelConfTypeDef sConfig = {0};
  32              		.loc 1 33 3 view .LVU1
  32:Core/Src/adc.c ****   ADC_ChannelConfTypeDef sConfig = {0};
  33              		.loc 1 32 1 is_stmt 0 view .LVU2
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39 0002 82B0     		sub	sp, sp, #8
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 16
  42              		.loc 1 33 26 view .LVU3
  43 0004 0822     		movs	r2, #8
  44 0006 0021     		movs	r1, #0
  45 0008 6846     		mov	r0, sp
  46 000a FFF7FEFF 		bl	memset
  47              	.LVL0:
  34:Core/Src/adc.c **** 
  35:Core/Src/adc.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
  36:Core/Src/adc.c ****   */
  37:Core/Src/adc.c ****   hadc.Instance = ADC1;
  48              		.loc 1 37 3 is_stmt 1 view .LVU4
  38:Core/Src/adc.c ****   hadc.Init.OversamplingMode = DISABLE;
  49              		.loc 1 38 3 view .LVU5
  39:Core/Src/adc.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  40:Core/Src/adc.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
  41:Core/Src/adc.c ****   hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
  50              		.loc 1 41 26 is_stmt 0 view .LVU6
  51 000e 0522     		movs	r2, #5
  38:Core/Src/adc.c ****   hadc.Init.OversamplingMode = DISABLE;
  52              		.loc 1 38 30 view .LVU7
  53 0010 1F4C     		ldr	r4, .L18
  42:Core/Src/adc.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_BACKWARD;
  43:Core/Src/adc.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  44:Core/Src/adc.c ****   hadc.Init.ContinuousConvMode = ENABLE;
  45:Core/Src/adc.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
  46:Core/Src/adc.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  47:Core/Src/adc.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  48:Core/Src/adc.c ****   hadc.Init.DMAContinuousRequests = ENABLE;
  54              		.loc 1 48 35 view .LVU8
  55 0012 2C21     		movs	r1, #44
  41:Core/Src/adc.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_BACKWARD;
  56              		.loc 1 41 26 view .LVU9
  57 0014 A263     		str	r2, [r4, #56]
  47:Core/Src/adc.c ****   hadc.Init.DMAContinuousRequests = ENABLE;
  58              		.loc 1 47 30 view .LVU10
  59 0016 C222     		movs	r2, #194
  60 0018 FF32     		adds	r2, r2, #255
  61 001a 6262     		str	r2, [r4, #36]
  62              		.loc 1 48 35 view .LVU11
  63 001c C13A     		subs	r2, r2, #193
ARM GAS  /tmp/ccw3wHNd.s 			page 3


  64 001e FF3A     		subs	r2, r2, #255
  65 0020 6254     		strb	r2, [r4, r1]
  37:Core/Src/adc.c ****   hadc.Init.OversamplingMode = DISABLE;
  66              		.loc 1 37 17 view .LVU12
  67 0022 1C49     		ldr	r1, .L18+4
  38:Core/Src/adc.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  68              		.loc 1 38 30 view .LVU13
  69 0024 0023     		movs	r3, #0
  37:Core/Src/adc.c ****   hadc.Init.OversamplingMode = DISABLE;
  70              		.loc 1 37 17 view .LVU14
  71 0026 2160     		str	r1, [r4]
  39:Core/Src/adc.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
  72              		.loc 1 39 28 view .LVU15
  73 0028 C021     		movs	r1, #192
  74 002a 0906     		lsls	r1, r1, #24
  75 002c 6160     		str	r1, [r4, #4]
  42:Core/Src/adc.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  76              		.loc 1 42 26 view .LVU16
  77 002e 0221     		movs	r1, #2
  49:Core/Src/adc.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  50:Core/Src/adc.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  51:Core/Src/adc.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
  52:Core/Src/adc.c ****   hadc.Init.LowPowerFrequencyMode = ENABLE;
  53:Core/Src/adc.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
  54:Core/Src/adc.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
  78              		.loc 1 54 7 view .LVU17
  79 0030 2000     		movs	r0, r4
  42:Core/Src/adc.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  80              		.loc 1 42 26 view .LVU18
  81 0032 2161     		str	r1, [r4, #16]
  44:Core/Src/adc.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
  82              		.loc 1 44 32 view .LVU19
  83 0034 2284     		strh	r2, [r4, #32]
  49:Core/Src/adc.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  84              		.loc 1 49 26 view .LVU20
  85 0036 0231     		adds	r1, r1, #2
  38:Core/Src/adc.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  86              		.loc 1 38 30 view .LVU21
  87 0038 E363     		str	r3, [r4, #60]
  39:Core/Src/adc.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
  88              		.loc 1 39 3 is_stmt 1 view .LVU22
  40:Core/Src/adc.c ****   hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
  89              		.loc 1 40 3 view .LVU23
  41:Core/Src/adc.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_BACKWARD;
  90              		.loc 1 41 3 view .LVU24
  42:Core/Src/adc.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  91              		.loc 1 42 3 view .LVU25
  43:Core/Src/adc.c ****   hadc.Init.ContinuousConvMode = ENABLE;
  92              		.loc 1 43 3 view .LVU26
  44:Core/Src/adc.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
  93              		.loc 1 44 3 view .LVU27
  45:Core/Src/adc.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  94              		.loc 1 45 3 view .LVU28
  46:Core/Src/adc.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  95              		.loc 1 46 3 view .LVU29
  46:Core/Src/adc.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  96              		.loc 1 46 34 is_stmt 0 view .LVU30
ARM GAS  /tmp/ccw3wHNd.s 			page 4


  97 003a A362     		str	r3, [r4, #40]
  47:Core/Src/adc.c ****   hadc.Init.DMAContinuousRequests = ENABLE;
  98              		.loc 1 47 3 is_stmt 1 view .LVU31
  48:Core/Src/adc.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  99              		.loc 1 48 3 view .LVU32
  49:Core/Src/adc.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 100              		.loc 1 49 3 view .LVU33
  50:Core/Src/adc.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 101              		.loc 1 50 3 view .LVU34
  50:Core/Src/adc.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 102              		.loc 1 50 21 is_stmt 0 view .LVU35
 103 003c 2363     		str	r3, [r4, #48]
  51:Core/Src/adc.c ****   hadc.Init.LowPowerFrequencyMode = ENABLE;
 104              		.loc 1 51 3 is_stmt 1 view .LVU36
  52:Core/Src/adc.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 105              		.loc 1 52 3 view .LVU37
  52:Core/Src/adc.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 106              		.loc 1 52 35 is_stmt 0 view .LVU38
 107 003e 6263     		str	r2, [r4, #52]
  53:Core/Src/adc.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 108              		.loc 1 53 3 is_stmt 1 view .LVU39
 109              		.loc 1 54 3 view .LVU40
  40:Core/Src/adc.c ****   hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 110              		.loc 1 40 24 is_stmt 0 view .LVU41
 111 0040 A360     		str	r3, [r4, #8]
  43:Core/Src/adc.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 112              		.loc 1 43 23 view .LVU42
 113 0042 E360     		str	r3, [r4, #12]
  49:Core/Src/adc.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 114              		.loc 1 49 26 view .LVU43
 115 0044 6161     		str	r1, [r4, #20]
  51:Core/Src/adc.c ****   hadc.Init.LowPowerFrequencyMode = ENABLE;
 116              		.loc 1 51 30 view .LVU44
 117 0046 A361     		str	r3, [r4, #24]
  53:Core/Src/adc.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 118              		.loc 1 53 34 view .LVU45
 119 0048 E361     		str	r3, [r4, #28]
 120              		.loc 1 54 7 view .LVU46
 121 004a FFF7FEFF 		bl	HAL_ADC_Init
 122              	.LVL1:
 123              		.loc 1 54 6 view .LVU47
 124 004e 0028     		cmp	r0, #0
 125 0050 14D1     		bne	.L15
 126              	.L2:
  55:Core/Src/adc.c ****   {
  56:Core/Src/adc.c ****     Error_Handler();
  57:Core/Src/adc.c ****   }
  58:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel to be converted.
  59:Core/Src/adc.c ****   */
  60:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_0;
 127              		.loc 1 60 3 is_stmt 1 view .LVU48
 128              		.loc 1 60 19 is_stmt 0 view .LVU49
 129 0052 0123     		movs	r3, #1
 130 0054 0093     		str	r3, [sp]
  61:Core/Src/adc.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 131              		.loc 1 61 3 is_stmt 1 view .LVU50
 132              		.loc 1 61 16 is_stmt 0 view .LVU51
ARM GAS  /tmp/ccw3wHNd.s 			page 5


 133 0056 8023     		movs	r3, #128
  62:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 134              		.loc 1 62 7 view .LVU52
 135 0058 6946     		mov	r1, sp
  61:Core/Src/adc.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 136              		.loc 1 61 16 view .LVU53
 137 005a 5B01     		lsls	r3, r3, #5
 138              		.loc 1 62 7 view .LVU54
 139 005c 2000     		movs	r0, r4
  61:Core/Src/adc.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 140              		.loc 1 61 16 view .LVU55
 141 005e 0193     		str	r3, [sp, #4]
 142              		.loc 1 62 3 is_stmt 1 view .LVU56
 143              		.loc 1 62 7 is_stmt 0 view .LVU57
 144 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 145              	.LVL2:
 146              		.loc 1 62 6 view .LVU58
 147 0064 0028     		cmp	r0, #0
 148 0066 0FD1     		bne	.L16
 149              	.L3:
  63:Core/Src/adc.c ****   {
  64:Core/Src/adc.c ****     Error_Handler();
  65:Core/Src/adc.c ****   }
  66:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel to be converted.
  67:Core/Src/adc.c ****   */
  68:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_VREFINT;
 150              		.loc 1 68 3 is_stmt 1 view .LVU59
 151              		.loc 1 68 19 is_stmt 0 view .LVU60
 152 0068 0B4B     		ldr	r3, .L18+8
  69:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 153              		.loc 1 69 7 view .LVU61
 154 006a 6946     		mov	r1, sp
 155 006c 2000     		movs	r0, r4
  68:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 156              		.loc 1 68 19 view .LVU62
 157 006e 0093     		str	r3, [sp]
 158              		.loc 1 69 3 is_stmt 1 view .LVU63
 159              		.loc 1 69 7 is_stmt 0 view .LVU64
 160 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 161              	.LVL3:
 162              		.loc 1 69 6 view .LVU65
 163 0074 0028     		cmp	r0, #0
 164 0076 04D1     		bne	.L17
 165              	.L1:
  70:Core/Src/adc.c ****   {
  71:Core/Src/adc.c ****     Error_Handler();
  72:Core/Src/adc.c ****   }
  73:Core/Src/adc.c **** 
  74:Core/Src/adc.c **** }
 166              		.loc 1 74 1 view .LVU66
 167 0078 02B0     		add	sp, sp, #8
 168              		@ sp needed
 169 007a 10BD     		pop	{r4, pc}
 170              	.L15:
  56:Core/Src/adc.c ****   }
 171              		.loc 1 56 5 is_stmt 1 view .LVU67
 172 007c FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccw3wHNd.s 			page 6


 173              	.LVL4:
 174 0080 E7E7     		b	.L2
 175              	.L17:
  71:Core/Src/adc.c ****   }
 176              		.loc 1 71 5 view .LVU68
 177 0082 FFF7FEFF 		bl	Error_Handler
 178              	.LVL5:
 179              		.loc 1 74 1 is_stmt 0 view .LVU69
 180 0086 F7E7     		b	.L1
 181              	.L16:
  64:Core/Src/adc.c ****   }
 182              		.loc 1 64 5 is_stmt 1 view .LVU70
 183 0088 FFF7FEFF 		bl	Error_Handler
 184              	.LVL6:
 185 008c ECE7     		b	.L3
 186              	.L19:
 187 008e C046     		.align	2
 188              	.L18:
 189 0090 00000000 		.word	hadc
 190 0094 00240140 		.word	1073816576
 191 0098 00000244 		.word	1140981760
 192              		.cfi_endproc
 193              	.LFE34:
 195              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 196              		.align	1
 197              		.p2align 2,,3
 198              		.global	HAL_ADC_MspInit
 199              		.syntax unified
 200              		.code	16
 201              		.thumb_func
 202              		.fpu softvfp
 204              	HAL_ADC_MspInit:
 205              	.LVL7:
 206              	.LFB35:
  75:Core/Src/adc.c **** 
  76:Core/Src/adc.c **** void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
  77:Core/Src/adc.c **** {
 207              		.loc 1 77 1 view -0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 24
 210              		@ frame_needed = 0, uses_anonymous_args = 0
  78:Core/Src/adc.c **** 
  79:Core/Src/adc.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 211              		.loc 1 79 3 view .LVU72
  77:Core/Src/adc.c **** 
 212              		.loc 1 77 1 is_stmt 0 view .LVU73
 213 0000 70B5     		push	{r4, r5, r6, lr}
 214              	.LCFI2:
 215              		.cfi_def_cfa_offset 16
 216              		.cfi_offset 4, -16
 217              		.cfi_offset 5, -12
 218              		.cfi_offset 6, -8
 219              		.cfi_offset 14, -4
 220 0002 0400     		movs	r4, r0
 221 0004 86B0     		sub	sp, sp, #24
 222              	.LCFI3:
 223              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/ccw3wHNd.s 			page 7


 224              		.loc 1 79 20 view .LVU74
 225 0006 1422     		movs	r2, #20
 226 0008 0021     		movs	r1, #0
 227 000a 01A8     		add	r0, sp, #4
 228              	.LVL8:
 229              		.loc 1 79 20 view .LVU75
 230 000c FFF7FEFF 		bl	memset
 231              	.LVL9:
  80:Core/Src/adc.c ****   if(adcHandle->Instance==ADC1)
 232              		.loc 1 80 3 is_stmt 1 view .LVU76
 233              		.loc 1 80 5 is_stmt 0 view .LVU77
 234 0010 1B4B     		ldr	r3, .L28
 235 0012 2268     		ldr	r2, [r4]
 236 0014 9A42     		cmp	r2, r3
 237 0016 01D0     		beq	.L26
 238              	.L20:
  81:Core/Src/adc.c ****   {
  82:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspInit 0 */
  83:Core/Src/adc.c **** 
  84:Core/Src/adc.c ****   /* USER CODE END ADC1_MspInit 0 */
  85:Core/Src/adc.c ****     /* ADC1 clock enable */
  86:Core/Src/adc.c ****     __HAL_RCC_ADC1_CLK_ENABLE();
  87:Core/Src/adc.c **** 
  88:Core/Src/adc.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  89:Core/Src/adc.c ****     /**ADC GPIO Configuration
  90:Core/Src/adc.c ****     PA0-CK_IN     ------> ADC_IN0
  91:Core/Src/adc.c ****     */
  92:Core/Src/adc.c ****     GPIO_InitStruct.Pin = GPIO_PIN_0;
  93:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  94:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
  95:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  96:Core/Src/adc.c **** 
  97:Core/Src/adc.c ****     /* ADC1 DMA Init */
  98:Core/Src/adc.c ****     /* ADC Init */
  99:Core/Src/adc.c ****     hdma_adc.Instance = DMA1_Channel1;
 100:Core/Src/adc.c ****     hdma_adc.Init.Request = DMA_REQUEST_0;
 101:Core/Src/adc.c ****     hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 102:Core/Src/adc.c ****     hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 103:Core/Src/adc.c ****     hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 104:Core/Src/adc.c ****     hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 105:Core/Src/adc.c ****     hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 106:Core/Src/adc.c ****     hdma_adc.Init.Mode = DMA_NORMAL;
 107:Core/Src/adc.c ****     hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 108:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 109:Core/Src/adc.c ****     {
 110:Core/Src/adc.c ****       Error_Handler();
 111:Core/Src/adc.c ****     }
 112:Core/Src/adc.c **** 
 113:Core/Src/adc.c ****     __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 114:Core/Src/adc.c **** 
 115:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspInit 1 */
 116:Core/Src/adc.c **** 
 117:Core/Src/adc.c ****   /* USER CODE END ADC1_MspInit 1 */
 118:Core/Src/adc.c ****   }
 119:Core/Src/adc.c **** }
 239              		.loc 1 119 1 view .LVU78
 240 0018 06B0     		add	sp, sp, #24
ARM GAS  /tmp/ccw3wHNd.s 			page 8


 241              		@ sp needed
 242              	.LVL10:
 243              		.loc 1 119 1 view .LVU79
 244 001a 70BD     		pop	{r4, r5, r6, pc}
 245              	.LVL11:
 246              	.L26:
  86:Core/Src/adc.c **** 
 247              		.loc 1 86 5 is_stmt 1 view .LVU80
 248 001c 8022     		movs	r2, #128
 249 001e 194B     		ldr	r3, .L28+4
 250 0020 9200     		lsls	r2, r2, #2
 251 0022 596B     		ldr	r1, [r3, #52]
  95:Core/Src/adc.c **** 
 252              		.loc 1 95 5 is_stmt 0 view .LVU81
 253 0024 A020     		movs	r0, #160
  86:Core/Src/adc.c **** 
 254              		.loc 1 86 5 view .LVU82
 255 0026 0A43     		orrs	r2, r1
 256 0028 5A63     		str	r2, [r3, #52]
  88:Core/Src/adc.c ****     /**ADC GPIO Configuration
 257              		.loc 1 88 5 is_stmt 1 view .LVU83
 258              	.LBB2:
  88:Core/Src/adc.c ****     /**ADC GPIO Configuration
 259              		.loc 1 88 5 view .LVU84
  88:Core/Src/adc.c ****     /**ADC GPIO Configuration
 260              		.loc 1 88 5 view .LVU85
 261 002a 0122     		movs	r2, #1
 262 002c D96A     		ldr	r1, [r3, #44]
 263              	.LBE2:
  94:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 264              		.loc 1 94 26 is_stmt 0 view .LVU86
 265 002e 0026     		movs	r6, #0
 266              	.LBB3:
  88:Core/Src/adc.c ****     /**ADC GPIO Configuration
 267              		.loc 1 88 5 view .LVU87
 268 0030 1143     		orrs	r1, r2
 269 0032 D962     		str	r1, [r3, #44]
  88:Core/Src/adc.c ****     /**ADC GPIO Configuration
 270              		.loc 1 88 5 is_stmt 1 view .LVU88
 271 0034 DB6A     		ldr	r3, [r3, #44]
 272              	.LBE3:
  95:Core/Src/adc.c **** 
 273              		.loc 1 95 5 is_stmt 0 view .LVU89
 274 0036 C005     		lsls	r0, r0, #23
 275              	.LBB4:
  88:Core/Src/adc.c ****     /**ADC GPIO Configuration
 276              		.loc 1 88 5 view .LVU90
 277 0038 1340     		ands	r3, r2
 278 003a 0093     		str	r3, [sp]
  88:Core/Src/adc.c ****     /**ADC GPIO Configuration
 279              		.loc 1 88 5 is_stmt 1 view .LVU91
 280 003c 009B     		ldr	r3, [sp]
 281              	.LBE4:
  88:Core/Src/adc.c ****     /**ADC GPIO Configuration
 282              		.loc 1 88 5 view .LVU92
  92:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 283              		.loc 1 92 5 view .LVU93
ARM GAS  /tmp/ccw3wHNd.s 			page 9


  93:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 284              		.loc 1 93 26 is_stmt 0 view .LVU94
 285 003e 0323     		movs	r3, #3
  95:Core/Src/adc.c **** 
 286              		.loc 1 95 5 view .LVU95
 287 0040 01A9     		add	r1, sp, #4
  93:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 288              		.loc 1 93 26 view .LVU96
 289 0042 0293     		str	r3, [sp, #8]
  92:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 290              		.loc 1 92 25 view .LVU97
 291 0044 0192     		str	r2, [sp, #4]
  93:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 292              		.loc 1 93 5 is_stmt 1 view .LVU98
  94:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 293              		.loc 1 94 5 view .LVU99
  94:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 294              		.loc 1 94 26 is_stmt 0 view .LVU100
 295 0046 0396     		str	r6, [sp, #12]
  95:Core/Src/adc.c **** 
 296              		.loc 1 95 5 is_stmt 1 view .LVU101
 297 0048 FFF7FEFF 		bl	HAL_GPIO_Init
 298              	.LVL12:
  99:Core/Src/adc.c ****     hdma_adc.Init.Request = DMA_REQUEST_0;
 299              		.loc 1 99 5 view .LVU102
  99:Core/Src/adc.c ****     hdma_adc.Init.Request = DMA_REQUEST_0;
 300              		.loc 1 99 23 is_stmt 0 view .LVU103
 301 004c 0E4D     		ldr	r5, .L28+8
 302 004e 0F4B     		ldr	r3, .L28+12
 108:Core/Src/adc.c ****     {
 303              		.loc 1 108 9 view .LVU104
 304 0050 2800     		movs	r0, r5
  99:Core/Src/adc.c ****     hdma_adc.Init.Request = DMA_REQUEST_0;
 305              		.loc 1 99 23 view .LVU105
 306 0052 2B60     		str	r3, [r5]
 100:Core/Src/adc.c ****     hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 307              		.loc 1 100 5 is_stmt 1 view .LVU106
 103:Core/Src/adc.c ****     hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 308              		.loc 1 103 26 is_stmt 0 view .LVU107
 309 0054 8023     		movs	r3, #128
 310 0056 2B61     		str	r3, [r5, #16]
 104:Core/Src/adc.c ****     hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 311              		.loc 1 104 39 view .LVU108
 312 0058 8033     		adds	r3, r3, #128
 313 005a 6B61     		str	r3, [r5, #20]
 105:Core/Src/adc.c ****     hdma_adc.Init.Mode = DMA_NORMAL;
 314              		.loc 1 105 36 view .LVU109
 315 005c 8023     		movs	r3, #128
 316 005e DB00     		lsls	r3, r3, #3
 100:Core/Src/adc.c ****     hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 317              		.loc 1 100 27 view .LVU110
 318 0060 6E60     		str	r6, [r5, #4]
 101:Core/Src/adc.c ****     hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 319              		.loc 1 101 5 is_stmt 1 view .LVU111
 101:Core/Src/adc.c ****     hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 320              		.loc 1 101 29 is_stmt 0 view .LVU112
 321 0062 AE60     		str	r6, [r5, #8]
ARM GAS  /tmp/ccw3wHNd.s 			page 10


 102:Core/Src/adc.c ****     hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 322              		.loc 1 102 5 is_stmt 1 view .LVU113
 102:Core/Src/adc.c ****     hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 323              		.loc 1 102 29 is_stmt 0 view .LVU114
 324 0064 EE60     		str	r6, [r5, #12]
 103:Core/Src/adc.c ****     hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 325              		.loc 1 103 5 is_stmt 1 view .LVU115
 104:Core/Src/adc.c ****     hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 326              		.loc 1 104 5 view .LVU116
 105:Core/Src/adc.c ****     hdma_adc.Init.Mode = DMA_NORMAL;
 327              		.loc 1 105 5 view .LVU117
 105:Core/Src/adc.c ****     hdma_adc.Init.Mode = DMA_NORMAL;
 328              		.loc 1 105 36 is_stmt 0 view .LVU118
 329 0066 AB61     		str	r3, [r5, #24]
 106:Core/Src/adc.c ****     hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 330              		.loc 1 106 5 is_stmt 1 view .LVU119
 106:Core/Src/adc.c ****     hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 331              		.loc 1 106 24 is_stmt 0 view .LVU120
 332 0068 EE61     		str	r6, [r5, #28]
 107:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 333              		.loc 1 107 5 is_stmt 1 view .LVU121
 107:Core/Src/adc.c ****     if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 334              		.loc 1 107 28 is_stmt 0 view .LVU122
 335 006a 2E62     		str	r6, [r5, #32]
 108:Core/Src/adc.c ****     {
 336              		.loc 1 108 5 is_stmt 1 view .LVU123
 108:Core/Src/adc.c ****     {
 337              		.loc 1 108 9 is_stmt 0 view .LVU124
 338 006c FFF7FEFF 		bl	HAL_DMA_Init
 339              	.LVL13:
 108:Core/Src/adc.c ****     {
 340              		.loc 1 108 8 view .LVU125
 341 0070 0028     		cmp	r0, #0
 342 0072 02D1     		bne	.L27
 343              	.L22:
 113:Core/Src/adc.c **** 
 344              		.loc 1 113 5 is_stmt 1 view .LVU126
 113:Core/Src/adc.c **** 
 345              		.loc 1 113 5 view .LVU127
 346 0074 E564     		str	r5, [r4, #76]
 113:Core/Src/adc.c **** 
 347              		.loc 1 113 5 view .LVU128
 348 0076 AC62     		str	r4, [r5, #40]
 113:Core/Src/adc.c **** 
 349              		.loc 1 113 5 view .LVU129
 350              		.loc 1 119 1 is_stmt 0 view .LVU130
 351 0078 CEE7     		b	.L20
 352              	.L27:
 110:Core/Src/adc.c ****     }
 353              		.loc 1 110 7 is_stmt 1 view .LVU131
 354 007a FFF7FEFF 		bl	Error_Handler
 355              	.LVL14:
 356 007e F9E7     		b	.L22
 357              	.L29:
 358              		.align	2
 359              	.L28:
 360 0080 00240140 		.word	1073816576
ARM GAS  /tmp/ccw3wHNd.s 			page 11


 361 0084 00100240 		.word	1073876992
 362 0088 00000000 		.word	hdma_adc
 363 008c 08000240 		.word	1073872904
 364              		.cfi_endproc
 365              	.LFE35:
 367              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 368              		.align	1
 369              		.p2align 2,,3
 370              		.global	HAL_ADC_MspDeInit
 371              		.syntax unified
 372              		.code	16
 373              		.thumb_func
 374              		.fpu softvfp
 376              	HAL_ADC_MspDeInit:
 377              	.LVL15:
 378              	.LFB36:
 120:Core/Src/adc.c **** 
 121:Core/Src/adc.c **** void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
 122:Core/Src/adc.c **** {
 379              		.loc 1 122 1 view -0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 123:Core/Src/adc.c **** 
 124:Core/Src/adc.c ****   if(adcHandle->Instance==ADC1)
 383              		.loc 1 124 3 view .LVU133
 384              		.loc 1 124 5 is_stmt 0 view .LVU134
 385 0000 0A4B     		ldr	r3, .L33
 386 0002 0268     		ldr	r2, [r0]
 122:Core/Src/adc.c **** 
 387              		.loc 1 122 1 view .LVU135
 388 0004 10B5     		push	{r4, lr}
 389              	.LCFI4:
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 4, -8
 392              		.cfi_offset 14, -4
 122:Core/Src/adc.c **** 
 393              		.loc 1 122 1 view .LVU136
 394 0006 0400     		movs	r4, r0
 395              		.loc 1 124 5 view .LVU137
 396 0008 9A42     		cmp	r2, r3
 397 000a 00D0     		beq	.L32
 398              	.LVL16:
 399              	.L30:
 125:Core/Src/adc.c ****   {
 126:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 0 */
 127:Core/Src/adc.c **** 
 128:Core/Src/adc.c ****   /* USER CODE END ADC1_MspDeInit 0 */
 129:Core/Src/adc.c ****     /* Peripheral clock disable */
 130:Core/Src/adc.c ****     __HAL_RCC_ADC1_CLK_DISABLE();
 131:Core/Src/adc.c **** 
 132:Core/Src/adc.c ****     /**ADC GPIO Configuration
 133:Core/Src/adc.c ****     PA0-CK_IN     ------> ADC_IN0
 134:Core/Src/adc.c ****     */
 135:Core/Src/adc.c ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 136:Core/Src/adc.c **** 
 137:Core/Src/adc.c ****     /* ADC1 DMA DeInit */
ARM GAS  /tmp/ccw3wHNd.s 			page 12


 138:Core/Src/adc.c ****     HAL_DMA_DeInit(adcHandle->DMA_Handle);
 139:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 1 */
 140:Core/Src/adc.c **** 
 141:Core/Src/adc.c ****   /* USER CODE END ADC1_MspDeInit 1 */
 142:Core/Src/adc.c ****   }
 143:Core/Src/adc.c **** }
 400              		.loc 1 143 1 view .LVU138
 401              		@ sp needed
 402              	.LVL17:
 403              		.loc 1 143 1 view .LVU139
 404 000c 10BD     		pop	{r4, pc}
 405              	.LVL18:
 406              	.L32:
 130:Core/Src/adc.c **** 
 407              		.loc 1 130 5 is_stmt 1 view .LVU140
 135:Core/Src/adc.c **** 
 408              		.loc 1 135 5 is_stmt 0 view .LVU141
 409 000e A020     		movs	r0, #160
 410              	.LVL19:
 130:Core/Src/adc.c **** 
 411              		.loc 1 130 5 view .LVU142
 412 0010 074A     		ldr	r2, .L33+4
 413 0012 0849     		ldr	r1, .L33+8
 414 0014 536B     		ldr	r3, [r2, #52]
 135:Core/Src/adc.c **** 
 415              		.loc 1 135 5 view .LVU143
 416 0016 C005     		lsls	r0, r0, #23
 130:Core/Src/adc.c **** 
 417              		.loc 1 130 5 view .LVU144
 418 0018 0B40     		ands	r3, r1
 419 001a 5363     		str	r3, [r2, #52]
 135:Core/Src/adc.c **** 
 420              		.loc 1 135 5 is_stmt 1 view .LVU145
 421 001c 0121     		movs	r1, #1
 422 001e FFF7FEFF 		bl	HAL_GPIO_DeInit
 423              	.LVL20:
 138:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 1 */
 424              		.loc 1 138 5 view .LVU146
 425 0022 E06C     		ldr	r0, [r4, #76]
 426 0024 FFF7FEFF 		bl	HAL_DMA_DeInit
 427              	.LVL21:
 428              		.loc 1 143 1 is_stmt 0 view .LVU147
 429 0028 F0E7     		b	.L30
 430              	.L34:
 431 002a C046     		.align	2
 432              	.L33:
 433 002c 00240140 		.word	1073816576
 434 0030 00100240 		.word	1073876992
 435 0034 FFFDFFFF 		.word	-513
 436              		.cfi_endproc
 437              	.LFE36:
 439              		.comm	hdma_adc,72,4
 440              		.comm	hadc,92,4
 441              		.text
 442              	.Letext0:
 443              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 444              		.file 3 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
ARM GAS  /tmp/ccw3wHNd.s 			page 13


 445              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l031xx.h"
 446              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h"
 447              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 448              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 449              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 450              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc.h"
 451              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 452              		.file 11 "Core/Inc/adc.h"
 453              		.file 12 "Core/Inc/main.h"
 454              		.file 13 "<built-in>"
ARM GAS  /tmp/ccw3wHNd.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 adc.c
     /tmp/ccw3wHNd.s:16     .text.MX_ADC_Init:0000000000000000 $t
     /tmp/ccw3wHNd.s:25     .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/ccw3wHNd.s:189    .text.MX_ADC_Init:0000000000000090 $d
                            *COM*:000000000000005c hadc
     /tmp/ccw3wHNd.s:196    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccw3wHNd.s:204    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccw3wHNd.s:360    .text.HAL_ADC_MspInit:0000000000000080 $d
                            *COM*:0000000000000048 hdma_adc
     /tmp/ccw3wHNd.s:368    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccw3wHNd.s:376    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccw3wHNd.s:433    .text.HAL_ADC_MspDeInit:000000000000002c $d

UNDEFINED SYMBOLS
memset
HAL_ADC_Init
HAL_ADC_ConfigChannel
Error_Handler
HAL_GPIO_Init
HAL_DMA_Init
HAL_GPIO_DeInit
HAL_DMA_DeInit
