ARM GAS  /tmp/cchhGUYN.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"rtc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_RTC_Init,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	MX_RTC_Init
  19              		.arch armv6s-m
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  23              		.fpu softvfp
  25              	MX_RTC_Init:
  26              	.LFB1053:
  27              		.file 1 "Core/Src/rtc.c"
   1:Core/Src/rtc.c **** /**
   2:Core/Src/rtc.c ****   ******************************************************************************
   3:Core/Src/rtc.c ****   * @file    rtc.c
   4:Core/Src/rtc.c ****   * @brief   This file provides code for the configuration
   5:Core/Src/rtc.c ****   *          of the RTC instances.
   6:Core/Src/rtc.c ****   ******************************************************************************
   7:Core/Src/rtc.c ****   * @attention
   8:Core/Src/rtc.c ****   *
   9:Core/Src/rtc.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/rtc.c ****   * All rights reserved.</center></h2>
  11:Core/Src/rtc.c ****   *
  12:Core/Src/rtc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/rtc.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/rtc.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/rtc.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/rtc.c ****   *
  17:Core/Src/rtc.c ****   ******************************************************************************
  18:Core/Src/rtc.c ****   */
  19:Core/Src/rtc.c **** 
  20:Core/Src/rtc.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/rtc.c **** #include "rtc.h"
  22:Core/Src/rtc.c **** 
  23:Core/Src/rtc.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/rtc.c **** 
  25:Core/Src/rtc.c **** /* USER CODE END 0 */
  26:Core/Src/rtc.c **** 
  27:Core/Src/rtc.c **** /* RTC init function */
  28:Core/Src/rtc.c **** void MX_RTC_Init(void)
  29:Core/Src/rtc.c **** {
  28              		.loc 1 29 1 view -0
  29              		.cfi_startproc
ARM GAS  /tmp/cchhGUYN.s 			page 2


  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  30:Core/Src/rtc.c ****   LL_RTC_InitTypeDef RTC_InitStruct = {0};
  32              		.loc 1 30 3 view .LVU1
  31:Core/Src/rtc.c **** 
  32:Core/Src/rtc.c ****   /* Peripheral clock enable */
  33:Core/Src/rtc.c ****   LL_RCC_EnableRTC();
  33              		.loc 1 33 3 view .LVU2
  34              	.LBB10:
  35              	.LBI10:
  36              		.file 2 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h"
   1:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @file    stm32l0xx_ll_rcc.h
   4:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief   Header file of RCC LL module.
   6:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   ******************************************************************************
   7:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @attention
   8:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *
   9:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * <h2><center>&copy; Copyright(c) 2016 STMicroelectronics.
  10:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *
  12:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *
  17:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   ******************************************************************************
  18:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  19:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  20:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #ifndef __STM32L0xx_LL_RCC_H
  22:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define __STM32L0xx_LL_RCC_H
  23:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  24:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #ifdef __cplusplus
  25:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** extern "C" {
  26:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif
  27:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  28:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #include "stm32l0xx.h"
  30:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  31:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @addtogroup STM32L0xx_LL_Driver
  32:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
  33:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  34:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  35:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC)
  36:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  37:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL RCC
  38:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
  39:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  40:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  41:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_Private_Variables RCC Private Variables
  44:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
  45:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  46:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 3


  47:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
  48:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
  49:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  50:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  51:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /* Private constants ---------------------------------------------------------*/
  52:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_Private_Constants RCC Private Constants
  53:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
  54:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  55:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  56:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
  57:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
  58:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  59:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  60:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /* Private macros ------------------------------------------------------------*/
  61:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(USE_FULL_LL_DRIVER)
  62:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_Private_Macros RCC Private Macros
  63:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
  64:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  65:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
  66:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
  67:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  68:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /*USE_FULL_LL_DRIVER*/
  69:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /* Exported types ------------------------------------------------------------*/
  70:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(USE_FULL_LL_DRIVER)
  71:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_Exported_Types RCC Exported Types
  72:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
  73:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  74:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  75:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup LL_ES_CLOCK_FREQ Clocks Frequency Structure
  76:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
  77:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  78:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  79:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
  80:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  RCC Clocks Frequency Structure
  81:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  82:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** typedef struct
  83:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
  84:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   uint32_t SYSCLK_Frequency;        /*!< SYSCLK clock frequency */
  85:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   uint32_t HCLK_Frequency;          /*!< HCLK clock frequency */
  86:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   uint32_t PCLK1_Frequency;         /*!< PCLK1 clock frequency */
  87:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   uint32_t PCLK2_Frequency;         /*!< PCLK2 clock frequency */
  88:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** } LL_RCC_ClocksTypeDef;
  89:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  90:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
  91:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
  92:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  93:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  94:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
  95:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
  96:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
  97:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* USE_FULL_LL_DRIVER */
  98:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
  99:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /* Exported constants --------------------------------------------------------*/
 100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_Exported_Constants RCC Exported Constants
 101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 4


 104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_OSC_VALUES Oscillator Values adaptation
 105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief    Defines used to adapt values of different oscillators
 106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note     These values could be modified in the user environment according to
 107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *           HW set-up.
 108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if !defined  (HSE_VALUE)
 111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define HSE_VALUE    (8000000U)  /*!< Value of the HSE oscillator in Hz */
 112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* HSE_VALUE */
 113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if !defined  (HSI_VALUE)
 115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define HSI_VALUE    (16000000U) /*!< Value of the HSI oscillator in Hz */
 116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* HSI_VALUE */
 117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if !defined  (LSE_VALUE)
 119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LSE_VALUE    (32768U)    /*!< Value of the LSE oscillator in Hz */
 120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* LSE_VALUE */
 121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if !defined  (LSI_VALUE)
 123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LSI_VALUE    (37000U)    /*!< Value of the LSI oscillator in Hz */
 124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* LSI_VALUE */
 125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if !defined  (HSI48_VALUE)
 128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define HSI48_VALUE  (48000000U) /*!< Value of the HSI48 oscillator in Hz */
 129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* HSI48_VALUE */
 130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_HSI48_SUPPORT */
 131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_CLEAR_FLAG Clear Flags Defines
 136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief    Flags defines which can be used with LL_RCC_WriteReg function
 137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CICR_LSIRDYC                RCC_CICR_LSIRDYC     /*!< LSI Ready Interrupt Clear */
 140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CICR_LSERDYC                RCC_CICR_LSERDYC     /*!< LSE Ready Interrupt Clear */
 141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CICR_HSIRDYC                RCC_CICR_HSIRDYC     /*!< HSI Ready Interrupt Clear */
 142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CICR_HSERDYC                RCC_CICR_HSERDYC     /*!< HSE Ready Interrupt Clear */
 143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CICR_PLLRDYC                RCC_CICR_PLLRDYC     /*!< PLL Ready Interrupt Clear */
 144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CICR_MSIRDYC                RCC_CICR_MSIRDYC     /*!< MSI Ready Interrupt Clear */
 145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CICR_HSI48RDYC               RCC_CICR_HSI48RDYC  /*!< HSI48 Ready Interrupt Clear */
 147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_HSI48_SUPPORT */
 148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CICR_LSECSSC                RCC_CICR_LSECSSC     /*!< LSE Clock Security System Inte
 149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CICR_CSSC                   RCC_CICR_CSSC        /*!< Clock Security System Interrup
 150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_GET_FLAG Get Flags Defines
 155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief    Flags defines which can be used with LL_RCC_ReadReg function
 156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIFR_LSIRDYF                RCC_CIFR_LSIRDYF     /*!< LSI Ready Interrupt flag */
 159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIFR_LSERDYF                RCC_CIFR_LSERDYF     /*!< LSE Ready Interrupt flag */
 160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIFR_HSIRDYF                RCC_CIFR_HSIRDYF     /*!< HSI Ready Interrupt flag */
ARM GAS  /tmp/cchhGUYN.s 			page 5


 161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIFR_HSERDYF                RCC_CIFR_HSERDYF     /*!< HSE Ready Interrupt flag */
 162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIFR_PLLRDYF                RCC_CIFR_PLLRDYF     /*!< PLL Ready Interrupt flag */
 163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIFR_MSIRDYF                RCC_CIFR_MSIRDYF     /*!< MSI Ready Interrupt flag */
 164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIFR_HSI48RDYF               RCC_CIFR_HSI48RDYF  /*!< HSI48 Ready Interrupt flag */
 166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_HSI48_SUPPORT */
 167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIFR_LSECSSF                RCC_CIFR_LSECSSF    /*!< LSE Clock Security System Inter
 168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIFR_CSSF                   RCC_CIFR_CSSF       /*!< Clock Security System Interrupt
 169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CSR_FWRSTF                 RCC_CSR_FWRSTF          /*!< Firewall reset flag */
 170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CSR_OBLRSTF                RCC_CSR_OBLRSTF         /*!< OBL reset flag */
 171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CSR_PINRSTF                RCC_CSR_PINRSTF         /*!< PIN reset flag */
 172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CSR_PORRSTF                RCC_CSR_PORRSTF         /*!< POR/PDR reset flag */
 173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CSR_SFTRSTF                RCC_CSR_SFTRSTF         /*!< Software Reset flag */
 174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CSR_IWDGRSTF               RCC_CSR_IWDGRSTF        /*!< Independent Watchdog reset f
 175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CSR_WWDGRSTF               RCC_CSR_WWDGRSTF        /*!< Window watchdog reset flag *
 176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CSR_LPWRRSTF               RCC_CSR_LPWRRSTF        /*!< Low-Power reset flag */
 177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_IT IT Defines
 182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief    IT defines which can be used with LL_RCC_ReadReg and  LL_RCC_WriteReg functions
 183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIER_LSIRDYIE               RCC_CIER_LSIRDYIE      /*!< LSI Ready Interrupt Enable *
 186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIER_LSERDYIE               RCC_CIER_LSERDYIE      /*!< LSE Ready Interrupt Enable *
 187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIER_HSIRDYIE               RCC_CIER_HSIRDYIE      /*!< HSI Ready Interrupt Enable *
 188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIER_HSERDYIE               RCC_CIER_HSERDYIE      /*!< HSE Ready Interrupt Enable *
 189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIER_PLLRDYIE               RCC_CIER_PLLRDYIE      /*!< PLL Ready Interrupt Enable *
 190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIER_MSIRDYIE               RCC_CIER_MSIRDYIE      /*!< MSI Ready Interrupt Enable *
 191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIER_HSI48RDYIE              RCC_CIER_HSI48RDYIE   /*!< HSI48 Ready Interrupt Enable
 193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_HSI48_SUPPORT */
 194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_CIER_LSECSSIE               RCC_CIER_LSECSSIE      /*!< LSE CSS Interrupt Enable */
 195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LSEDRIVE  LSE oscillator drive capability
 200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LSEDRIVE_LOW                (0x00000000U) /*!< Xtal mode lower driving capability */
 203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LSEDRIVE_MEDIUMLOW          RCC_CSR_LSEDRV_0 /*!< Xtal mode medium low driving capab
 204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LSEDRIVE_MEDIUMHIGH         RCC_CSR_LSEDRV_1 /*!< Xtal mode medium high driving capa
 205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LSEDRIVE_HIGH               RCC_CSR_LSEDRV   /*!< Xtal mode higher driving capabilit
 206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_RTC_HSE_DIV RTC HSE Prescaler
 211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RTC_HSE_DIV_2               0x00000000U          /*!< HSE is divided by 2 for RTC cl
 214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RTC_HSE_DIV_4               RCC_CR_RTCPRE_0      /*!< HSE is divided by 4 for RTC cl
 215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RTC_HSE_DIV_8               RCC_CR_RTCPRE_1      /*!< HSE is divided by 8 for RTC cl
 216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RTC_HSE_DIV_16              RCC_CR_RTCPRE        /*!< HSE is divided by 16 for RTC c
 217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
ARM GAS  /tmp/cchhGUYN.s 			page 6


 218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_MSIRANGE  MSI clock ranges
 222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MSIRANGE_0                  RCC_ICSCR_MSIRANGE_0  /*!< MSI = 65.536 KHz */
 225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MSIRANGE_1                  RCC_ICSCR_MSIRANGE_1  /*!< MSI = 131.072 KHz*/
 226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MSIRANGE_2                  RCC_ICSCR_MSIRANGE_2  /*!< MSI = 262.144 KHz */
 227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MSIRANGE_3                  RCC_ICSCR_MSIRANGE_3  /*!< MSI = 524.288 KHz */
 228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MSIRANGE_4                  RCC_ICSCR_MSIRANGE_4  /*!< MSI = 1.048 MHz */
 229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MSIRANGE_5                  RCC_ICSCR_MSIRANGE_5  /*!< MSI = 2.097 MHz */
 230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MSIRANGE_6                  RCC_ICSCR_MSIRANGE_6  /*!< MSI = 4.194 MHz */
 231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SYS_CLKSOURCE  System clock switch
 236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_MSI           RCC_CFGR_SW_MSI    /*!< MSI selection as system clock */
 239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_HSI           RCC_CFGR_SW_HSI    /*!< HSI selection as system clock */
 240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_HSE           RCC_CFGR_SW_HSE    /*!< HSE selection as system clock */
 241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_PLL           RCC_CFGR_SW_PLL    /*!< PLL selection as system clock */
 242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SYS_CLKSOURCE_STATUS  System clock switch status
 247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_STATUS_MSI    RCC_CFGR_SWS_MSI   /*!< MSI used as system clock */
 250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_STATUS_HSI    RCC_CFGR_SWS_HSI   /*!< HSI used as system clock */
 251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_STATUS_HSE    RCC_CFGR_SWS_HSE   /*!< HSE used as system clock */
 252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYS_CLKSOURCE_STATUS_PLL    RCC_CFGR_SWS_PLL   /*!< PLL used as system clock */
 253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_SYSCLK_DIV  AHB prescaler
 258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_1                RCC_CFGR_HPRE_DIV1   /*!< SYSCLK not divided */
 261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_2                RCC_CFGR_HPRE_DIV2   /*!< SYSCLK divided by 2 */
 262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_4                RCC_CFGR_HPRE_DIV4   /*!< SYSCLK divided by 4 */
 263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_8                RCC_CFGR_HPRE_DIV8   /*!< SYSCLK divided by 8 */
 264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_16               RCC_CFGR_HPRE_DIV16  /*!< SYSCLK divided by 16 */
 265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_64               RCC_CFGR_HPRE_DIV64  /*!< SYSCLK divided by 64 */
 266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_128              RCC_CFGR_HPRE_DIV128 /*!< SYSCLK divided by 128 */
 267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_256              RCC_CFGR_HPRE_DIV256 /*!< SYSCLK divided by 256 */
 268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_SYSCLK_DIV_512              RCC_CFGR_HPRE_DIV512 /*!< SYSCLK divided by 512 */
 269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_APB1_DIV  APB low-speed prescaler (APB1)
 274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
ARM GAS  /tmp/cchhGUYN.s 			page 7


 275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_APB1_DIV_1                  RCC_CFGR_PPRE1_DIV1  /*!< HCLK not divided */
 277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_APB1_DIV_2                  RCC_CFGR_PPRE1_DIV2  /*!< HCLK divided by 2 */
 278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_APB1_DIV_4                  RCC_CFGR_PPRE1_DIV4  /*!< HCLK divided by 4 */
 279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_APB1_DIV_8                  RCC_CFGR_PPRE1_DIV8  /*!< HCLK divided by 8 */
 280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_APB1_DIV_16                 RCC_CFGR_PPRE1_DIV16 /*!< HCLK divided by 16 */
 281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_APB2_DIV  APB high-speed prescaler (APB2)
 286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_APB2_DIV_1                  RCC_CFGR_PPRE2_DIV1  /*!< HCLK not divided */
 289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_APB2_DIV_2                  RCC_CFGR_PPRE2_DIV2  /*!< HCLK divided by 2 */
 290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_APB2_DIV_4                  RCC_CFGR_PPRE2_DIV4  /*!< HCLK divided by 4 */
 291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_APB2_DIV_8                  RCC_CFGR_PPRE2_DIV8  /*!< HCLK divided by 8 */
 292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_APB2_DIV_16                 RCC_CFGR_PPRE2_DIV16 /*!< HCLK divided by 16 */
 293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_STOP_WAKEUPCLOCK  Wakeup from Stop and CSS backup clock selection
 298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_STOP_WAKEUPCLOCK_MSI        (0x00000000U) /*!< MSI selection after wake-up from STOP
 301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_STOP_WAKEUPCLOCK_HSI        RCC_CFGR_STOPWUCK       /*!< HSI selection after wake-up
 302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_MCO1SOURCE  MCO1 SOURCE selection
 307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_NOCLOCK          RCC_CFGR_MCOSEL_NOCLOCK      /*!< MCO output disabled, n
 310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_SYSCLK           RCC_CFGR_MCOSEL_SYSCLK       /*!< SYSCLK selection as MC
 311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_HSI              RCC_CFGR_MCOSEL_HSI          /*!< HSI selection as MCO s
 312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_MSI              RCC_CFGR_MCOSEL_MSI          /*!< MSI selection as MCO s
 313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_HSE              RCC_CFGR_MCOSEL_HSE          /*!< HSE selection as MCO s
 314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_LSI              RCC_CFGR_MCOSEL_LSI          /*!< LSI selection as MCO s
 315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_LSE              RCC_CFGR_MCOSEL_LSE          /*!< LSE selection as MCO s
 316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CFGR_MCOSEL_HSI48)
 317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_HSI48            RCC_CFGR_MCOSEL_HSI48        /*!< HSI48 selection as MCO
 318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_CFGR_MCOSEL_HSI48 */
 319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1SOURCE_PLLCLK           RCC_CFGR_MCOSEL_PLL          /*!< PLLCLK selection as MC
 320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_MCO1_DIV  MCO1 prescaler
 325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1_DIV_1                  RCC_CFGR_MCOPRE_DIV1  /*!< MCO Clock divided by 1  */
 328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1_DIV_2                  RCC_CFGR_MCOPRE_DIV2  /*!< MCO Clock divided by 2  */
 329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1_DIV_4                  RCC_CFGR_MCOPRE_DIV4  /*!< MCO Clock divided by 4  */
 330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1_DIV_8                  RCC_CFGR_MCOPRE_DIV8  /*!< MCO Clock divided by 8  */
 331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_MCO1_DIV_16                 RCC_CFGR_MCOPRE_DIV16 /*!< MCO Clock divided by 16 */
ARM GAS  /tmp/cchhGUYN.s 			page 8


 332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(USE_FULL_LL_DRIVER)
 336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PERIPH_FREQUENCY Peripheral clock frequency
 337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PERIPH_FREQUENCY_NO         0x00000000U      /*!< No clock enabled for the periphera
 340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PERIPH_FREQUENCY_NA         0xFFFFFFFFU      /*!< Frequency cannot be provided as ex
 341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* USE_FULL_LL_DRIVER */
 345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_USART1_CLKSOURCE  Peripheral USART clock source selection
 347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CCIPR_USART1SEL)
 350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USART1_CLKSOURCE_PCLK2      (uint32_t)((RCC_CCIPR_USART1SEL << 16U) | 0x00000000U)  
 351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USART1_CLKSOURCE_SYSCLK     (uint32_t)((RCC_CCIPR_USART1SEL << 16U) | RCC_CCIPR_USAR
 352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USART1_CLKSOURCE_HSI        (uint32_t)((RCC_CCIPR_USART1SEL << 16U) | RCC_CCIPR_USAR
 353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USART1_CLKSOURCE_LSE        (uint32_t)((RCC_CCIPR_USART1SEL << 16U) | RCC_CCIPR_USAR
 354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_CCIPR_USART1SEL */
 355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USART2_CLKSOURCE_PCLK1      (uint32_t)((RCC_CCIPR_USART2SEL << 16U) | 0x00000000U)  
 356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USART2_CLKSOURCE_SYSCLK     (uint32_t)((RCC_CCIPR_USART2SEL << 16U) | RCC_CCIPR_USAR
 357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USART2_CLKSOURCE_HSI        (uint32_t)((RCC_CCIPR_USART2SEL << 16U) | RCC_CCIPR_USAR
 358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USART2_CLKSOURCE_LSE        (uint32_t)((RCC_CCIPR_USART2SEL << 16U) | RCC_CCIPR_USAR
 359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LPUART1_CLKSOURCE  Peripheral LPUART clock source selection
 366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LPUART1_CLKSOURCE_PCLK1     0x00000000U   /*!< PCLK1 selected as LPUART1 clock */
 369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LPUART1_CLKSOURCE_SYSCLK    RCC_CCIPR_LPUART1SEL_0  /*!< SYSCLK selected as LPUART1 
 370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LPUART1_CLKSOURCE_HSI       RCC_CCIPR_LPUART1SEL_1  /*!< HSI selected as LPUART1 clo
 371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LPUART1_CLKSOURCE_LSE       RCC_CCIPR_LPUART1SEL    /*!< LSE selected as LPUART1 clo
 372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_I2C1_CLKSOURCE  Peripheral I2C clock source selection
 377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_I2C1_CLKSOURCE_PCLK1        (uint32_t)((RCC_CCIPR_I2C1SEL << 4U) | (0x00000000U >> 4
 380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_I2C1_CLKSOURCE_SYSCLK       (uint32_t)((RCC_CCIPR_I2C1SEL << 4U) | (RCC_CCIPR_I2C1SE
 381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_I2C1_CLKSOURCE_HSI          (uint32_t)((RCC_CCIPR_I2C1SEL << 4U) | (RCC_CCIPR_I2C1SE
 382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CCIPR_I2C3SEL)
 383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_I2C3_CLKSOURCE_PCLK1        (uint32_t)((RCC_CCIPR_I2C3SEL << 4U) | (0x00000000U >> 4
 384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_I2C3_CLKSOURCE_SYSCLK       (uint32_t)((RCC_CCIPR_I2C3SEL << 4U) | (RCC_CCIPR_I2C3SE
 385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_I2C3_CLKSOURCE_HSI          (uint32_t)((RCC_CCIPR_I2C3SEL << 4U) | (RCC_CCIPR_I2C3SE
 386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /*RCC_CCIPR_I2C3SEL*/
 387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
ARM GAS  /tmp/cchhGUYN.s 			page 9


 389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LPTIM1_CLKSOURCE  Peripheral LPTIM clock source selection
 392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LPTIM1_CLKSOURCE_PCLK1      (0x00000000U)          /*!< PCLK1 selected as LPTIM1 clo
 395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LPTIM1_CLKSOURCE_LSI        RCC_CCIPR_LPTIM1SEL_0  /*!< LSI selected as LPTIM1 clock
 396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LPTIM1_CLKSOURCE_HSI        RCC_CCIPR_LPTIM1SEL_1  /*!< HSI selected as LPTIM1 clock
 397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LPTIM1_CLKSOURCE_LSE        RCC_CCIPR_LPTIM1SEL    /*!< LSE selected as LPTIM1 clock
 398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CCIPR_HSI48SEL)
 403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RNG)
 405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_RNG_CLKSOURCE  Peripheral RNG clock source selection
 406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RNG_CLKSOURCE_PLL           (0x00000000U)          /*!< PLL selected as RNG clock */
 409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RNG_CLKSOURCE_HSI48         RCC_CCIPR_HSI48SEL   /*!< HSI48 selected as RNG clock*/
 410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RNG */
 414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(USB)
 415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_USB_CLKSOURCE  Peripheral USB clock source selection
 416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USB_CLKSOURCE_PLL           (0x00000000U)          /*!< PLL selected as USB clock */
 419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USB_CLKSOURCE_HSI48         RCC_CCIPR_HSI48SEL   /*!< HSI48 selected as USB clock*/
 420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* USB */
 425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_CCIPR_HSI48SEL */
 426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_USART1 Peripheral USART get clock source
 429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CCIPR_USART1SEL)
 432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USART1_CLKSOURCE            RCC_CCIPR_USART1SEL    /*!< USART1 clock source selectio
 433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_CCIPR_USART1SEL */
 434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USART2_CLKSOURCE            RCC_CCIPR_USART2SEL    /*!< USART2 clock source selectio
 435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LPUART1 Peripheral LPUART get clock source
 441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LPUART1_CLKSOURCE           RCC_CCIPR_LPUART1SEL   /*!< LPUART1 clock source selecti
 444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
ARM GAS  /tmp/cchhGUYN.s 			page 10


 446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_I2C1 Peripheral I2C get clock source
 449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_I2C1_CLKSOURCE              RCC_CCIPR_I2C1SEL   /*!< I2C1 clock source selection bit
 452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CCIPR_I2C3SEL)
 453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_I2C3_CLKSOURCE              RCC_CCIPR_I2C3SEL   /*!< I2C3 clock source selection bit
 454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /*RCC_CCIPR_I2C3SEL*/
 455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_LPTIM1 Peripheral LPTIM get clock source
 460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_LPTIM1_CLKSOURCE            RCC_CCIPR_LPTIM1SEL  /*!< LPTIM1 clock source selection 
 463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CCIPR_HSI48SEL)
 468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RNG)
 469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_RNG  Peripheral RNG get clock source
 470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RNG_CLKSOURCE               RCC_CCIPR_HSI48SEL   /*!< HSI48 RC clock source selectio
 473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RNG */
 477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(USB)
 479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_USB  Peripheral USB get clock source
 480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_USB_CLKSOURCE               RCC_CCIPR_HSI48SEL  /*!< HSI48 RC clock source selection
 483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* USB */
 488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_CCIPR_HSI48SEL */
 489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_RTC_CLKSOURCE  RTC clock source selection
 491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RTC_CLKSOURCE_NONE          0x00000000U         /*!< No clock used as RTC clock */
 494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RTC_CLKSOURCE_LSE           RCC_CSR_RTCSEL_LSE            /*!< LSE oscillator clock 
 495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RTC_CLKSOURCE_LSI           RCC_CSR_RTCSEL_LSI            /*!< LSI oscillator clock 
 496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_RTC_CLKSOURCE_HSE           RCC_CSR_RTCSEL_HSE            /*!< HSE oscillator clock 
 497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****                                                                              (selection through @re
 498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLL_MUL PLL Multiplicator factor
ARM GAS  /tmp/cchhGUYN.s 			page 11


 503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_MUL_3                   RCC_CFGR_PLLMUL3  /*!< PLL input clock * 3  */
 506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_MUL_4                   RCC_CFGR_PLLMUL4  /*!< PLL input clock * 4  */
 507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_MUL_6                   RCC_CFGR_PLLMUL6  /*!< PLL input clock * 6  */
 508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_MUL_8                   RCC_CFGR_PLLMUL8  /*!< PLL input clock * 8  */
 509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_MUL_12                  RCC_CFGR_PLLMUL12 /*!< PLL input clock * 12 */
 510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_MUL_16                  RCC_CFGR_PLLMUL16 /*!< PLL input clock * 16 */
 511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_MUL_24                  RCC_CFGR_PLLMUL24 /*!< PLL input clock * 24 */
 512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_MUL_32                  RCC_CFGR_PLLMUL32 /*!< PLL input clock * 32 */
 513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_MUL_48                  RCC_CFGR_PLLMUL48 /*!< PLL input clock * 48 */
 514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLL_DIV PLL division factor
 519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_DIV_2                   RCC_CFGR_PLLDIV2 /*!< PLL clock output = PLLVCO / 2 */
 522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_DIV_3                   RCC_CFGR_PLLDIV3 /*!< PLL clock output = PLLVCO / 3 */
 523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLL_DIV_4                   RCC_CFGR_PLLDIV4 /*!< PLL clock output = PLLVCO / 4 */
 524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EC_PLLSOURCE PLL SOURCE
 529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLLSOURCE_HSI               RCC_CFGR_PLLSRC_HSI                           /*!< HSI c
 532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_PLLSOURCE_HSE               RCC_CFGR_PLLSRC_HSE                           /*!< HSE c
 533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /* Exported macro ------------------------------------------------------------*/
 542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_Exported_Macros RCC Exported Macros
 543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EM_WRITE_READ Common Write and read registers Macros
 547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Write a value in RCC register
 552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __REG__ Register to be written
 553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __VALUE__ Value to be written in the register
 554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_WriteReg(__REG__, __VALUE__) WRITE_REG(RCC->__REG__, (__VALUE__))
 557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Read a value in RCC register
ARM GAS  /tmp/cchhGUYN.s 			page 12


 560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __REG__ Register to be read
 561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Register value
 562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define LL_RCC_ReadReg(__REG__) READ_REG(RCC->__REG__)
 564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EM_CALC_FREQ Calculate frequencies
 569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Helper macro to calculate the PLLCLK frequency
 574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note ex: @ref __LL_RCC_CALC_PLLCLK_FREQ (HSE_VALUE,
 575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *                                      @ref LL_RCC_PLL_GetMultiplicator (),
 576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *                                      @ref LL_RCC_PLL_GetDivider ());
 577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __INPUTFREQ__ PLL Input frequency (based on MSI/HSE/HSI)
 578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __PLLMUL__ This parameter can be one of the following values:
 579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_MUL_3
 580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_MUL_4
 581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_MUL_6
 582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_MUL_8
 583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_MUL_12
 584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_MUL_16
 585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_MUL_24
 586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_MUL_32
 587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_MUL_48
 588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __PLLDIV__ This parameter can be one of the following values:
 589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_DIV_2
 590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_DIV_3
 591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_PLL_DIV_4
 592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval PLL clock frequency (in Hz)
 593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define __LL_RCC_CALC_PLLCLK_FREQ(__INPUTFREQ__, __PLLMUL__,  __PLLDIV__) ((__INPUTFREQ__) * (PLLMu
 595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Helper macro to calculate the HCLK frequency
 598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note: __AHBPRESCALER__ be retrieved by @ref LL_RCC_GetAHBPrescaler
 599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *        ex: __LL_RCC_CALC_HCLK_FREQ(LL_RCC_GetAHBPrescaler())
 600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __SYSCLKFREQ__ SYSCLK frequency (based on MSI/HSE/HSI/PLLCLK)
 601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __AHBPRESCALER__ This parameter can be one of the following values:
 602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_1
 603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_2
 604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_4
 605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_8
 606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_16
 607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_64
 608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_128
 609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_256
 610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_512
 611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval HCLK clock frequency (in Hz)
 612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define __LL_RCC_CALC_HCLK_FREQ(__SYSCLKFREQ__, __AHBPRESCALER__) ((__SYSCLKFREQ__) >> AHBPrescTabl
 614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Helper macro to calculate the PCLK1 frequency (ABP1)
ARM GAS  /tmp/cchhGUYN.s 			page 13


 617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note: __APB1PRESCALER__ be retrieved by @ref LL_RCC_GetAPB1Prescaler
 618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *        ex: __LL_RCC_CALC_PCLK1_FREQ(LL_RCC_GetAPB1Prescaler())
 619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __HCLKFREQ__ HCLK frequency
 620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __APB1PRESCALER__ This parameter can be one of the following values:
 621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_1
 622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_2
 623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_4
 624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_8
 625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_16
 626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval PCLK1 clock frequency (in Hz)
 627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define __LL_RCC_CALC_PCLK1_FREQ(__HCLKFREQ__, __APB1PRESCALER__) ((__HCLKFREQ__) >> APBPrescTable[
 629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Helper macro to calculate the PCLK2 frequency (ABP2)
 632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note: __APB2PRESCALER__ be retrieved by @ref LL_RCC_GetAPB2Prescaler
 633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *        ex: __LL_RCC_CALC_PCLK2_FREQ(LL_RCC_GetAPB2Prescaler())
 634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __HCLKFREQ__ HCLK frequency
 635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __APB2PRESCALER__ This parameter can be one of the following values:
 636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_1
 637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_2
 638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_4
 639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_8
 640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_16
 641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval PCLK2 clock frequency (in Hz)
 642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define __LL_RCC_CALC_PCLK2_FREQ(__HCLKFREQ__, __APB2PRESCALER__) ((__HCLKFREQ__) >> APBPrescTable[
 644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Helper macro to calculate the MSI frequency (in Hz)
 647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note: __MSIRANGE__can be retrieved by @ref LL_RCC_MSI_GetRange
 648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *        ex: __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange())
 649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  __MSIRANGE__ This parameter can be one of the following values:
 650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_0
 651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_1
 652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_2
 653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_3
 654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_4
 655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_5
 656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_6
 657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval MSI clock frequency (in Hz)
 658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #define __LL_RCC_CALC_MSI_FREQ(__MSIRANGE__) (32768UL * ( 1UL << (((__MSIRANGE__) >> RCC_ICSCR_MSIR
 660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /* Exported functions --------------------------------------------------------*/
 670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_Exported_Functions RCC Exported Functions
 671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 14


 674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EF_HSE HSE
 675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_HSECSS_SUPPORT)
 679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable the Clock Security System.
 681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           CSSHSEON         LL_RCC_HSE_EnableCSS
 682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
 685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_CSSON);
 687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_HSECSS_SUPPORT */
 689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable HSE external oscillator (HSE Bypass)
 692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
 693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
 696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable HSE external oscillator (HSE Bypass)
 702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
 703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
 706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable HSE crystal oscillator (HSE ON)
 712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
 713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_Enable(void)
 716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSEON);
 718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable HSE crystal oscillator (HSE ON)
 722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
 723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSE_Disable(void)
 726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
ARM GAS  /tmp/cchhGUYN.s 			page 15


 731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Check if HSE oscillator Ready
 732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
 733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval State of bit (1 or 0).
 734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
 736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Configure the RTC prescaler (divider)
 742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           RTCPRE        LL_RCC_SetRTC_HSEPrescaler
 743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  Div This parameter can be one of the following values:
 744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_HSE_DIV_2
 745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_HSE_DIV_4
 746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_HSE_DIV_8
 747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_HSE_DIV_16
 748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetRTC_HSEPrescaler(uint32_t Div)
 751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CR, RCC_CR_RTCPRE, Div);
 753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get the RTC divider (prescaler)
 757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           RTCPRE        LL_RCC_GetRTC_HSEPrescaler
 758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
 759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_HSE_DIV_2
 760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_HSE_DIV_4
 761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_HSE_DIV_8
 762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_HSE_DIV_16
 763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetRTC_HSEPrescaler(void)
 765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_RTCPRE));
 767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EF_HSI HSI
 774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable HSI oscillator
 779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSION         LL_RCC_HSI_Enable
 780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_Enable(void)
 783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSION);
 785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
ARM GAS  /tmp/cchhGUYN.s 			page 16


 788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable HSI oscillator
 789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSION         LL_RCC_HSI_Disable
 790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_Disable(void)
 793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Check if HSI clock is ready
 799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
 800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval State of bit (1 or 0).
 801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
 803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable HSI even in stop mode
 809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note HSI oscillator is forced ON even in Stop mode
 810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSIKERON      LL_RCC_HSI_EnableInStopMode
 811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_EnableInStopMode(void)
 814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSIKERON);
 816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable HSI in stop mode
 820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSIKERON      LL_RCC_HSI_DisableInStopMode
 821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_DisableInStopMode(void)
 824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSIKERON);
 826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable HSI Divider (it divides by 4)
 830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSIDIVEN       LL_RCC_HSI_EnableDivider
 831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_EnableDivider(void)
 834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSIDIVEN);
 836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable HSI Divider (it divides by 4)
 840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSIDIVEN       LL_RCC_HSI_DisableDivider
 841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_DisableDivider(void)
 844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
ARM GAS  /tmp/cchhGUYN.s 			page 17


 845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSIDIVEN);
 846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CR_HSIOUTEN)
 851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable HSI Output
 853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSIOUTEN       LL_RCC_HSI_EnableOutput
 854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_EnableOutput(void)
 857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable HSI Output
 863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           HSIOUTEN       LL_RCC_HSI_DisableOutput
 864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_DisableOutput(void)
 867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_CR_HSIOUTEN */
 871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get HSI Calibration value
 874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note When HSITRIM is written, HSICAL is updated with the sum of
 875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *       HSITRIM and the factory trim value
 876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll ICSCR        HSICAL        LL_RCC_HSI_GetCalibration
 877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Between Min_Data = 0x00 and Max_Data = 0xFF
 878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI_GetCalibration(void)
 880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_HSICAL) >> RCC_ICSCR_HSICAL_Pos);
 882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Set HSI Calibration trimming
 886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note user-programmable trimming value that is added to the HSICAL
 887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note Default value is 16, which, when added to the HSICAL value,
 888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *       should trim the HSI to 16 MHz +/- 1 %
 889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
 890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
 891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
 894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get HSI Calibration trimming
 900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_GetCalibTrimming
 901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Between Min_Data = 0x00 and Max_Data = 0x1F
ARM GAS  /tmp/cchhGUYN.s 			page 18


 902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI_GetCalibTrimming(void)
 904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos);
 906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_HSI48_SUPPORT)
 913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EF_HSI48 HSI48
 914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable HSI48
 919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
 920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI48_Enable(void)
 923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable HSI48
 929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
 930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI48_Disable(void)
 933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Check if HSI48 oscillator Ready
 939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
 940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval State of bit (1 or 0).
 941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
 943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RCC_CRRCR_HSI48RDY) ? 1UL : 0UL);
 945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get HSI48 Calibration value
 949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CRRCR          HSI48CAL      LL_RCC_HSI48_GetCalibration
 950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Between Min_Data = 0x00 and Max_Data = 0xFF
 951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI48_GetCalibration(void)
 953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48CAL) >> RCC_CRRCR_HSI48CAL_Pos);
 955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CRRCR_HSI48DIV6OUTEN)
 958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
ARM GAS  /tmp/cchhGUYN.s 			page 19


 959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable HSI48 Divider (it divides by 6)
 960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CRRCR           HSI48DIV6OUTEN       LL_RCC_HSI48_EnableDivider
 961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI48_EnableDivider(void)
 964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48DIV6OUTEN);
 966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable HSI48 Divider (it divides by 6)
 970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CRRCR           HSI48DIV6OUTEN       LL_RCC_HSI48_DisableDivider
 971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
 972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_HSI48_DisableDivider(void)
 974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48DIV6OUTEN);
 976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Check if HSI48 Divider is enabled (it divides by 6)
 980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CRRCR        HSI48DIV6OUTEN        LL_RCC_HSI48_IsDivided
 981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval State of bit (1 or 0).
 982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_HSI48_IsDivided(void)
 984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
 985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48DIV6OUTEN) == RCC_CRRCR_HSI48DIV6OUTEN) ? 1UL : 0UL)
 986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
 987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /*RCC_CRRCR_HSI48DIV6OUTEN*/
 989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
 991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
 992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 994:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_HSI48_SUPPORT */
 995:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
 996:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EF_LSE LSE
 997:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
 998:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
 999:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1000:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1001:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable  Low Speed External (LSE) crystal.
1002:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         LSEON         LL_RCC_LSE_Enable
1003:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1004:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1005:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_Enable(void)
1006:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1007:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CSR, RCC_CSR_LSEON);
1008:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1009:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1010:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1011:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable  Low Speed External (LSE) crystal.
1012:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         LSEON         LL_RCC_LSE_Disable
1013:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1014:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1015:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_Disable(void)
ARM GAS  /tmp/cchhGUYN.s 			page 20


1016:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1017:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CSR, RCC_CSR_LSEON);
1018:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1019:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1020:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1021:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable external clock source (LSE bypass).
1022:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         LSEBYP        LL_RCC_LSE_EnableBypass
1023:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1024:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1025:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
1026:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1027:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CSR, RCC_CSR_LSEBYP);
1028:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1029:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1030:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1031:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable external clock source (LSE bypass).
1032:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         LSEBYP        LL_RCC_LSE_DisableBypass
1033:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1034:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1035:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
1036:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1037:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CSR, RCC_CSR_LSEBYP);
1038:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1039:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1040:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1041:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Set LSE oscillator drive capability
1042:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note The oscillator is in Xtal mode when it is not in bypass mode.
1043:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         LSEDRV        LL_RCC_LSE_SetDriveCapability
1044:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  LSEDrive This parameter can be one of the following values:
1045:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_LOW
1046:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMLOW
1047:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
1048:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_HIGH
1049:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1050:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1051:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
1052:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1053:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CSR, RCC_CSR_LSEDRV, LSEDrive);
1054:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1055:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1056:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1057:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get LSE oscillator drive capability
1058:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         LSEDRV        LL_RCC_LSE_GetDriveCapability
1059:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1060:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_LOW
1061:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMLOW
1062:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
1063:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LSEDRIVE_HIGH
1064:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1065:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_LSE_GetDriveCapability(void)
1066:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1067:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_LSEDRV));
1068:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1069:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1070:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1071:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable Clock security system on LSE.
1072:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         LSECSSON      LL_RCC_LSE_EnableCSS
ARM GAS  /tmp/cchhGUYN.s 			page 21


1073:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1074:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1075:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_EnableCSS(void)
1076:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1077:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CSR, RCC_CSR_LSECSSON);
1078:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1079:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1080:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1081:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable Clock security system on LSE.
1082:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note   Clock security system can be disabled only after a LSE
1083:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         failure detection. In that case it MUST be disabled by software.
1084:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR          LSECSSON      LL_RCC_LSE_DisableCSS
1085:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1086:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1087:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSE_DisableCSS(void)
1088:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1089:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CSR, RCC_CSR_LSECSSON);
1090:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1091:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1092:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1093:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Check if LSE oscillator Ready
1094:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
1095:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval State of bit (1 or 0).
1096:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1097:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
1098:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1099:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
1100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Check if CSS on LSE failure Detection
1104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         LSECSSD       LL_RCC_LSE_IsCSSDetected
1105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval State of bit (1 or 0).
1106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_LSE_IsCSSDetected(void)
1108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return ((READ_BIT(RCC->CSR, RCC_CSR_LSECSSD) == RCC_CSR_LSECSSD) ? 1UL : 0UL);
1110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
1114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EF_LSI LSI
1117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
1118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable LSI Oscillator
1122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
1123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSI_Enable(void)
1126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CSR, RCC_CSR_LSION);
1128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 22


1130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable LSI Oscillator
1132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
1133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_LSI_Disable(void)
1136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
1138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Check if LSI is Ready
1142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
1143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval State of bit (1 or 0).
1144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
1146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
1148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
1152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EF_MSI MSI
1155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
1156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable MSI oscillator
1160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           MSION         LL_RCC_MSI_Enable
1161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_MSI_Enable(void)
1164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CR, RCC_CR_MSION);
1166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Disable MSI oscillator
1170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           MSION         LL_RCC_MSI_Disable
1171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_MSI_Disable(void)
1174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   CLEAR_BIT(RCC->CR, RCC_CR_MSION);
1176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Check if MSI oscillator Ready
1180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
1181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval State of bit (1 or 0).
1182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
1184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
1186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
ARM GAS  /tmp/cchhGUYN.s 			page 23


1187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Configure the Internal Multi Speed oscillator (MSI) clock range in run mode.
1190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll ICSCR           MSIRANGE      LL_RCC_MSI_SetRange
1191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  Range This parameter can be one of the following values:
1192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_0
1193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_1
1194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_2
1195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_3
1196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_4
1197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_5
1198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_6
1199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
1202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
1204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get the Internal Multi Speed oscillator (MSI) clock range in run mode.
1208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll ICSCR           MSIRANGE      LL_RCC_MSI_GetRange
1209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_0
1211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_1
1212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_2
1213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_3
1214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_4
1215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_5
1216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MSIRANGE_6
1217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
1219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
1221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get MSI Calibration value
1225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note When MSITRIM is written, MSICAL is updated with the sum of
1226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *       MSITRIM and the factory trim value
1227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll ICSCR        MSICAL        LL_RCC_MSI_GetCalibration
1228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Between Min_Data = 0x00 and Max_Data = 0xFF
1229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_MSI_GetCalibration(void)
1231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSICAL) >> RCC_ICSCR_MSICAL_Pos);
1233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Set MSI Calibration trimming
1237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note user-programmable trimming value that is added to the MSICAL
1238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
1239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
1240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
1243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
ARM GAS  /tmp/cchhGUYN.s 			page 24


1244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
1245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get MSI Calibration trimming
1249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_GetCalibTrimming
1250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Between Min_Data = 0x00 and Max_Data = 0xFF
1251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_MSI_GetCalibTrimming(void)
1253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
1255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
1259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EF_System System
1262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
1263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Configure the system clock source
1267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         SW            LL_RCC_SetSysClkSource
1268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  Source This parameter can be one of the following values:
1269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYS_CLKSOURCE_MSI
1270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSI
1271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
1272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
1273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
1276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
1278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get the system clock source
1282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         SWS           LL_RCC_GetSysClkSource
1283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
1285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
1286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
1287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
1288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
1290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
1292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Set AHB prescaler
1296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         HPRE          LL_RCC_SetAHBPrescaler
1297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  Prescaler This parameter can be one of the following values:
1298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_1
1299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_2
1300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_4
ARM GAS  /tmp/cchhGUYN.s 			page 25


1301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_8
1302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_16
1303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_64
1304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_128
1305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_256
1306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_512
1307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
1310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
1312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Set APB1 prescaler
1316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         PPRE1         LL_RCC_SetAPB1Prescaler
1317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  Prescaler This parameter can be one of the following values:
1318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_1
1319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_2
1320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_4
1321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_8
1322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_16
1323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
1326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
1328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Set APB2 prescaler
1332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         PPRE2         LL_RCC_SetAPB2Prescaler
1333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  Prescaler This parameter can be one of the following values:
1334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_1
1335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_2
1336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_4
1337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_8
1338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_16
1339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
1342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
1344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get AHB prescaler
1348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         HPRE          LL_RCC_GetAHBPrescaler
1349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_1
1351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_2
1352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_4
1353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_8
1354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_16
1355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_64
1356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_128
1357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_256
ARM GAS  /tmp/cchhGUYN.s 			page 26


1358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_SYSCLK_DIV_512
1359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
1361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
1363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get APB1 prescaler
1367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         PPRE1         LL_RCC_GetAPB1Prescaler
1368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_1
1370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_2
1371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_4
1372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_8
1373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB1_DIV_16
1374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
1376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
1378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get APB2 prescaler
1382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         PPRE2         LL_RCC_GetAPB2Prescaler
1383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_1
1385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_2
1386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_4
1387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_8
1388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_APB2_DIV_16
1389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
1391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
1393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Set Clock After Wake-Up From Stop mode
1397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         STOPWUCK      LL_RCC_SetClkAfterWakeFromStop
1398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  Clock This parameter can be one of the following values:
1399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
1400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
1401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
1404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
1406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get Clock After Wake-Up From Stop mode
1410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         STOPWUCK      LL_RCC_GetClkAfterWakeFromStop
1411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
1413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
1414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
ARM GAS  /tmp/cchhGUYN.s 			page 27


1415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetClkAfterWakeFromStop(void)
1416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_STOPWUCK));
1418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
1422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EF_MCO MCO
1425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
1426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Configure MCOx
1430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CFGR         MCOSEL        LL_RCC_ConfigMCO\n
1431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         CFGR         MCOPRE        LL_RCC_ConfigMCO
1432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  MCOxSource This parameter can be one of the following values:
1433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1SOURCE_NOCLOCK
1434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1SOURCE_SYSCLK
1435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1SOURCE_HSI
1436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1SOURCE_MSI
1437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1SOURCE_HSE
1438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1SOURCE_PLLCLK
1439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1SOURCE_LSI
1440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1SOURCE_LSE
1441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1SOURCE_HSI48 (*)
1442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *
1443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         (*) value not defined in all devices.
1444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  MCOxPrescaler This parameter can be one of the following values:
1445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1_DIV_1
1446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1_DIV_2
1447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1_DIV_4
1448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1_DIV_8
1449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_MCO1_DIV_16
1450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
1453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
1455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
1459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EF_Peripheral_Clock_Source Peripheral Clock Source
1462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
1463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Configure USARTx clock source
1467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        USARTxSEL     LL_RCC_SetUSARTClockSource
1468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  USARTxSource This parameter can be one of the following values:
1469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART1_CLKSOURCE_PCLK2 (*)
1470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART1_CLKSOURCE_SYSCLK (*)
1471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART1_CLKSOURCE_HSI (*)
ARM GAS  /tmp/cchhGUYN.s 			page 28


1472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART1_CLKSOURCE_LSE (*)
1473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART2_CLKSOURCE_PCLK1
1474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART2_CLKSOURCE_SYSCLK
1475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART2_CLKSOURCE_HSI
1476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
1477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *
1478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         (*) value not defined in all devices.
1479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
1482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
1484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Configure LPUART1x clock source
1488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        LPUART1SEL    LL_RCC_SetLPUARTClockSource
1489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  LPUARTxSource This parameter can be one of the following values:
1490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_PCLK1
1491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
1492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
1493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
1494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
1497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
1499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Configure I2Cx clock source
1503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        I2CxSEL       LL_RCC_SetI2CClockSource
1504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  I2CxSource This parameter can be one of the following values:
1505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C1_CLKSOURCE_PCLK1
1506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C1_CLKSOURCE_SYSCLK
1507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C1_CLKSOURCE_HSI
1508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C3_CLKSOURCE_PCLK1 (*)
1509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C3_CLKSOURCE_SYSCLK (*)
1510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C3_CLKSOURCE_HSI (*)
1511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *
1512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         (*) value not defined in all devices.
1513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
1516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
1518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Configure LPTIMx clock source
1522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        LPTIMxSEL     LL_RCC_SetLPTIMClockSource
1523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  LPTIMxSource This parameter can be one of the following values:
1524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_PCLK1
1525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSI
1526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_HSI
1527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
1528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
ARM GAS  /tmp/cchhGUYN.s 			page 29


1529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
1531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
1533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CCIPR_HSI48SEL)
1536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RNG)
1537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Configure RNG clock source
1539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        HSI48SEL      LL_RCC_SetRNGClockSource
1540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  RNGxSource This parameter can be one of the following values:
1541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RNG_CLKSOURCE_PLL
1542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RNG_CLKSOURCE_HSI48
1543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetRNGClockSource(uint32_t RNGxSource)
1546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, RNGxSource);
1548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RNG */
1550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(USB)
1552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Configure USB clock source
1554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        HSI48SEL      LL_RCC_SetUSBClockSource
1555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  USBxSource This parameter can be one of the following values:
1556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RNG_CLKSOURCE_PLL
1557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RNG_CLKSOURCE_HSI48
1558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
1561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, USBxSource);
1563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* USB */
1565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_CCIPR_HSI48SEL */
1567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get USARTx clock source
1570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        USARTxSEL     LL_RCC_GetUSARTClockSource
1571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  USARTx This parameter can be one of the following values:
1572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART1_CLKSOURCE (*)
1573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART2_CLKSOURCE
1574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART1_CLKSOURCE_PCLK2 (*)
1576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART1_CLKSOURCE_SYSCLK (*)
1577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART1_CLKSOURCE_HSI (*)
1578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART1_CLKSOURCE_LSE (*)
1579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART2_CLKSOURCE_PCLK1
1580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART2_CLKSOURCE_SYSCLK
1581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART2_CLKSOURCE_HSI
1582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
1583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *
1584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         (*) value not defined in all devices.
1585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
ARM GAS  /tmp/cchhGUYN.s 			page 30


1586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
1587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
1589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get LPUARTx clock source
1595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        LPUART1SEL    LL_RCC_GetLPUARTClockSource
1596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  LPUARTx This parameter can be one of the following values:
1597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
1598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_PCLK1
1600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
1601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
1602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
1603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
1605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
1607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get I2Cx clock source
1611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        I2CxSEL       LL_RCC_GetI2CClockSource
1612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  I2Cx This parameter can be one of the following values:
1613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C1_CLKSOURCE
1614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C3_CLKSOURCE
1615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C1_CLKSOURCE_PCLK1
1617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C1_CLKSOURCE_SYSCLK
1618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C1_CLKSOURCE_HSI
1619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C3_CLKSOURCE_PCLK1  (*)
1620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C3_CLKSOURCE_SYSCLK  (*)
1621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_I2C3_CLKSOURCE_HSI   (*)
1622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *
1623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         (*) value not defined in all devices.
1624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetI2CClockSource(uint32_t I2Cx)
1626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4U) | (I2Cx << 4U));
1628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get LPTIMx clock source
1632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        LPTIMxSEL     LL_RCC_GetLPTIMClockSource
1633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  LPTIMx This parameter can be one of the following values:
1634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE
1635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_PCLK1
1637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSI
1638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_HSI
1639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
1640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetLPTIMClockSource(uint32_t LPTIMx)
1642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
ARM GAS  /tmp/cchhGUYN.s 			page 31


1643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CCIPR, LPTIMx));
1644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RCC_CCIPR_HSI48SEL)
1647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(RNG)
1648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get RNGx clock source
1650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        CLK48SEL      LL_RCC_GetRNGClockSource
1651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  RNGx This parameter can be one of the following values:
1652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RNG_CLKSOURCE
1653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RNG_CLKSOURCE_PLL
1655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RNG_CLKSOURCE_HSI48
1656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetRNGClockSource(uint32_t RNGx)
1658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
1660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RNG */
1662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #if defined(USB)
1664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get USBx clock source
1666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CCIPR        CLK48SEL      LL_RCC_GetUSBClockSource
1667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  USBx This parameter can be one of the following values:
1668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USB_CLKSOURCE
1669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USB_CLKSOURCE_PLL
1671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_USB_CLKSOURCE_HSI48
1672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetUSBClockSource(uint32_t USBx)
1674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CCIPR, USBx));
1676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* USB */
1678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** #endif /* RCC_CCIPR_HSI48SEL */
1680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @}
1683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /** @defgroup RCC_LL_EF_RTC RTC
1686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @{
1687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Set RTC Clock Source
1691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @note Once the RTC clock source has been selected, it cannot be changed any more unless
1692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *       the Backup domain is reset, or unless a failure is detected on LSE (LSECSSD is
1693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *       set). The RTCRST bit can be used to reset them.
1694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         RTCSEL        LL_RCC_SetRTCClockSource
1695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @param  Source This parameter can be one of the following values:
1696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_CLKSOURCE_NONE
1697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
1698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
1699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE
ARM GAS  /tmp/cchhGUYN.s 			page 32


1700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
1703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL, Source);
1705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Get RTC Clock Source
1709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         RTCSEL        LL_RCC_GetRTCClockSource
1710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval Returned value can be one of the following values:
1711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_CLKSOURCE_NONE
1712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
1713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
1714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE
1715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
1717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RTCSEL));
1719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** }
1720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** 
1721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** /**
1722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @brief  Enable RTC
1723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @rmtoll CSR         RTCEN         LL_RCC_EnableRTC
1724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   * @retval None
1725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   */
1726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** __STATIC_INLINE void LL_RCC_EnableRTC(void)
  37              		.loc 2 1726 22 view .LVU3
  38              	.LBB11:
1727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h **** {
1728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rcc.h ****   SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
  39              		.loc 2 1728 3 view .LVU4
  40 0000 8023     		movs	r3, #128
  41 0002 114A     		ldr	r2, .L3
  42 0004 DB02     		lsls	r3, r3, #11
  43 0006 116D     		ldr	r1, [r2, #80]
  44              	.LBE11:
  45              	.LBE10:
  29:Core/Src/rtc.c ****   LL_RTC_InitTypeDef RTC_InitStruct = {0};
  46              		.loc 1 29 1 is_stmt 0 view .LVU5
  47 0008 30B5     		push	{r4, r5, lr}
  48              	.LCFI0:
  49              		.cfi_def_cfa_offset 12
  50              		.cfi_offset 4, -12
  51              		.cfi_offset 5, -8
  52              		.cfi_offset 14, -4
  53              	.LBB14:
  54              	.LBB12:
  55              		.loc 2 1728 3 view .LVU6
  56 000a 0B43     		orrs	r3, r1
  57              	.LBE12:
  58              	.LBE14:
  59              	.LBB15:
  60              	.LBB16:
  61              		.file 3 "Drivers/CMSIS/Include/core_cm0plus.h"
   1:Drivers/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
ARM GAS  /tmp/cchhGUYN.s 			page 33


   3:Drivers/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.6
   5:Drivers/CMSIS/Include/core_cm0plus.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0plus.h **** /*
   8:Drivers/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  10:Drivers/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  12:Drivers/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  16:Drivers/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  18:Drivers/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  24:Drivers/CMSIS/Include/core_cm0plus.h **** 
  25:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0plus.h **** 
  31:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0plus.h **** 
  34:Drivers/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0plus.h **** 
  36:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0plus.h **** 
  40:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  41:Drivers/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0plus.h **** 
  44:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0plus.h **** 
  47:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0plus.h **** 
  50:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  53:Drivers/CMSIS/Include/core_cm0plus.h **** 
  54:Drivers/CMSIS/Include/core_cm0plus.h **** 
  55:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  59:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
ARM GAS  /tmp/cchhGUYN.s 			page 34


  60:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  62:Drivers/CMSIS/Include/core_cm0plus.h **** 
  63:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0plus.h ****  
  65:Drivers/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:Drivers/CMSIS/Include/core_cm0plus.h **** 
  71:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:Drivers/CMSIS/Include/core_cm0plus.h **** 
  73:Drivers/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0plus.h **** */
  76:Drivers/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0plus.h **** 
  78:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0plus.h **** 
  83:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0plus.h **** 
  88:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0plus.h **** 
  93:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0plus.h **** 
  98:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0plus.h **** 
 103:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0plus.h **** 
 108:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0plus.h **** 
 113:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0plus.h **** 
 115:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 35


 117:Drivers/CMSIS/Include/core_cm0plus.h **** 
 118:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0plus.h **** }
 120:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0plus.h **** 
 122:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0plus.h **** 
 124:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0plus.h **** 
 126:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0plus.h **** 
 129:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0plus.h **** 
 133:Drivers/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0plus.h **** 
 140:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0plus.h **** 
 145:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0plus.h **** 
 150:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm0plus.h **** 
 155:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 160:Drivers/CMSIS/Include/core_cm0plus.h **** 
 161:Drivers/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 163:Drivers/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:Drivers/CMSIS/Include/core_cm0plus.h **** 
 165:Drivers/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:Drivers/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:Drivers/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:Drivers/CMSIS/Include/core_cm0plus.h **** */
 169:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 172:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
ARM GAS  /tmp/cchhGUYN.s 			page 36


 174:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:Drivers/CMSIS/Include/core_cm0plus.h **** 
 177:Drivers/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:Drivers/CMSIS/Include/core_cm0plus.h **** 
 182:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:Drivers/CMSIS/Include/core_cm0plus.h **** 
 184:Drivers/CMSIS/Include/core_cm0plus.h **** 
 185:Drivers/CMSIS/Include/core_cm0plus.h **** 
 186:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 196:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:Drivers/CMSIS/Include/core_cm0plus.h **** */
 199:Drivers/CMSIS/Include/core_cm0plus.h **** 
 200:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 201:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 205:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 206:Drivers/CMSIS/Include/core_cm0plus.h **** 
 207:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 208:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 210:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 211:Drivers/CMSIS/Include/core_cm0plus.h **** {
 212:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 213:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 214:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:Drivers/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:Drivers/CMSIS/Include/core_cm0plus.h **** 
 223:Drivers/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm0plus.h **** 
 227:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm0plus.h **** 
 230:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
ARM GAS  /tmp/cchhGUYN.s 			page 37


 231:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm0plus.h **** 
 233:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm0plus.h **** 
 236:Drivers/CMSIS/Include/core_cm0plus.h **** 
 237:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 238:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 240:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm0plus.h **** {
 242:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 243:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 244:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Drivers/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm0plus.h **** 
 250:Drivers/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm0plus.h **** 
 254:Drivers/CMSIS/Include/core_cm0plus.h **** 
 255:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 256:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 258:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm0plus.h **** {
 260:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 261:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 262:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:Drivers/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:Drivers/CMSIS/Include/core_cm0plus.h **** 
 274:Drivers/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0plus.h **** 
 278:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0plus.h **** 
 281:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm0plus.h **** 
 284:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm0plus.h **** 
 287:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
ARM GAS  /tmp/cchhGUYN.s 			page 38


 288:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm0plus.h **** 
 290:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm0plus.h **** 
 293:Drivers/CMSIS/Include/core_cm0plus.h **** 
 294:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 295:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 297:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 298:Drivers/CMSIS/Include/core_cm0plus.h **** {
 299:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 300:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 301:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:Drivers/CMSIS/Include/core_cm0plus.h **** 
 308:Drivers/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:Drivers/CMSIS/Include/core_cm0plus.h **** 
 312:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:Drivers/CMSIS/Include/core_cm0plus.h **** 
 315:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:Drivers/CMSIS/Include/core_cm0plus.h **** 
 317:Drivers/CMSIS/Include/core_cm0plus.h **** 
 318:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 319:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 323:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 324:Drivers/CMSIS/Include/core_cm0plus.h **** 
 325:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 326:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 328:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 329:Drivers/CMSIS/Include/core_cm0plus.h **** {
 330:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RSERVED1[31U];
 334:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:Drivers/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:Drivers/CMSIS/Include/core_cm0plus.h **** 
 342:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:Drivers/CMSIS/Include/core_cm0plus.h **** 
 344:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 39


 345:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 346:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 350:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 351:Drivers/CMSIS/Include/core_cm0plus.h **** 
 352:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 353:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 355:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:Drivers/CMSIS/Include/core_cm0plus.h **** {
 357:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 362:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 364:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:Drivers/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:Drivers/CMSIS/Include/core_cm0plus.h **** 
 372:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0plus.h **** 
 376:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0plus.h **** 
 379:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0plus.h **** 
 382:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0plus.h **** 
 385:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0plus.h **** 
 388:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0plus.h **** 
 392:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0plus.h **** 
 395:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0plus.h **** 
 398:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0plus.h **** 
 401:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
ARM GAS  /tmp/cchhGUYN.s 			page 40


 402:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0plus.h **** 
 404:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0plus.h **** 
 407:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0plus.h **** 
 410:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0plus.h **** 
 413:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:Drivers/CMSIS/Include/core_cm0plus.h **** 
 416:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 421:Drivers/CMSIS/Include/core_cm0plus.h **** 
 422:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:Drivers/CMSIS/Include/core_cm0plus.h **** 
 426:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:Drivers/CMSIS/Include/core_cm0plus.h **** 
 429:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:Drivers/CMSIS/Include/core_cm0plus.h **** 
 432:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0plus.h **** 
 435:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:Drivers/CMSIS/Include/core_cm0plus.h **** 
 438:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0plus.h **** 
 442:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0plus.h **** 
 445:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm0plus.h **** 
 448:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0plus.h **** 
 452:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0plus.h **** 
 455:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 41


 459:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:Drivers/CMSIS/Include/core_cm0plus.h **** 
 461:Drivers/CMSIS/Include/core_cm0plus.h **** 
 462:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 463:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 467:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 468:Drivers/CMSIS/Include/core_cm0plus.h **** 
 469:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 470:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 472:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:Drivers/CMSIS/Include/core_cm0plus.h **** {
 474:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:Drivers/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:Drivers/CMSIS/Include/core_cm0plus.h **** 
 480:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0plus.h **** 
 484:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0plus.h **** 
 487:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:Drivers/CMSIS/Include/core_cm0plus.h **** 
 490:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:Drivers/CMSIS/Include/core_cm0plus.h **** 
 493:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:Drivers/CMSIS/Include/core_cm0plus.h **** 
 497:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:Drivers/CMSIS/Include/core_cm0plus.h **** 
 501:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:Drivers/CMSIS/Include/core_cm0plus.h **** 
 505:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0plus.h **** 
 508:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0plus.h **** 
 511:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:Drivers/CMSIS/Include/core_cm0plus.h **** 
 513:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 515:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
ARM GAS  /tmp/cchhGUYN.s 			page 42


 516:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 519:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 520:Drivers/CMSIS/Include/core_cm0plus.h **** 
 521:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 522:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 524:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:Drivers/CMSIS/Include/core_cm0plus.h **** {
 526:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:Drivers/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:Drivers/CMSIS/Include/core_cm0plus.h **** 
 533:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:Drivers/CMSIS/Include/core_cm0plus.h **** 
 535:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:Drivers/CMSIS/Include/core_cm0plus.h **** 
 539:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:Drivers/CMSIS/Include/core_cm0plus.h **** 
 542:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:Drivers/CMSIS/Include/core_cm0plus.h **** 
 545:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
 546:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:Drivers/CMSIS/Include/core_cm0plus.h **** 
 549:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:Drivers/CMSIS/Include/core_cm0plus.h **** 
 552:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:Drivers/CMSIS/Include/core_cm0plus.h **** 
 555:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:Drivers/CMSIS/Include/core_cm0plus.h **** 
 559:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:Drivers/CMSIS/Include/core_cm0plus.h **** 
 563:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:Drivers/CMSIS/Include/core_cm0plus.h **** 
 566:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:Drivers/CMSIS/Include/core_cm0plus.h **** 
 569:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 43


 573:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:Drivers/CMSIS/Include/core_cm0plus.h **** 
 576:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:Drivers/CMSIS/Include/core_cm0plus.h **** 
 579:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:Drivers/CMSIS/Include/core_cm0plus.h **** 
 582:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:Drivers/CMSIS/Include/core_cm0plus.h **** 
 585:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:Drivers/CMSIS/Include/core_cm0plus.h **** 
 588:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:Drivers/CMSIS/Include/core_cm0plus.h **** 
 591:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:Drivers/CMSIS/Include/core_cm0plus.h **** 
 594:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:Drivers/CMSIS/Include/core_cm0plus.h **** 
 597:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:Drivers/CMSIS/Include/core_cm0plus.h **** 
 600:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 602:Drivers/CMSIS/Include/core_cm0plus.h **** 
 603:Drivers/CMSIS/Include/core_cm0plus.h **** 
 604:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 605:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:Drivers/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 610:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 611:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:Drivers/CMSIS/Include/core_cm0plus.h **** 
 613:Drivers/CMSIS/Include/core_cm0plus.h **** 
 614:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 615:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 619:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 620:Drivers/CMSIS/Include/core_cm0plus.h **** 
 621:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 622:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:Drivers/CMSIS/Include/core_cm0plus.h **** */
 627:Drivers/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:Drivers/CMSIS/Include/core_cm0plus.h **** 
 629:Drivers/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  /tmp/cchhGUYN.s 			page 44


 630:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:Drivers/CMSIS/Include/core_cm0plus.h **** */
 635:Drivers/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:Drivers/CMSIS/Include/core_cm0plus.h **** 
 637:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:Drivers/CMSIS/Include/core_cm0plus.h **** 
 639:Drivers/CMSIS/Include/core_cm0plus.h **** 
 640:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 641:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 645:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 646:Drivers/CMSIS/Include/core_cm0plus.h **** 
 647:Drivers/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:Drivers/CMSIS/Include/core_cm0plus.h **** 
 653:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:Drivers/CMSIS/Include/core_cm0plus.h **** 
 657:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 660:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 661:Drivers/CMSIS/Include/core_cm0plus.h **** 
 662:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:Drivers/CMSIS/Include/core_cm0plus.h **** 
 664:Drivers/CMSIS/Include/core_cm0plus.h **** 
 665:Drivers/CMSIS/Include/core_cm0plus.h **** 
 666:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:Drivers/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 673:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 674:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:Drivers/CMSIS/Include/core_cm0plus.h **** */
 676:Drivers/CMSIS/Include/core_cm0plus.h **** 
 677:Drivers/CMSIS/Include/core_cm0plus.h **** 
 678:Drivers/CMSIS/Include/core_cm0plus.h **** 
 679:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 681:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 685:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 686:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 45


 687:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 691:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 693:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:Drivers/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:Drivers/CMSIS/Include/core_cm0plus.h **** 
 707:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 711:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 713:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:Drivers/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:Drivers/CMSIS/Include/core_cm0plus.h **** 
 717:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:Drivers/CMSIS/Include/core_cm0plus.h **** 
 719:Drivers/CMSIS/Include/core_cm0plus.h **** 
 720:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:Drivers/CMSIS/Include/core_cm0plus.h **** 
 725:Drivers/CMSIS/Include/core_cm0plus.h **** 
 726:Drivers/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:Drivers/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:Drivers/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:Drivers/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:Drivers/CMSIS/Include/core_cm0plus.h **** 
 732:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:Drivers/CMSIS/Include/core_cm0plus.h **** 
 735:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 736:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 741:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:Drivers/CMSIS/Include/core_cm0plus.h **** {
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /tmp/cchhGUYN.s 			page 46


 744:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 746:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 747:Drivers/CMSIS/Include/core_cm0plus.h **** }
 748:Drivers/CMSIS/Include/core_cm0plus.h **** 
 749:Drivers/CMSIS/Include/core_cm0plus.h **** 
 750:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 751:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 752:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 753:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 754:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 755:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 756:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 757:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 758:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 759:Drivers/CMSIS/Include/core_cm0plus.h **** {
 760:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 761:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 762:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 763:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 764:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 765:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 766:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 767:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 768:Drivers/CMSIS/Include/core_cm0plus.h **** }
 769:Drivers/CMSIS/Include/core_cm0plus.h **** 
 770:Drivers/CMSIS/Include/core_cm0plus.h **** 
 771:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 772:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 773:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 774:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 775:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 776:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 777:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 778:Drivers/CMSIS/Include/core_cm0plus.h **** {
 779:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 780:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 781:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 782:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 784:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 785:Drivers/CMSIS/Include/core_cm0plus.h **** }
 786:Drivers/CMSIS/Include/core_cm0plus.h **** 
 787:Drivers/CMSIS/Include/core_cm0plus.h **** 
 788:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 789:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 790:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 791:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 792:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 793:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 794:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 795:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 796:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 797:Drivers/CMSIS/Include/core_cm0plus.h **** {
 798:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 799:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 800:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
ARM GAS  /tmp/cchhGUYN.s 			page 47


 801:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 802:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 803:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 804:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 805:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 806:Drivers/CMSIS/Include/core_cm0plus.h **** }
 807:Drivers/CMSIS/Include/core_cm0plus.h **** 
 808:Drivers/CMSIS/Include/core_cm0plus.h **** 
 809:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 810:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 811:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 812:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 813:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 814:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 815:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 816:Drivers/CMSIS/Include/core_cm0plus.h **** {
 817:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 818:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 819:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 820:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 821:Drivers/CMSIS/Include/core_cm0plus.h **** }
 822:Drivers/CMSIS/Include/core_cm0plus.h **** 
 823:Drivers/CMSIS/Include/core_cm0plus.h **** 
 824:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 825:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 826:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 827:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 828:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 829:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 830:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 831:Drivers/CMSIS/Include/core_cm0plus.h **** {
 832:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 833:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 834:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 835:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 836:Drivers/CMSIS/Include/core_cm0plus.h **** }
 837:Drivers/CMSIS/Include/core_cm0plus.h **** 
 838:Drivers/CMSIS/Include/core_cm0plus.h **** 
 839:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 840:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 841:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 842:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 843:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 844:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 845:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 846:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 847:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 848:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 849:Drivers/CMSIS/Include/core_cm0plus.h **** {
 850:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 851:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 852:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
  62              		.loc 3 852 52 view .LVU7
  63 000c C021     		movs	r1, #192
  64              	.LBE16:
  65              	.LBE15:
  66              	.LBB19:
ARM GAS  /tmp/cchhGUYN.s 			page 48


  67              	.LBB20:
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
  68              		.loc 3 745 20 view .LVU8
  69 000e 0425     		movs	r5, #4
  70              	.LBE20:
  71              	.LBE19:
  72              	.LBB22:
  73              	.LBB13:
  74              		.loc 2 1728 3 view .LVU9
  75 0010 1365     		str	r3, [r2, #80]
  76              	.LBE13:
  77              	.LBE22:
  34:Core/Src/rtc.c **** 
  35:Core/Src/rtc.c ****   /* RTC interrupt Init */
  36:Core/Src/rtc.c ****   NVIC_SetPriority(RTC_IRQn, 0);
  78              		.loc 1 36 3 is_stmt 1 view .LVU10
  79              	.LVL0:
  80              	.LBB23:
  81              	.LBI15:
 848:Drivers/CMSIS/Include/core_cm0plus.h **** {
  82              		.loc 3 848 22 view .LVU11
  83              	.LBB17:
 850:Drivers/CMSIS/Include/core_cm0plus.h ****   {
  84              		.loc 3 850 3 view .LVU12
  85              		.loc 3 852 5 view .LVU13
  86              		.loc 3 852 52 is_stmt 0 view .LVU14
  87 0012 0E4B     		ldr	r3, .L3+4
  88 0014 8900     		lsls	r1, r1, #2
  89 0016 5A58     		ldr	r2, [r3, r1]
  90              		.loc 3 852 33 view .LVU15
  91 0018 0D48     		ldr	r0, .L3+8
  92              	.LBE17:
  93              	.LBE23:
  29:Core/Src/rtc.c ****   LL_RTC_InitTypeDef RTC_InitStruct = {0};
  94              		.loc 1 29 1 view .LVU16
  95 001a 85B0     		sub	sp, sp, #20
  96              	.LCFI1:
  97              		.cfi_def_cfa_offset 32
  98              	.LBB24:
  99              	.LBB18:
 100              		.loc 3 852 33 view .LVU17
 101 001c 0240     		ands	r2, r0
 102              		.loc 3 852 30 view .LVU18
 103 001e 5A50     		str	r2, [r3, r1]
 104              	.LVL1:
 105              		.loc 3 852 30 view .LVU19
 106              	.LBE18:
 107              	.LBE24:
  37:Core/Src/rtc.c ****   NVIC_EnableIRQ(RTC_IRQn);
 108              		.loc 1 37 3 is_stmt 1 view .LVU20
 109              	.LBB25:
 110              	.LBI19:
 741:Drivers/CMSIS/Include/core_cm0plus.h **** {
 111              		.loc 3 741 22 view .LVU21
 112              	.LBB21:
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 113              		.loc 3 743 3 view .LVU22
ARM GAS  /tmp/cchhGUYN.s 			page 49


 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 114              		.loc 3 745 5 view .LVU23
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 115              		.loc 3 745 20 is_stmt 0 view .LVU24
 116 0020 1D60     		str	r5, [r3]
 117              	.LVL2:
 745:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 118              		.loc 3 745 20 view .LVU25
 119              	.LBE21:
 120              	.LBE25:
  38:Core/Src/rtc.c **** 
  39:Core/Src/rtc.c ****   /** Initialize RTC and set the Time and Date
  40:Core/Src/rtc.c ****   */
  41:Core/Src/rtc.c ****   RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 121              		.loc 1 41 3 is_stmt 1 view .LVU26
 122              		.loc 1 41 29 is_stmt 0 view .LVU27
 123 0022 0023     		movs	r3, #0
  42:Core/Src/rtc.c ****   RTC_InitStruct.AsynchPrescaler = 127;
  43:Core/Src/rtc.c ****   RTC_InitStruct.SynchPrescaler = 255;
  44:Core/Src/rtc.c ****   LL_RTC_Init(RTC, &RTC_InitStruct);
 124              		.loc 1 44 3 view .LVU28
 125 0024 0B4C     		ldr	r4, .L3+12
  41:Core/Src/rtc.c ****   RTC_InitStruct.AsynchPrescaler = 127;
 126              		.loc 1 41 29 view .LVU29
 127 0026 0193     		str	r3, [sp, #4]
  42:Core/Src/rtc.c ****   RTC_InitStruct.AsynchPrescaler = 127;
 128              		.loc 1 42 3 is_stmt 1 view .LVU30
  42:Core/Src/rtc.c ****   RTC_InitStruct.AsynchPrescaler = 127;
 129              		.loc 1 42 34 is_stmt 0 view .LVU31
 130 0028 7F33     		adds	r3, r3, #127
 131 002a 0293     		str	r3, [sp, #8]
  43:Core/Src/rtc.c ****   LL_RTC_Init(RTC, &RTC_InitStruct);
 132              		.loc 1 43 3 is_stmt 1 view .LVU32
 133              		.loc 1 44 3 is_stmt 0 view .LVU33
 134 002c 2000     		movs	r0, r4
  43:Core/Src/rtc.c ****   LL_RTC_Init(RTC, &RTC_InitStruct);
 135              		.loc 1 43 33 view .LVU34
 136 002e 8033     		adds	r3, r3, #128
 137              		.loc 1 44 3 view .LVU35
 138 0030 01A9     		add	r1, sp, #4
  43:Core/Src/rtc.c ****   LL_RTC_Init(RTC, &RTC_InitStruct);
 139              		.loc 1 43 33 view .LVU36
 140 0032 0393     		str	r3, [sp, #12]
 141              		.loc 1 44 3 is_stmt 1 view .LVU37
 142 0034 FFF7FEFF 		bl	LL_RTC_Init
 143              	.LVL3:
  45:Core/Src/rtc.c ****   /** Initialize RTC and set the Time and Date
  46:Core/Src/rtc.c ****   */
  47:Core/Src/rtc.c ****   /** Enable the WakeUp
  48:Core/Src/rtc.c ****   */
  49:Core/Src/rtc.c ****   LL_RTC_WAKEUP_SetClock(RTC, LL_RTC_WAKEUPCLOCK_CKSPRE);
 144              		.loc 1 49 3 view .LVU38
 145              	.LBB26:
 146              	.LBI26:
 147              		.file 4 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h"
   1:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   ******************************************************************************
ARM GAS  /tmp/cchhGUYN.s 			page 50


   3:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @file    stm32l0xx_ll_rtc.h
   4:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief   Header file of RTC LL module.
   6:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   ******************************************************************************
   7:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @attention
   8:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
   9:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
  12:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
  17:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   ******************************************************************************
  18:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
  19:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  20:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #ifndef STM32L0xx_LL_RTC_H
  22:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define STM32L0xx_LL_RTC_H
  23:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  24:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #ifdef __cplusplus
  25:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** extern "C" {
  26:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif
  27:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  28:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #include "stm32l0xx.h"
  30:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  31:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @addtogroup STM32L0xx_LL_Driver
  32:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
  33:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
  34:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  35:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC)
  36:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  37:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL RTC
  38:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
  39:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
  40:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  41:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Private constants ---------------------------------------------------------*/
  44:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_Private_Constants RTC Private Constants
  45:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
  46:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
  47:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Masks Definition */
  48:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define RTC_LL_INIT_MASK                 (0xFFFFFFFFU)
  49:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define RTC_LL_RSF_MASK                  (0xFFFFFF5FU)
  50:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  51:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Write protection defines */
  52:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define RTC_WRITE_PROTECTION_DISABLE  ((uint8_t)0xFF)
  53:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define RTC_WRITE_PROTECTION_ENABLE_1 ((uint8_t)0xCA)
  54:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define RTC_WRITE_PROTECTION_ENABLE_2 ((uint8_t)0x53)
  55:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  56:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Defines used to combine date & time */
  57:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define RTC_OFFSET_WEEKDAY            (24U)
  58:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define RTC_OFFSET_DAY                (16U)
  59:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define RTC_OFFSET_MONTH              (8U)
ARM GAS  /tmp/cchhGUYN.s 			page 51


  60:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define RTC_OFFSET_HOUR               (16U)
  61:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define RTC_OFFSET_MINUTE             (8U)
  62:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  63:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
  64:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
  65:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
  66:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  67:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Private macros ------------------------------------------------------------*/
  68:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(USE_FULL_LL_DRIVER)
  69:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_Private_Macros RTC Private Macros
  70:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
  71:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
  72:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
  73:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
  74:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
  75:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /*USE_FULL_LL_DRIVER*/
  76:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  77:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Exported types ------------------------------------------------------------*/
  78:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(USE_FULL_LL_DRIVER)
  79:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_ES_INIT RTC Exported Init structure
  80:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
  81:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
  82:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  83:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
  84:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  RTC Init structures definition
  85:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
  86:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** typedef struct
  87:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
  88:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t HourFormat;   /*!< Specifies the RTC Hours Format.
  89:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                               This parameter can be a value of @ref RTC_LL_EC_HOURFORMAT
  90:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  91:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                               This feature can be modified afterwards using unitary function
  92:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                               @ref LL_RTC_SetHourFormat(). */
  93:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  94:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t AsynchPrescaler; /*!< Specifies the RTC Asynchronous Predivider value.
  95:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                               This parameter must be a number between Min_Data = 0x00 and Max_Data 
  96:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
  97:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                               This feature can be modified afterwards using unitary function
  98:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                               @ref LL_RTC_SetAsynchPrescaler(). */
  99:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t SynchPrescaler;  /*!< Specifies the RTC Synchronous Predivider value.
 101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                               This parameter must be a number between Min_Data = 0x00 and Max_Data 
 102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                               This feature can be modified afterwards using unitary function
 104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                               @ref LL_RTC_SetSynchPrescaler(). */
 105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** } LL_RTC_InitTypeDef;
 106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  RTC Time structure definition
 109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** typedef struct
 111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t TimeFormat; /*!< Specifies the RTC AM/PM Time.
 113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                             This parameter can be a value of @ref RTC_LL_EC_TIME_FORMAT
 114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                             This feature can be modified afterwards using unitary function @ref LL_
 116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 52


 117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint8_t Hours;       /*!< Specifies the RTC Time Hours.
 118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                             This parameter must be a number between Min_Data = 0 and Max_Data = 12 
 119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                             This parameter must be a number between Min_Data = 0 and Max_Data = 23 
 120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                             This feature can be modified afterwards using unitary function @ref LL_
 122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint8_t Minutes;     /*!< Specifies the RTC Time Minutes.
 124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                             This parameter must be a number between Min_Data = 0 and Max_Data = 59
 125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                             This feature can be modified afterwards using unitary function @ref LL_
 127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint8_t Seconds;     /*!< Specifies the RTC Time Seconds.
 129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                             This parameter must be a number between Min_Data = 0 and Max_Data = 59
 130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                             This feature can be modified afterwards using unitary function @ref LL_
 132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** } LL_RTC_TimeTypeDef;
 133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  RTC Date structure definition
 136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** typedef struct
 138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint8_t WeekDay;  /*!< Specifies the RTC Date WeekDay.
 140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                          This parameter can be a value of @ref RTC_LL_EC_WEEKDAY
 141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                          This feature can be modified afterwards using unitary function @ref LL_RTC
 143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint8_t Month;    /*!< Specifies the RTC Date Month.
 145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                          This parameter can be a value of @ref RTC_LL_EC_MONTH
 146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                          This feature can be modified afterwards using unitary function @ref LL_RTC
 148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint8_t Day;      /*!< Specifies the RTC Date Day.
 150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                          This parameter must be a number between Min_Data = 1 and Max_Data = 31
 151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                          This feature can be modified afterwards using unitary function @ref LL_RTC
 153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint8_t Year;     /*!< Specifies the RTC Date Year.
 155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                          This parameter must be a number between Min_Data = 0 and Max_Data = 99
 156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                          This feature can be modified afterwards using unitary function @ref LL_RTC
 158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** } LL_RTC_DateTypeDef;
 159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  RTC Alarm structure definition
 162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** typedef struct
 164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   LL_RTC_TimeTypeDef AlarmTime;  /*!< Specifies the RTC Alarm Time members. */
 166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t AlarmMask;            /*!< Specifies the RTC Alarm Masks.
 168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       This parameter can be a value of @ref RTC_LL_EC_ALMA_MASK for
 169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       This feature can be modified afterwards using unitary functio
 171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       or @ref LL_RTC_ALMB_SetMask() for ALARM B
 172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                  */
 173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 53


 174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t AlarmDateWeekDaySel;  /*!< Specifies the RTC Alarm is on day or WeekDay.
 175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       This parameter can be a value of @ref RTC_LL_EC_ALMA_WEEKDAY_
 176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       This feature can be modified afterwards using unitary functio
 178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       for ALARM A or @ref LL_RTC_ALMB_EnableWeekday() or @ref LL_RT
 179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                  */
 180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint8_t AlarmDateWeekDay;      /*!< Specifies the RTC Alarm Day/WeekDay.
 182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       If AlarmDateWeekDaySel set to day, this parameter  must be a 
 183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       This feature can be modified afterwards using unitary functio
 185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       for ALARM A or @ref LL_RTC_ALMB_SetDay() for ALARM B.
 186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       If AlarmDateWeekDaySel set to Weekday, this parameter can be 
 188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       This feature can be modified afterwards using unitary functio
 190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                       for ALARM A or @ref LL_RTC_ALMB_SetWeekDay() for ALARM B.
 191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                                  */
 192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** } LL_RTC_AlarmTypeDef;
 193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* USE_FULL_LL_DRIVER */
 198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Exported constants --------------------------------------------------------*/
 200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_Exported_Constants RTC Exported Constants
 201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(USE_FULL_LL_DRIVER)
 205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_FORMAT FORMAT
 206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_FORMAT_BIN                  0x000000000U /*!< Binary data format */
 209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_FORMAT_BCD                  0x000000001U /*!< BCD data format */
 210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_ALMA_WEEKDAY_SELECTION RTC Alarm A Date WeekDay
 215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMA_DATEWEEKDAYSEL_DATE    0x00000000U             /*!< Alarm A Date is selected */
 218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMA_DATEWEEKDAYSEL_WEEKDAY RTC_ALRMAR_WDSEL        /*!< Alarm A WeekDay is selected
 219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_ALMB_WEEKDAY_SELECTION RTC Alarm B Date WeekDay
 224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMB_DATEWEEKDAYSEL_DATE    0x00000000U             /*!< Alarm B Date is selected */
 227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMB_DATEWEEKDAYSEL_WEEKDAY RTC_ALRMBR_WDSEL        /*!< Alarm B WeekDay is selected
 228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
ARM GAS  /tmp/cchhGUYN.s 			page 54


 231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* USE_FULL_LL_DRIVER */
 233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_GET_FLAG Get Flags Defines
 235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief    Flags defines which can be used with LL_RTC_ReadReg function
 236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_ITSF                    RTC_ISR_ITSF
 239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_RECALPF                 RTC_ISR_RECALPF
 240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_TAMP3F                  RTC_ISR_TAMP3F
 241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_TAMP2F                  RTC_ISR_TAMP2F
 242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_TAMP1F                  RTC_ISR_TAMP1F
 243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_TSOVF                   RTC_ISR_TSOVF
 244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_TSF                     RTC_ISR_TSF
 245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_WUTF                    RTC_ISR_WUTF
 246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_ALRBF                   RTC_ISR_ALRBF
 247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_ALRAF                   RTC_ISR_ALRAF
 248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_INITF                   RTC_ISR_INITF
 249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_RSF                     RTC_ISR_RSF
 250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_INITS                   RTC_ISR_INITS
 251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_SHPF                    RTC_ISR_SHPF
 252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_WUTWF                   RTC_ISR_WUTWF
 253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_ALRBWF                  RTC_ISR_ALRBWF
 254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ISR_ALRAWF                  RTC_ISR_ALRAWF
 255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_IT IT Defines
 260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief    IT defines which can be used with LL_RTC_ReadReg and  LL_RTC_WriteReg functions
 261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CR_TSIE                     RTC_CR_TSIE
 264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CR_WUTIE                    RTC_CR_WUTIE
 265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CR_ALRBIE                   RTC_CR_ALRBIE
 266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CR_ALRAIE                   RTC_CR_ALRAIE
 267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPCR_TAMP3IE              RTC_TAMPCR_TAMP3IE
 268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPCR_TAMP2IE              RTC_TAMPCR_TAMP2IE
 269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPCR_TAMP1IE              RTC_TAMPCR_TAMP1IE
 270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPCR_TAMPIE               RTC_TAMPCR_TAMPIE
 271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_WEEKDAY  WEEK DAY
 276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WEEKDAY_MONDAY              ((uint8_t)0x01U) /*!< Monday    */
 279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WEEKDAY_TUESDAY             ((uint8_t)0x02U) /*!< Tuesday   */
 280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WEEKDAY_WEDNESDAY           ((uint8_t)0x03U) /*!< Wednesday */
 281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WEEKDAY_THURSDAY            ((uint8_t)0x04U) /*!< Thrusday  */
 282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WEEKDAY_FRIDAY              ((uint8_t)0x05U) /*!< Friday    */
 283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WEEKDAY_SATURDAY            ((uint8_t)0x06U) /*!< Saturday  */
 284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WEEKDAY_SUNDAY              ((uint8_t)0x07U) /*!< Sunday    */
 285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
ARM GAS  /tmp/cchhGUYN.s 			page 55


 288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_MONTH  MONTH
 290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_JANUARY               ((uint8_t)0x01U)  /*!< January   */
 293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_FEBRUARY              ((uint8_t)0x02U)  /*!< February  */
 294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_MARCH                 ((uint8_t)0x03U)  /*!< March     */
 295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_APRIL                 ((uint8_t)0x04U)  /*!< April     */
 296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_MAY                   ((uint8_t)0x05U)  /*!< May       */
 297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_JUNE                  ((uint8_t)0x06U)  /*!< June      */
 298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_JULY                  ((uint8_t)0x07U)  /*!< July      */
 299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_AUGUST                ((uint8_t)0x08U)  /*!< August    */
 300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_SEPTEMBER             ((uint8_t)0x09U)  /*!< September */
 301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_OCTOBER               ((uint8_t)0x10U)  /*!< October   */
 302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_NOVEMBER              ((uint8_t)0x11U)  /*!< November  */
 303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_MONTH_DECEMBER              ((uint8_t)0x12U)  /*!< December  */
 304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_HOURFORMAT  HOUR FORMAT
 309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_HOURFORMAT_24HOUR           0x00000000U           /*!< 24 hour/day format */
 312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_HOURFORMAT_AMPM             RTC_CR_FMT            /*!< AM/PM hour format */
 313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_ALARMOUT  ALARM OUTPUT
 318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALARMOUT_DISABLE            0x00000000U             /*!< Output disabled */
 321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALARMOUT_ALMA               RTC_CR_OSEL_0           /*!< Alarm A output enabled */
 322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALARMOUT_ALMB               RTC_CR_OSEL_1           /*!< Alarm B output enabled */
 323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALARMOUT_WAKEUP             RTC_CR_OSEL             /*!< Wakeup output enabled */
 324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_ALARM_OUTPUTTYPE  ALARM OUTPUT TYPE
 329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALARM_OUTPUTTYPE_OPENDRAIN  0x00000000U                          /*!< RTC_ALARM, whe
 332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALARM_OUTPUTTYPE_PUSHPULL   RTC_OR_ALARMOUTTYPE /*!< RTC_ALARM, when mapped on PC13,
 333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_OUTPUTPOLARITY_PIN  OUTPUT POLARITY PIN
 338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_OUTPUTPOLARITY_PIN_HIGH     0x00000000U           /*!< Pin is high when ALRAF/ALRBF/
 341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_OUTPUTPOLARITY_PIN_LOW      RTC_CR_POL            /*!< Pin is low when ALRAF/ALRBF/W
 342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
ARM GAS  /tmp/cchhGUYN.s 			page 56


 345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_TIME_FORMAT TIME FORMAT
 347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TIME_FORMAT_AM_OR_24        0x00000000U           /*!< AM or 24-hour format */
 350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TIME_FORMAT_PM              RTC_TR_PM             /*!< PM */
 351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_SHIFT_SECOND  SHIFT SECOND
 356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_SHIFT_SECOND_DELAY          0x00000000U           /* Delay (seconds) = SUBFS / (PRED
 359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_SHIFT_SECOND_ADVANCE        RTC_SHIFTR_ADD1S      /* Advance (seconds) = (1 - (SUBFS
 360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_ALMA_MASK  ALARMA MASK
 365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMA_MASK_NONE              0x00000000U             /*!< No masks applied on Alarm A
 368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMA_MASK_DATEWEEKDAY       RTC_ALRMAR_MSK4         /*!< Date/day do not care in Ala
 369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMA_MASK_HOURS             RTC_ALRMAR_MSK3         /*!< Hours do not care in Alarm 
 370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMA_MASK_MINUTES           RTC_ALRMAR_MSK2         /*!< Minutes do not care in Alar
 371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMA_MASK_SECONDS           RTC_ALRMAR_MSK1         /*!< Seconds do not care in Alar
 372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMA_MASK_ALL               (RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | R
 373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_ALMA_TIME_FORMAT  ALARMA TIME FORMAT
 378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMA_TIME_FORMAT_AM         0x00000000U           /*!< AM or 24-hour format */
 381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMA_TIME_FORMAT_PM         RTC_ALRMAR_PM         /*!< PM */
 382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_ALMB_MASK  ALARMB MASK
 387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMB_MASK_NONE              0x00000000U             /*!< No masks applied on Alarm B
 390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMB_MASK_DATEWEEKDAY       RTC_ALRMBR_MSK4         /*!< Date/day do not care in Ala
 391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMB_MASK_HOURS             RTC_ALRMBR_MSK3         /*!< Hours do not care in Alarm 
 392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMB_MASK_MINUTES           RTC_ALRMBR_MSK2         /*!< Minutes do not care in Alar
 393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMB_MASK_SECONDS           RTC_ALRMBR_MSK1         /*!< Seconds do not care in Alar
 394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMB_MASK_ALL               (RTC_ALRMBR_MSK4 | RTC_ALRMBR_MSK3 | RTC_ALRMBR_MSK2 | R
 395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_ALMB_TIME_FORMAT  ALARMB TIME FORMAT
 400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
ARM GAS  /tmp/cchhGUYN.s 			page 57


 402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMB_TIME_FORMAT_AM         0x00000000U           /*!< AM or 24-hour format */
 403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ALMB_TIME_FORMAT_PM         RTC_ALRMBR_PM         /*!< PM */
 404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_TIMESTAMP_EDGE  TIMESTAMP EDGE
 409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TIMESTAMP_EDGE_RISING       0x00000000U           /*!< RTC_TS input rising edge gene
 412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TIMESTAMP_EDGE_FALLING      RTC_CR_TSEDGE         /*!< RTC_TS input falling edge gen
 413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_TS_TIME_FORMAT  TIMESTAMP TIME FORMAT
 418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TS_TIME_FORMAT_AM           0x00000000U           /*!< AM or 24-hour format */
 421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TS_TIME_FORMAT_PM           RTC_TSTR_PM           /*!< PM */
 422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_TAMPER  TAMPER
 427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER1_SUPPORT)
 430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_1                    RTC_TAMPCR_TAMP1E /*!< RTC_TAMP1 input detection */
 431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER1_SUPPORT */
 432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER2_SUPPORT)
 433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_2                    RTC_TAMPCR_TAMP2E /*!< RTC_TAMP2 input detection */
 434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER2_SUPPORT */
 435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER3_SUPPORT)
 436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_3                    RTC_TAMPCR_TAMP3E /*!< RTC_TAMP3 input detection */
 437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER3_SUPPORT */
 438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_TAMPER_MASK  TAMPER MASK
 443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER1_SUPPORT)
 446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_MASK_TAMPER1         RTC_TAMPCR_TAMP1MF /*!< Tamper 1 event generates a trigg
 447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER1_SUPPORT */
 448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER2_SUPPORT)
 449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_MASK_TAMPER2         RTC_TAMPCR_TAMP2MF /*!< Tamper 2 event generates a trigg
 450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER2_SUPPORT */
 451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER3_SUPPORT)
 452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_MASK_TAMPER3         RTC_TAMPCR_TAMP3MF /*!< Tamper 3 event generates a trigg
 453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER3_SUPPORT */
 454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_TAMPER_NOERASE  TAMPER NO ERASE
ARM GAS  /tmp/cchhGUYN.s 			page 58


 459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER1_SUPPORT)
 462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_NOERASE_TAMPER1      RTC_TAMPCR_TAMP1NOERASE /*!< Tamper 1 event does not era
 463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER1_SUPPORT */
 464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER2_SUPPORT)
 465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_NOERASE_TAMPER2      RTC_TAMPCR_TAMP2NOERASE /*!< Tamper 2 event does not era
 466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER2_SUPPORT */
 467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER3_SUPPORT)
 468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_NOERASE_TAMPER3      RTC_TAMPCR_TAMP3NOERASE /*!< Tamper 3 event does not era
 469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER3_SUPPORT */
 470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPCR_TAMPPRCH)
 475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_TAMPER_DURATION  TAMPER DURATION
 476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_DURATION_1RTCCLK     0x00000000U                             /*!< Tamper pins
 479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_DURATION_2RTCCLK     RTC_TAMPCR_TAMPPRCH_0  /*!< Tamper pins are pre-charged 
 480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_DURATION_4RTCCLK     RTC_TAMPCR_TAMPPRCH_1  /*!< Tamper pins are pre-charged 
 481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_DURATION_8RTCCLK     RTC_TAMPCR_TAMPPRCH    /*!< Tamper pins are pre-charged 
 482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPCR_TAMPPRCH */
 486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPCR_TAMPFLT)
 488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_TAMPER_FILTER  TAMPER FILTER
 489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_FILTER_DISABLE       0x00000000U                              /*!< Tamper fil
 492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_FILTER_2SAMPLE       RTC_TAMPCR_TAMPFLT_0    /*!< Tamper is activated after 2
 493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_FILTER_4SAMPLE       RTC_TAMPCR_TAMPFLT_1    /*!< Tamper is activated after 4
 494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_FILTER_8SAMPLE       RTC_TAMPCR_TAMPFLT      /*!< Tamper is activated after 8
 495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPCR_TAMPFLT */
 499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPCR_TAMPFREQ)
 501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_TAMPER_SAMPLFREQDIV  TAMPER SAMPLING FREQUENCY DIVIDER
 502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_SAMPLFREQDIV_32768   0x00000000U                                             
 505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_SAMPLFREQDIV_16384   RTC_TAMPCR_TAMPFREQ_0                           /*!< Eac
 506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_SAMPLFREQDIV_8192    RTC_TAMPCR_TAMPFREQ_1                           /*!< Eac
 507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_SAMPLFREQDIV_4096    (RTC_TAMPCR_TAMPFREQ_1 | RTC_TAMPCR_TAMPFREQ_0) /*!< Eac
 508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_SAMPLFREQDIV_2048    RTC_TAMPCR_TAMPFREQ_2                           /*!< Eac
 509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_SAMPLFREQDIV_1024    (RTC_TAMPCR_TAMPFREQ_2 | RTC_TAMPCR_TAMPFREQ_0) /*!< Eac
 510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_SAMPLFREQDIV_512     (RTC_TAMPCR_TAMPFREQ_2 | RTC_TAMPCR_TAMPFREQ_1) /*!< Eac
 511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_SAMPLFREQDIV_256     RTC_TAMPCR_TAMPFREQ                             /*!< Eac
 512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPCR_TAMPFREQ */
ARM GAS  /tmp/cchhGUYN.s 			page 59


 516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_TAMPER_ACTIVELEVEL  TAMPER ACTIVE LEVEL
 518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER1_SUPPORT)
 521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_ACTIVELEVEL_TAMP1    RTC_TAMPCR_TAMP1TRG /*!< RTC_TAMP1 input falling edge (i
 522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER1_SUPPORT */
 523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER2_SUPPORT)
 524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_ACTIVELEVEL_TAMP2    RTC_TAMPCR_TAMP2TRG /*!< RTC_TAMP2 input falling edge (i
 525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER2_SUPPORT */
 526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPER3_SUPPORT)
 527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_TAMPER_ACTIVELEVEL_TAMP3    RTC_TAMPCR_TAMP3TRG /*!< RTC_TAMP3 input falling edge (i
 528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPER3_SUPPORT */
 529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_WAKEUPCLOCK_DIV  WAKEUP CLOCK DIV
 534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WAKEUPCLOCK_DIV_16          0x00000000U                           /*!< RTC/16 clock 
 537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WAKEUPCLOCK_DIV_8           RTC_CR_WUCKSEL_0                    /*!< RTC/8 clock is 
 538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WAKEUPCLOCK_DIV_4           RTC_CR_WUCKSEL_1                    /*!< RTC/4 clock is 
 539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WAKEUPCLOCK_DIV_2           (RTC_CR_WUCKSEL_1 | RTC_CR_WUCKSEL_0) /*!< RTC/2 clock i
 540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WAKEUPCLOCK_CKSPRE          RTC_CR_WUCKSEL_2                    /*!< ck_spre (usuall
 541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WAKEUPCLOCK_CKSPRE_WUT      (RTC_CR_WUCKSEL_2 | RTC_CR_WUCKSEL_1) /*!< ck_spre (usua
 542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_BACKUP_SUPPORT)
 547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_BKP  BACKUP
 548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_BKP_DR0                     (0x00000000U)
 551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_BKP_DR1                     (0x00000001U)
 552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_BKP_DR2                     (0x00000002U)
 553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_BKP_DR3                     (0x00000003U)
 554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_BKP_DR4                     (0x00000004U)
 555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_BACKUP_SUPPORT */
 559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_CALIB_OUTPUT  Calibration output
 561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CALIB_OUTPUT_NONE           (0x00000000U)                 /*!< Calibration output di
 564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CALIB_OUTPUT_1HZ            (RTC_CR_COE | RTC_CR_COSEL) /*!< Calibration output is 5
 565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CALIB_OUTPUT_512HZ          RTC_CR_COE                /*!< Calibration output is 1 H
 566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_CALIB_INSERTPULSE  Calibration pulse insertion
 571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
ARM GAS  /tmp/cchhGUYN.s 			page 60


 573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CALIB_INSERTPULSE_NONE      (0x00000000U)           /*!< No RTCCLK pulses are added 
 574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CALIB_INSERTPULSE_SET       RTC_CALR_CALP         /*!< One RTCCLK pulse is effective
 575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EC_CALIB_PERIOD  Calibration period
 580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CALIB_PERIOD_32SEC          (0x00000000U)           /*!< Use a 32-second calibration
 583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CALIB_PERIOD_16SEC          RTC_CALR_CALW16       /*!< Use a 16-second calibration c
 584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_CALIB_PERIOD_8SEC           RTC_CALR_CALW8        /*!< Use a 8-second calibration cy
 585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Exported macro ------------------------------------------------------------*/
 594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_Exported_Macros RTC Exported Macros
 595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EM_WRITE_READ Common Write and read registers Macros
 599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Write a value in RTC register
 604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __INSTANCE__ RTC Instance
 605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __REG__ Register to be written
 606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __VALUE__ Value to be written in the register
 607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Read a value in RTC register
 613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __INSTANCE__ RTC Instance
 614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __REG__ Register to be read
 615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Register value
 616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define LL_RTC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EM_Convert Convert helper Macros
 623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Helper macro to convert a value from 2 digit decimal format to BCD format
 628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __VALUE__ Byte to be converted
 629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Converted byte
ARM GAS  /tmp/cchhGUYN.s 			page 61


 630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define __LL_RTC_CONVERT_BIN2BCD(__VALUE__) (uint8_t)((((__VALUE__) / 10U) << 4U) | ((__VALUE__) % 
 632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Helper macro to convert a value from BCD format to 2 digit decimal format
 635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __VALUE__ BCD value to be converted
 636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Converted byte
 637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define __LL_RTC_CONVERT_BCD2BIN(__VALUE__) (uint8_t)((((uint8_t)((__VALUE__) & (uint8_t)0xF0U) >> 
 639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EM_Date Date helper Macros
 645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Helper macro to retrieve weekday.
 650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __RTC_DATE__ Date returned by @ref  LL_RTC_DATE_Get function.
 651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
 652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_MONDAY
 653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_TUESDAY
 654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_WEDNESDAY
 655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_THURSDAY
 656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_FRIDAY
 657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SATURDAY
 658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SUNDAY
 659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define __LL_RTC_GET_WEEKDAY(__RTC_DATE__) (((__RTC_DATE__) >> RTC_OFFSET_WEEKDAY) & 0x000000FFU)
 661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Helper macro to retrieve Year in BCD format
 664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __RTC_DATE__ Value returned by @ref  LL_RTC_DATE_Get
 665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Year in BCD format (0x00 . . . 0x99)
 666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define __LL_RTC_GET_YEAR(__RTC_DATE__) ((__RTC_DATE__) & 0x000000FFU)
 668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Helper macro to retrieve Month in BCD format
 671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __RTC_DATE__ Value returned by @ref  LL_RTC_DATE_Get
 672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
 673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JANUARY
 674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_FEBRUARY
 675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_MARCH
 676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_APRIL
 677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_MAY
 678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JUNE
 679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JULY
 680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_AUGUST
 681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_SEPTEMBER
 682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_OCTOBER
 683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_NOVEMBER
 684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_DECEMBER
 685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define __LL_RTC_GET_MONTH(__RTC_DATE__) (((__RTC_DATE__) >>RTC_OFFSET_MONTH) & 0x000000FFU)
ARM GAS  /tmp/cchhGUYN.s 			page 62


 687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Helper macro to retrieve Day in BCD format
 690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __RTC_DATE__ Value returned by @ref  LL_RTC_DATE_Get
 691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Day in BCD format (0x01 . . . 0x31)
 692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define __LL_RTC_GET_DAY(__RTC_DATE__) (((__RTC_DATE__) >>RTC_OFFSET_DAY) & 0x000000FFU)
 694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EM_Time Time helper Macros
 700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Helper macro to retrieve hour in BCD format
 705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __RTC_TIME__ RTC time returned by @ref LL_RTC_TIME_Get function
 706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Hours in BCD format (0x01. . .0x12 or between Min_Data=0x00 and Max_Data=0x23)
 707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define __LL_RTC_GET_HOUR(__RTC_TIME__) (((__RTC_TIME__) >> RTC_OFFSET_HOUR) & 0x000000FFU)
 709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Helper macro to retrieve minute in BCD format
 712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __RTC_TIME__ RTC time returned by @ref LL_RTC_TIME_Get function
 713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Minutes in BCD format (0x00. . .0x59)
 714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define __LL_RTC_GET_MINUTE(__RTC_TIME__) (((__RTC_TIME__) >> RTC_OFFSET_MINUTE) & 0x000000FFU)
 716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Helper macro to retrieve second in BCD format
 719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  __RTC_TIME__ RTC time returned by @ref LL_RTC_TIME_Get function
 720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Seconds in  format (0x00. . .0x59)
 721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #define __LL_RTC_GET_SECOND(__RTC_TIME__) ((__RTC_TIME__) & 0x000000FFU)
 723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
 730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /* Exported functions --------------------------------------------------------*/
 733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_Exported_Functions RTC Exported Functions
 734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EF_Configuration Configuration
 738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
 739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Hours format (24 hour/day or AM/PM hour format)
 743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
ARM GAS  /tmp/cchhGUYN.s 			page 63


 744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   It can be written in initialization mode only (@ref LL_RTC_EnableInitMode function)
 745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           FMT           LL_RTC_SetHourFormat
 746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  HourFormat This parameter can be one of the following values:
 748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
 749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_HOURFORMAT_AMPM
 750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
 753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Hours format (24 hour/day or AM/PM hour format)
 759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           FMT           LL_RTC_GetHourFormat
 760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
 762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
 763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_HOURFORMAT_AMPM
 764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
 766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Select the flag to be routed to RTC_ALARM output
 772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
 773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           OSEL          LL_RTC_SetAlarmOutEvent
 774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  AlarmOutput This parameter can be one of the following values:
 776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARMOUT_DISABLE
 777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARMOUT_ALMA
 778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARMOUT_ALMB
 779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARMOUT_WAKEUP
 780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_SetAlarmOutEvent(RTC_TypeDef *RTCx, uint32_t AlarmOutput)
 783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->CR, RTC_CR_OSEL, AlarmOutput);
 785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get the flag to be routed to RTC_ALARM output
 789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           OSEL          LL_RTC_GetAlarmOutEvent
 790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
 792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARMOUT_DISABLE
 793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARMOUT_ALMA
 794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARMOUT_ALMB
 795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARMOUT_WAKEUP
 796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_GetAlarmOutEvent(RTC_TypeDef *RTCx)
 798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_OSEL));
 800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
ARM GAS  /tmp/cchhGUYN.s 			page 64


 801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set RTC_ALARM output type (ALARM in push-pull or open-drain output)
 804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Used only when RTC_ALARM is mapped on PC13
 805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll OR        ALARMOUTTYPE  LL_RTC_SetAlarmOutputType
 806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Output This parameter can be one of the following values:
 808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARM_OUTPUTTYPE_OPENDRAIN
 809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARM_OUTPUTTYPE_PUSHPULL
 810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_SetAlarmOutputType(RTC_TypeDef *RTCx, uint32_t Output)
 813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->OR, RTC_OR_ALARMOUTTYPE, Output);
 815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get RTC_ALARM output type (ALARM in push-pull or open-drain output)
 819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   used only when RTC_ALARM is mapped on PC13
 820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll OR        ALARMOUTTYPE  LL_RTC_GetAlarmOutputType
 821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
 823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARM_OUTPUTTYPE_OPENDRAIN
 824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALARM_OUTPUTTYPE_PUSHPULL
 825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_GetAlarmOutputType(RTC_TypeDef *RTCx)
 827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->OR, RTC_OR_ALARMOUTTYPE));
 829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable initialization mode
 833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Initialization mode is used to program time and date register (RTC_TR and RTC_DR)
 834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         and prescaler register (RTC_PRER).
 835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         Counters are stopped and start counting from the new value when INIT is reset.
 836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
 837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
 841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   /* Set the Initialization mode */
 843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable initialization mode (Free running mode)
 848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
 849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
 853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   /* Exit Initialization mode */
 855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 65


 858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Output polarity (pin is low when ALRAF/ALRBF/WUTF is asserted)
 860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
 861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           POL           LL_RTC_SetOutputPolarity
 862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Polarity This parameter can be one of the following values:
 864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_OUTPUTPOLARITY_PIN_HIGH
 865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_OUTPUTPOLARITY_PIN_LOW
 866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_SetOutputPolarity(RTC_TypeDef *RTCx, uint32_t Polarity)
 869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->CR, RTC_CR_POL, Polarity);
 871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Output polarity
 875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           POL           LL_RTC_GetOutputPolarity
 876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
 878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_OUTPUTPOLARITY_PIN_HIGH
 879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_OUTPUTPOLARITY_PIN_LOW
 880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_GetOutputPolarity(RTC_TypeDef *RTCx)
 882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_POL));
 884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable Bypass the shadow registers
 888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
 889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           BYPSHAD       LL_RTC_EnableShadowRegBypass
 890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_EnableShadowRegBypass(RTC_TypeDef *RTCx)
 894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->CR, RTC_CR_BYPSHAD);
 896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable Bypass the shadow registers
 900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           BYPSHAD       LL_RTC_DisableShadowRegBypass
 901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_DisableShadowRegBypass(RTC_TypeDef *RTCx)
 905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->CR, RTC_CR_BYPSHAD);
 907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Check if Shadow registers bypass is enabled or not.
 911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           BYPSHAD       LL_RTC_IsShadowRegBypassEnabled
 912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval State of bit (1 or 0).
 914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
ARM GAS  /tmp/cchhGUYN.s 			page 66


 915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_IsShadowRegBypassEnabled(RTC_TypeDef *RTCx)
 916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return ((READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD)) ? 1UL : 0UL);
 918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable RTC_REFIN reference clock detection (50 or 60 Hz)
 922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
 923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   It can be written in initialization mode only (@ref LL_RTC_EnableInitMode function)
 924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           REFCKON       LL_RTC_EnableRefClock
 925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_EnableRefClock(RTC_TypeDef *RTCx)
 929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->CR, RTC_CR_REFCKON);
 931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable RTC_REFIN reference clock detection (50 or 60 Hz)
 935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
 936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   It can be written in initialization mode only (@ref LL_RTC_EnableInitMode function)
 937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           REFCKON       LL_RTC_DisableRefClock
 938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_DisableRefClock(RTC_TypeDef *RTCx)
 942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->CR, RTC_CR_REFCKON);
 944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Asynchronous prescaler factor
 948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll PRER         PREDIV_A      LL_RTC_SetAsynchPrescaler
 949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
 951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
 954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Synchronous prescaler factor
 960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll PRER         PREDIV_S      LL_RTC_SetSynchPrescaler
 961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
 963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
 966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Asynchronous prescaler factor
ARM GAS  /tmp/cchhGUYN.s 			page 67


 972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll PRER         PREDIV_A      LL_RTC_GetAsynchPrescaler
 973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data = 0 and Max_Data = 0x7F
 975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_GetAsynchPrescaler(RTC_TypeDef *RTCx)
 977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Synchronous prescaler factor
 983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll PRER         PREDIV_S      LL_RTC_GetSynchPrescaler
 984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data = 0 and Max_Data = 0x7FFF
 986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_GetSynchPrescaler(RTC_TypeDef *RTCx)
 988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
 989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_S));
 990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
 991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
 992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
 993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable the write protection for RTC registers.
 994:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
 995:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
 996:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
 997:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
 998:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
 999:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1000:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
1001:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1002:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1003:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1004:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable the write protection for RTC registers.
1005:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
1006:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1007:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1008:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1009:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
1010:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1011:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
1012:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
1013:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1014:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1015:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1016:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable RTC_OUT remap
1017:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll OR           OUT_RMP       LL_RTC_EnableOutRemap
1018:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1019:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1020:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1021:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_EnableOutRemap(RTC_TypeDef *RTCx)
1022:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1023:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->OR, RTC_OR_OUT_RMP);
1024:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1025:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1026:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1027:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable RTC_OUT remap
1028:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll OR           OUT_RMP       LL_RTC_DisableOutRemap
ARM GAS  /tmp/cchhGUYN.s 			page 68


1029:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1030:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1031:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1032:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_DisableOutRemap(RTC_TypeDef *RTCx)
1033:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1034:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->OR, RTC_OR_OUT_RMP);
1035:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1036:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1037:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1038:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
1039:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1040:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1041:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EF_Time Time
1042:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
1043:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1044:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1045:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1046:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set time format (AM/24-hour or PM notation)
1047:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1048:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   It can be written in initialization mode only (@ref LL_RTC_EnableInitMode function)
1049:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TR           PM            LL_RTC_TIME_SetFormat
1050:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1051:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  TimeFormat This parameter can be one of the following values:
1052:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TIME_FORMAT_AM_OR_24
1053:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TIME_FORMAT_PM
1054:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1055:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1056:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TIME_SetFormat(RTC_TypeDef *RTCx, uint32_t TimeFormat)
1057:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1058:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->TR, RTC_TR_PM, TimeFormat);
1059:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1060:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1061:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1062:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get time format (AM or PM notation)
1063:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note if shadow mode is disabled (BYPSHAD=0), need to check if RSF flag is set
1064:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       before reading this bit
1065:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note Read either RTC_SSR or RTC_TR locks the values in the higher-order calendar
1066:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       shadow registers until RTC_DR is read (LL_RTC_ReadReg(RTC, DR)).
1067:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TR           PM            LL_RTC_TIME_GetFormat
1068:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1069:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
1070:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TIME_FORMAT_AM_OR_24
1071:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TIME_FORMAT_PM
1072:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1073:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TIME_GetFormat(RTC_TypeDef *RTCx)
1074:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1075:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TR, RTC_TR_PM));
1076:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1077:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1078:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1079:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Hours in BCD format
1080:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1081:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   It can be written in initialization mode only (@ref LL_RTC_EnableInitMode function)
1082:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert hour from binary to BCD for
1083:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TR           HT            LL_RTC_TIME_SetHour\n
1084:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           HU            LL_RTC_TIME_SetHour
1085:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
ARM GAS  /tmp/cchhGUYN.s 			page 69


1086:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Hours Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Da
1087:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1088:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1089:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TIME_SetHour(RTC_TypeDef *RTCx, uint32_t Hours)
1090:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1091:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->TR, (RTC_TR_HT | RTC_TR_HU),
1092:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos)));
1093:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1094:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1095:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1096:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Hours in BCD format
1097:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note if shadow mode is disabled (BYPSHAD=0), need to check if RSF flag is set
1098:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       before reading this bit
1099:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note Read either RTC_SSR or RTC_TR locks the values in the higher-order calendar
1100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       shadow registers until RTC_DR is read (LL_RTC_ReadReg(RTC, DR)).
1101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert hour from BCD to
1102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       Binary format
1103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TR           HT            LL_RTC_TIME_GetHour\n
1104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           HU            LL_RTC_TIME_GetHour
1105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x2
1107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TIME_GetHour(RTC_TypeDef *RTCx)
1109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
1113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_H
1114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Minutes in BCD format
1118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   It can be written in initialization mode only (@ref LL_RTC_EnableInitMode function)
1120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Minutes from binary to BCD 
1121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TR           MNT           LL_RTC_TIME_SetMinute\n
1122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           MNU           LL_RTC_TIME_SetMinute
1123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
1125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TIME_SetMinute(RTC_TypeDef *RTCx, uint32_t Minutes)
1128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU),
1130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos))
1131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Minutes in BCD format
1135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note if shadow mode is disabled (BYPSHAD=0), need to check if RSF flag is set
1136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       before reading this bit
1137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note Read either RTC_SSR or RTC_TR locks the values in the higher-order calendar
1138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       shadow registers until RTC_DR is read (LL_RTC_ReadReg(RTC, DR)).
1139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert minute from BCD
1140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       to Binary format
1141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TR           MNT           LL_RTC_TIME_GetMinute\n
1142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           MNU           LL_RTC_TIME_GetMinute
ARM GAS  /tmp/cchhGUYN.s 			page 70


1143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x59
1145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TIME_GetMinute(RTC_TypeDef *RTCx)
1147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
1151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC_T
1152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Seconds in BCD format
1156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   It can be written in initialization mode only (@ref LL_RTC_EnableInitMode function)
1158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Seconds from binary to BCD 
1159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TR           ST            LL_RTC_TIME_SetSecond\n
1160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           SU            LL_RTC_TIME_SetSecond
1161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
1163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TIME_SetSecond(RTC_TypeDef *RTCx, uint32_t Seconds)
1166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->TR, (RTC_TR_ST | RTC_TR_SU),
1168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos)));
1169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Seconds in BCD format
1173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note if shadow mode is disabled (BYPSHAD=0), need to check if RSF flag is set
1174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       before reading this bit
1175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note Read either RTC_SSR or RTC_TR locks the values in the higher-order calendar
1176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       shadow registers until RTC_DR is read (LL_RTC_ReadReg(RTC, DR)).
1177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Seconds from BCD
1178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       to Binary format
1179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TR           ST            LL_RTC_TIME_GetSecond\n
1180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           SU            LL_RTC_TIME_GetSecond
1181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x59
1183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
1185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
1189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_TR_ST) >> RTC_TR_ST_Pos) << 4U) | ((temp & RTC_TR_SU) >> RTC_TR_S
1190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set time (hour, minute and second) in BCD format
1194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   It can be written in initialization mode only (@ref LL_RTC_EnableInitMode function)
1196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note TimeFormat and Hours should follow the same format
1197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TR           PM            LL_RTC_TIME_Config\n
1198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           HT            LL_RTC_TIME_Config\n
1199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           HU            LL_RTC_TIME_Config\n
ARM GAS  /tmp/cchhGUYN.s 			page 71


1200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           MNT           LL_RTC_TIME_Config\n
1201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           MNU           LL_RTC_TIME_Config\n
1202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           ST            LL_RTC_TIME_Config\n
1203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           SU            LL_RTC_TIME_Config
1204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Format12_24 This parameter can be one of the following values:
1206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TIME_FORMAT_AM_OR_24
1207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TIME_FORMAT_PM
1208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Hours Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Da
1209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
1210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
1211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, ui
1214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = Format12_24                                                                               
1218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****          (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
1219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****          (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
1220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****          (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
1221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | R
1222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get time (hour, minute and second) in BCD format
1226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note if shadow mode is disabled (BYPSHAD=0), need to check if RSF flag is set
1227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       before reading this bit
1228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note Read either RTC_SSR or RTC_TR locks the values in the higher-order calendar
1229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       shadow registers until RTC_DR is read (LL_RTC_ReadReg(RTC, DR)).
1230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macros __LL_RTC_GET_HOUR, __LL_RTC_GET_MINUTE and __LL_RTC_GET_SECOND
1231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       are available to get independently each parameter.
1232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TR           HT            LL_RTC_TIME_Get\n
1233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           HU            LL_RTC_TIME_Get\n
1234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           MNT           LL_RTC_TIME_Get\n
1235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           MNU           LL_RTC_TIME_Get\n
1236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           ST            LL_RTC_TIME_Get\n
1237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TR           SU            LL_RTC_TIME_Get
1238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Combination of hours, minutes and seconds (Format: 0x00HHMMSS).
1240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TIME_Get(RTC_TypeDef *RTCx)
1242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_S
1246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR
1247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                     (((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC
1248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                     ((((temp & RTC_TR_ST) >> RTC_TR_ST_Pos) << 4U) | ((temp & RTC_TR_SU) >> RTC_TR_
1249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Memorize whether the daylight saving time change has been performed
1253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           BKP           LL_RTC_TIME_EnableDayLightStore
1255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
ARM GAS  /tmp/cchhGUYN.s 			page 72


1257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TIME_EnableDayLightStore(RTC_TypeDef *RTCx)
1259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->CR, RTC_CR_BKP);
1261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable memorization whether the daylight saving time change has been performed.
1265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           BKP           LL_RTC_TIME_DisableDayLightStore
1267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TIME_DisableDayLightStore(RTC_TypeDef *RTCx)
1271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->CR, RTC_CR_BKP);
1273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Check if RTC Day Light Saving stored operation has been enabled or not
1277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           BKP           LL_RTC_TIME_IsDayLightStoreEnabled
1278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval State of bit (1 or 0).
1280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TIME_IsDayLightStoreEnabled(RTC_TypeDef *RTCx)
1282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return ((READ_BIT(RTCx->CR, RTC_CR_BKP) == (RTC_CR_BKP)) ? 1UL : 0UL);
1284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Subtract 1 hour (winter time change)
1288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           SUB1H         LL_RTC_TIME_DecHour
1290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TIME_DecHour(RTC_TypeDef *RTCx)
1294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->CR, RTC_CR_SUB1H);
1296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Add 1 hour (summer time change)
1300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           ADD1H         LL_RTC_TIME_IncHour
1302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TIME_IncHour(RTC_TypeDef *RTCx)
1306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->CR, RTC_CR_ADD1H);
1308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Sub second value in the synchronous prescaler counter.
1312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note  You can use both SubSeconds value and SecondFraction (PREDIV_S through
1313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *        LL_RTC_GetSynchPrescaler function) terms returned to convert Calendar
ARM GAS  /tmp/cchhGUYN.s 			page 73


1314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *        SubSeconds value in second fraction ratio with time unit following
1315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *        generic formula:
1316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *          ==> Seconds fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1
1317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *        This conversion can be performed only if no shift operation is pending
1318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *        (ie. SHFP=0) when PREDIV_S >= SS.
1319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
1320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Sub second value (number between 0 and 65535)
1322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
1324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
1326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Synchronize to a remote clock with a high degree of precision.
1330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   This operation effectively subtracts from (delays) or advance the clock of a fraction o
1331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   When REFCKON is set, firmware must not write to Shift control register.
1333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll SHIFTR       ADD1S         LL_RTC_TIME_Synchronize\n
1334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         SHIFTR       SUBFS         LL_RTC_TIME_Synchronize
1335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  ShiftSecond This parameter can be one of the following values:
1337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_SHIFT_SECOND_DELAY
1338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_SHIFT_SECOND_ADVANCE
1339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Fraction Number of Seconds Fractions (any value from 0 to 0x7FFF)
1340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TIME_Synchronize(RTC_TypeDef *RTCx, uint32_t ShiftSecond, uint32_t Frac
1343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   WRITE_REG(RTCx->SHIFTR, ShiftSecond | Fraction);
1345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
1349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EF_Date Date
1352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
1353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Year in BCD format
1357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Year from binary to BCD for
1358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll DR           YT            LL_RTC_DATE_SetYear\n
1359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           YU            LL_RTC_DATE_SetYear
1360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
1362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_DATE_SetYear(RTC_TypeDef *RTCx, uint32_t Year)
1365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->DR, (RTC_DR_YT | RTC_DR_YU),
1367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos)));
1368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
ARM GAS  /tmp/cchhGUYN.s 			page 74


1371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Year in BCD format
1372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note if shadow mode is disabled (BYPSHAD=0), need to check if RSF flag is set
1373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       before reading this bit
1374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Year from BCD to Binary for
1375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll DR           YT            LL_RTC_DATE_GetYear\n
1376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           YU            LL_RTC_DATE_GetYear
1377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x99
1379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_DATE_GetYear(RTC_TypeDef *RTCx)
1381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
1385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_Y
1386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Week day
1390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll DR           WDU           LL_RTC_DATE_SetWeekDay
1391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  WeekDay This parameter can be one of the following values:
1393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_MONDAY
1394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_TUESDAY
1395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_WEDNESDAY
1396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_THURSDAY
1397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_FRIDAY
1398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SATURDAY
1399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SUNDAY
1400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_DATE_SetWeekDay(RTC_TypeDef *RTCx, uint32_t WeekDay)
1403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->DR, RTC_DR_WDU, WeekDay << RTC_DR_WDU_Pos);
1405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Week day
1409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note if shadow mode is disabled (BYPSHAD=0), need to check if RSF flag is set
1410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       before reading this bit
1411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll DR           WDU           LL_RTC_DATE_GetWeekDay
1412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
1414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_MONDAY
1415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_TUESDAY
1416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_WEDNESDAY
1417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_THURSDAY
1418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_FRIDAY
1419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SATURDAY
1420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SUNDAY
1421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_DATE_GetWeekDay(RTC_TypeDef *RTCx)
1423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->DR, RTC_DR_WDU) >> RTC_DR_WDU_Pos);
1425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
ARM GAS  /tmp/cchhGUYN.s 			page 75


1428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Month in BCD format
1429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Month from binary to BCD fo
1430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll DR           MT            LL_RTC_DATE_SetMonth\n
1431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           MU            LL_RTC_DATE_SetMonth
1432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Month This parameter can be one of the following values:
1434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JANUARY
1435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_FEBRUARY
1436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_MARCH
1437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_APRIL
1438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_MAY
1439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JUNE
1440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JULY
1441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_AUGUST
1442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_SEPTEMBER
1443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_OCTOBER
1444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_NOVEMBER
1445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_DECEMBER
1446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_DATE_SetMonth(RTC_TypeDef *RTCx, uint32_t Month)
1449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->DR, (RTC_DR_MT | RTC_DR_MU),
1451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)));
1452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Month in BCD format
1456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note if shadow mode is disabled (BYPSHAD=0), need to check if RSF flag is set
1457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       before reading this bit
1458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Month from BCD to Binary fo
1459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll DR           MT            LL_RTC_DATE_GetMonth\n
1460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           MU            LL_RTC_DATE_GetMonth
1461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
1463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JANUARY
1464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_FEBRUARY
1465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_MARCH
1466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_APRIL
1467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_MAY
1468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JUNE
1469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JULY
1470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_AUGUST
1471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_SEPTEMBER
1472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_OCTOBER
1473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_NOVEMBER
1474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_DECEMBER
1475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_DATE_GetMonth(RTC_TypeDef *RTCx)
1477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
1481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_DR_MT) >> RTC_DR_MT_Pos) << 4U) | ((temp & RTC_DR_MU) >> RTC_DR_M
1482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
ARM GAS  /tmp/cchhGUYN.s 			page 76


1485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Day in BCD format
1486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Day from binary to BCD form
1487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll DR           DT            LL_RTC_DATE_SetDay\n
1488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           DU            LL_RTC_DATE_SetDay
1489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Day Value between Min_Data=0x01 and Max_Data=0x31
1491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_DATE_SetDay(RTC_TypeDef *RTCx, uint32_t Day)
1494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->DR, (RTC_DR_DT | RTC_DR_DU),
1496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos)));
1497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Day in BCD format
1501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note if shadow mode is disabled (BYPSHAD=0), need to check if RSF flag is set
1502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       before reading this bit
1503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Day from BCD to Binary form
1504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll DR           DT            LL_RTC_DATE_GetDay\n
1505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           DU            LL_RTC_DATE_GetDay
1506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x01 and Max_Data=0x31
1508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
1510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
1514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_DR_DT) >> RTC_DR_DT_Pos) << 4U) | ((temp & RTC_DR_DU) >> RTC_DR_D
1515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set date (WeekDay, Day, Month and Year) in BCD format
1519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll DR           WDU           LL_RTC_DATE_Config\n
1520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           MT            LL_RTC_DATE_Config\n
1521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           MU            LL_RTC_DATE_Config\n
1522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           DT            LL_RTC_DATE_Config\n
1523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           DU            LL_RTC_DATE_Config\n
1524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           YT            LL_RTC_DATE_Config\n
1525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           YU            LL_RTC_DATE_Config
1526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  WeekDay This parameter can be one of the following values:
1528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_MONDAY
1529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_TUESDAY
1530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_WEDNESDAY
1531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_THURSDAY
1532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_FRIDAY
1533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SATURDAY
1534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SUNDAY
1535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Day Value between Min_Data=0x01 and Max_Data=0x31
1536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Month This parameter can be one of the following values:
1537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JANUARY
1538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_FEBRUARY
1539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_MARCH
1540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_APRIL
1541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_MAY
ARM GAS  /tmp/cchhGUYN.s 			page 77


1542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JUNE
1543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JULY
1544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_AUGUST
1545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_SEPTEMBER
1546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_OCTOBER
1547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_NOVEMBER
1548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_DECEMBER
1549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
1550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t
1553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
1557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****          (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
1558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****          (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
1559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****          (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
1560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RT
1562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get date (WeekDay, Day, Month and Year) in BCD format
1566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note if shadow mode is disabled (BYPSHAD=0), need to check if RSF flag is set
1567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       before reading this bit
1568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macros __LL_RTC_GET_WEEKDAY, __LL_RTC_GET_YEAR, __LL_RTC_GET_MONTH,
1569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * and __LL_RTC_GET_DAY are available to get independently each parameter.
1570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll DR           WDU           LL_RTC_DATE_Get\n
1571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           MT            LL_RTC_DATE_Get\n
1572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           MU            LL_RTC_DATE_Get\n
1573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           DT            LL_RTC_DATE_Get\n
1574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           DU            LL_RTC_DATE_Get\n
1575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           YT            LL_RTC_DATE_Get\n
1576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         DR           YU            LL_RTC_DATE_Get
1577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Combination of WeekDay, Day, Month and Year (Format: 0xWWDDMMYY).
1579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_DATE_Get(RTC_TypeDef *RTCx)
1581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT
1585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_DR_WDU) >> RTC_DR_WDU_Pos) << RTC_OFFSET_WEEKDAY) | \
1586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                     (((((temp & RTC_DR_DT) >> RTC_DR_DT_Pos) << 4U) | ((temp & RTC_DR_DU) >> RTC_DR
1587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                     (((((temp & RTC_DR_MT) >> RTC_DR_MT_Pos) << 4U) | ((temp & RTC_DR_MU) >> RTC_DR
1588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                     ((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_
1589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
1593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EF_ALARMA ALARMA
1596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
1597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 78


1599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable Alarm A
1601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           ALRAE         LL_RTC_ALMA_Enable
1603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_Enable(RTC_TypeDef *RTCx)
1607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->CR, RTC_CR_ALRAE);
1609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable Alarm A
1613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           ALRAE         LL_RTC_ALMA_Disable
1615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_Disable(RTC_TypeDef *RTCx)
1619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
1621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Specify the Alarm A masks.
1625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       MSK4          LL_RTC_ALMA_SetMask\n
1626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MSK3          LL_RTC_ALMA_SetMask\n
1627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MSK2          LL_RTC_ALMA_SetMask\n
1628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MSK1          LL_RTC_ALMA_SetMask
1629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Mask This parameter can be a combination of the following values:
1631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_NONE
1632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_DATEWEEKDAY
1633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_HOURS
1634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_MINUTES
1635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_SECONDS
1636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_ALL
1637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_SetMask(RTC_TypeDef *RTCx, uint32_t Mask)
1640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1, M
1642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get the Alarm A masks.
1646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       MSK4          LL_RTC_ALMA_GetMask\n
1647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MSK3          LL_RTC_ALMA_GetMask\n
1648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MSK2          LL_RTC_ALMA_GetMask\n
1649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MSK1          LL_RTC_ALMA_GetMask
1650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be can be a combination of the following values:
1652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_NONE
1653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_DATEWEEKDAY
1654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_HOURS
1655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_MINUTES
ARM GAS  /tmp/cchhGUYN.s 			page 79


1656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_SECONDS
1657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_MASK_ALL
1658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMA_GetMask(RTC_TypeDef *RTCx)
1660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RT
1662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable AlarmA Week day selection (DU[3:0] represents the week day. DT[1:0] is do not ca
1666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       WDSEL         LL_RTC_ALMA_EnableWeekday
1667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_EnableWeekday(RTC_TypeDef *RTCx)
1671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
1673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable AlarmA Week day selection (DU[3:0] represents the date )
1677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       WDSEL         LL_RTC_ALMA_DisableWeekday
1678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_DisableWeekday(RTC_TypeDef *RTCx)
1682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
1684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM A Day in BCD format
1688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Day from binary to BCD form
1689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       DT            LL_RTC_ALMA_SetDay\n
1690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       DU            LL_RTC_ALMA_SetDay
1691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Day Value between Min_Data=0x01 and Max_Data=0x31
1693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_SetDay(RTC_TypeDef *RTCx, uint32_t Day)
1696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
1698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Day & 0xF0U) << (RTC_ALRMAR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_ALRMAR_DU_Pos)));
1699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM A Day in BCD format
1703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Day from BCD to Binary form
1704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       DT            LL_RTC_ALMA_GetDay\n
1705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       DU            LL_RTC_ALMA_GetDay
1706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x01 and Max_Data=0x31
1708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMA_GetDay(RTC_TypeDef *RTCx)
1710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 80


1713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU));
1714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_ALRMAR_DT) >> RTC_ALRMAR_DT_Pos) << 4U) | ((temp & RTC_ALRMAR_DU)
1715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM A Weekday
1719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       DU            LL_RTC_ALMA_SetWeekDay
1720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  WeekDay This parameter can be one of the following values:
1722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_MONDAY
1723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_TUESDAY
1724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_WEDNESDAY
1725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_THURSDAY
1726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_FRIDAY
1727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SATURDAY
1728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SUNDAY
1729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_SetWeekDay(RTC_TypeDef *RTCx, uint32_t WeekDay)
1732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_DU, WeekDay << RTC_ALRMAR_DU_Pos);
1734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM A Weekday
1738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       DU            LL_RTC_ALMA_GetWeekDay
1739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
1741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_MONDAY
1742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_TUESDAY
1743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_WEDNESDAY
1744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_THURSDAY
1745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_FRIDAY
1746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SATURDAY
1747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SUNDAY
1748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMA_GetWeekDay(RTC_TypeDef *RTCx)
1750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->ALRMAR, RTC_ALRMAR_DU) >> RTC_ALRMAR_DU_Pos);
1752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Alarm A time format (AM/24-hour or PM notation)
1756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       PM            LL_RTC_ALMA_SetTimeFormat
1757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  TimeFormat This parameter can be one of the following values:
1759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_TIME_FORMAT_AM
1760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_TIME_FORMAT_PM
1761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_SetTimeFormat(RTC_TypeDef *RTCx, uint32_t TimeFormat)
1764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM, TimeFormat);
1766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Alarm A time format (AM or PM notation)
ARM GAS  /tmp/cchhGUYN.s 			page 81


1770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       PM            LL_RTC_ALMA_GetTimeFormat
1771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
1773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_TIME_FORMAT_AM
1774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_TIME_FORMAT_PM
1775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMA_GetTimeFormat(RTC_TypeDef *RTCx)
1777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->ALRMAR, RTC_ALRMAR_PM));
1779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM A Hours in BCD format
1783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Hours from binary to BCD fo
1784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       HT            LL_RTC_ALMA_SetHour\n
1785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       HU            LL_RTC_ALMA_SetHour
1786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Hours Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Da
1788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_SetHour(RTC_TypeDef *RTCx, uint32_t Hours)
1791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_HT | RTC_ALRMAR_HU),
1793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos
1794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM A Hours in BCD format
1798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Hours from BCD to Binary fo
1799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       HT            LL_RTC_ALMA_GetHour\n
1800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       HU            LL_RTC_ALMA_GetHour
1801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x2
1803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMA_GetHour(RTC_TypeDef *RTCx)
1805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->ALRMAR, (RTC_ALRMAR_HT | RTC_ALRMAR_HU));
1809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_ALRMAR_HT) >> RTC_ALRMAR_HT_Pos) << 4U) | ((temp & RTC_ALRMAR_HU)
1810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM A Minutes in BCD format
1814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Minutes from binary to BCD 
1815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       MNT           LL_RTC_ALMA_SetMinute\n
1816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MNU           LL_RTC_ALMA_SetMinute
1817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
1819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_SetMinute(RTC_TypeDef *RTCx, uint32_t Minutes)
1822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU),
1824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Minutes & 0xF0U) << (RTC_ALRMAR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_ALRMAR_M
1825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
ARM GAS  /tmp/cchhGUYN.s 			page 82


1827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM A Minutes in BCD format
1829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Minutes from BCD to Binary 
1830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       MNT           LL_RTC_ALMA_GetMinute\n
1831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MNU           LL_RTC_ALMA_GetMinute
1832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x59
1834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMA_GetMinute(RTC_TypeDef *RTCx)
1836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->ALRMAR, (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU));
1840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_ALRMAR_MNT) >> RTC_ALRMAR_MNT_Pos) << 4U) | ((temp & RTC_ALRMAR_M
1841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM A Seconds in BCD format
1845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Seconds from binary to BCD 
1846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       ST            LL_RTC_ALMA_SetSecond\n
1847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       SU            LL_RTC_ALMA_SetSecond
1848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
1850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_SetSecond(RTC_TypeDef *RTCx, uint32_t Seconds)
1853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_ST | RTC_ALRMAR_SU),
1855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Seconds & 0xF0U) << (RTC_ALRMAR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_ALRMAR_SU
1856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM A Seconds in BCD format
1860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Seconds from BCD to Binary 
1861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       ST            LL_RTC_ALMA_GetSecond\n
1862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       SU            LL_RTC_ALMA_GetSecond
1863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x59
1865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMA_GetSecond(RTC_TypeDef *RTCx)
1867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->ALRMAR, (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
1871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_ALRMAR_ST) >> RTC_ALRMAR_ST_Pos) << 4U) | ((temp & RTC_ALRMAR_SU)
1872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Alarm A Time (hour, minute and second) in BCD format
1876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       PM            LL_RTC_ALMA_ConfigTime\n
1877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       HT            LL_RTC_ALMA_ConfigTime\n
1878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       HU            LL_RTC_ALMA_ConfigTime\n
1879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MNT           LL_RTC_ALMA_ConfigTime\n
1880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MNU           LL_RTC_ALMA_ConfigTime\n
1881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       ST            LL_RTC_ALMA_ConfigTime\n
1882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       SU            LL_RTC_ALMA_ConfigTime
1883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
ARM GAS  /tmp/cchhGUYN.s 			page 83


1884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Format12_24 This parameter can be one of the following values:
1885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_TIME_FORMAT_AM
1886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMA_TIME_FORMAT_PM
1887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Hours Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Da
1888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
1889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
1890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_ConfigTime(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours
1893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
1895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALR
1897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****          (((Minutes & 0xF0U) << (RTC_ALRMAR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_ALRMAR_MNU_P
1898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****          (((Seconds & 0xF0U) << (RTC_ALRMAR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_ALRMAR_SU_Pos
1899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALR
1901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Alarm B Time (hour, minute and second) in BCD format
1905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macros __LL_RTC_GET_HOUR, __LL_RTC_GET_MINUTE and __LL_RTC_GET_SECOND
1906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * are available to get independently each parameter.
1907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMAR       HT            LL_RTC_ALMA_GetTime\n
1908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       HU            LL_RTC_ALMA_GetTime\n
1909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MNT           LL_RTC_ALMA_GetTime\n
1910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       MNU           LL_RTC_ALMA_GetTime\n
1911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       ST            LL_RTC_ALMA_GetTime\n
1912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMAR       SU            LL_RTC_ALMA_GetTime
1913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Combination of hours, minutes and seconds.
1915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMA_GetTime(RTC_TypeDef *RTCx)
1917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((LL_RTC_ALMA_GetHour(RTCx) << RTC_OFFSET_HOUR) | (LL_RTC_ALMA_GetMinute(RTCx) <
1919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Alarm A Mask the most-significant bits starting at this bit
1923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note This register can be written only when ALRAE is reset in RTC_CR register,
1924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       or in initialization mode.
1925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMASSR     MASKSS        LL_RTC_ALMA_SetSubSecondMask
1926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Mask Value between Min_Data=0x00 and Max_Data=0xF
1928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_SetSubSecondMask(RTC_TypeDef *RTCx, uint32_t Mask)
1931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMASSR, RTC_ALRMASSR_MASKSS, Mask << RTC_ALRMASSR_MASKSS_Pos);
1933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1934:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1935:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1936:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Alarm A Mask the most-significant bits starting at this bit
1937:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMASSR     MASKSS        LL_RTC_ALMA_GetSubSecondMask
1938:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1939:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xF
1940:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
ARM GAS  /tmp/cchhGUYN.s 			page 84


1941:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMA_GetSubSecondMask(RTC_TypeDef *RTCx)
1942:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1943:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->ALRMASSR, RTC_ALRMASSR_MASKSS) >> RTC_ALRMASSR_MASKSS_Pos);
1944:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1945:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1946:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1947:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Alarm A Sub seconds value
1948:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMASSR     SS            LL_RTC_ALMA_SetSubSecond
1949:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1950:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Subsecond Value between Min_Data=0x00 and Max_Data=0x7FFF
1951:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1952:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1953:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMA_SetSubSecond(RTC_TypeDef *RTCx, uint32_t Subsecond)
1954:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1955:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMASSR, RTC_ALRMASSR_SS, Subsecond);
1956:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1957:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1958:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1959:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Alarm A Sub seconds value
1960:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMASSR     SS            LL_RTC_ALMA_GetSubSecond
1961:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1962:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7FFF
1963:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1964:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMA_GetSubSecond(RTC_TypeDef *RTCx)
1965:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1966:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->ALRMASSR, RTC_ALRMASSR_SS));
1967:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1968:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1969:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1970:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
1971:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1972:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1973:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EF_ALARMB ALARMB
1974:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
1975:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1976:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1977:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1978:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable Alarm B
1979:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1980:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           ALRBE         LL_RTC_ALMB_Enable
1981:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1982:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1983:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1984:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_Enable(RTC_TypeDef *RTCx)
1985:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
1986:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->CR, RTC_CR_ALRBE);
1987:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
1988:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
1989:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
1990:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable Alarm B
1991:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
1992:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           ALRBE         LL_RTC_ALMB_Disable
1993:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
1994:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
1995:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
1996:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_Disable(RTC_TypeDef *RTCx)
1997:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
ARM GAS  /tmp/cchhGUYN.s 			page 85


1998:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->CR, RTC_CR_ALRBE);
1999:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2000:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2001:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2002:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Specify the Alarm B masks.
2003:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       MSK4          LL_RTC_ALMB_SetMask\n
2004:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MSK3          LL_RTC_ALMB_SetMask\n
2005:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MSK2          LL_RTC_ALMB_SetMask\n
2006:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MSK1          LL_RTC_ALMB_SetMask
2007:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2008:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Mask This parameter can be a combination of the following values:
2009:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_NONE
2010:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_DATEWEEKDAY
2011:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_HOURS
2012:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_MINUTES
2013:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_SECONDS
2014:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_ALL
2015:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2016:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2017:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_SetMask(RTC_TypeDef *RTCx, uint32_t Mask)
2018:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2019:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMBR, RTC_ALRMBR_MSK4 | RTC_ALRMBR_MSK3 | RTC_ALRMBR_MSK2 | RTC_ALRMBR_MSK1, M
2020:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2021:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2022:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2023:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get the Alarm B masks.
2024:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       MSK4          LL_RTC_ALMB_GetMask\n
2025:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MSK3          LL_RTC_ALMB_GetMask\n
2026:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MSK2          LL_RTC_ALMB_GetMask\n
2027:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MSK1          LL_RTC_ALMB_GetMask
2028:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2029:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be can be a combination of the following values:
2030:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_NONE
2031:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_DATEWEEKDAY
2032:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_HOURS
2033:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_MINUTES
2034:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_SECONDS
2035:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_MASK_ALL
2036:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2037:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMB_GetMask(RTC_TypeDef *RTCx)
2038:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2039:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->ALRMBR, RTC_ALRMBR_MSK4 | RTC_ALRMBR_MSK3 | RTC_ALRMBR_MSK2 | RT
2040:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2041:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2042:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2043:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable AlarmB Week day selection (DU[3:0] represents the week day. DT[1:0] is do not ca
2044:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       WDSEL         LL_RTC_ALMB_EnableWeekday
2045:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2046:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2047:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2048:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_EnableWeekday(RTC_TypeDef *RTCx)
2049:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2050:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->ALRMBR, RTC_ALRMBR_WDSEL);
2051:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2052:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2053:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2054:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable AlarmB Week day selection (DU[3:0] represents the date )
ARM GAS  /tmp/cchhGUYN.s 			page 86


2055:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       WDSEL         LL_RTC_ALMB_DisableWeekday
2056:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2057:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2058:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2059:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_DisableWeekday(RTC_TypeDef *RTCx)
2060:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2061:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->ALRMBR, RTC_ALRMBR_WDSEL);
2062:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2063:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2064:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2065:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM B Day in BCD format
2066:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Day from binary to BCD form
2067:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       DT            LL_RTC_ALMB_SetDay\n
2068:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       DU            LL_RTC_ALMB_SetDay
2069:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2070:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Day Value between Min_Data=0x01 and Max_Data=0x31
2071:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2072:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2073:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_SetDay(RTC_TypeDef *RTCx, uint32_t Day)
2074:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2075:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMBR, (RTC_ALRMBR_DT | RTC_ALRMBR_DU),
2076:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Day & 0xF0U) << (RTC_ALRMBR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_ALRMBR_DU_Pos)));
2077:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2078:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2079:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2080:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM B Day in BCD format
2081:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Day from BCD to Binary form
2082:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       DT            LL_RTC_ALMB_GetDay\n
2083:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       DU            LL_RTC_ALMB_GetDay
2084:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2085:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x01 and Max_Data=0x31
2086:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2087:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMB_GetDay(RTC_TypeDef *RTCx)
2088:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2089:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
2090:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2091:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->ALRMBR, (RTC_ALRMBR_DT | RTC_ALRMBR_DU));
2092:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_ALRMBR_DT) >> RTC_ALRMBR_DT_Pos) << 4U) | ((temp & RTC_ALRMBR_DU)
2093:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2094:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2095:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2096:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM B Weekday
2097:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       DU            LL_RTC_ALMB_SetWeekDay
2098:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2099:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  WeekDay This parameter can be one of the following values:
2100:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_MONDAY
2101:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_TUESDAY
2102:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_WEDNESDAY
2103:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_THURSDAY
2104:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_FRIDAY
2105:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SATURDAY
2106:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SUNDAY
2107:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2108:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2109:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_SetWeekDay(RTC_TypeDef *RTCx, uint32_t WeekDay)
2110:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2111:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMBR, RTC_ALRMBR_DU, WeekDay << RTC_ALRMBR_DU_Pos);
ARM GAS  /tmp/cchhGUYN.s 			page 87


2112:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2113:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2114:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2115:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM B Weekday
2116:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       DU            LL_RTC_ALMB_GetWeekDay
2117:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2118:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
2119:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_MONDAY
2120:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_TUESDAY
2121:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_WEDNESDAY
2122:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_THURSDAY
2123:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_FRIDAY
2124:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SATURDAY
2125:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SUNDAY
2126:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2127:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMB_GetWeekDay(RTC_TypeDef *RTCx)
2128:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2129:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->ALRMBR, RTC_ALRMBR_DU) >> RTC_ALRMBR_DU_Pos);
2130:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2131:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2132:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2133:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM B time format (AM/24-hour or PM notation)
2134:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       PM            LL_RTC_ALMB_SetTimeFormat
2135:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2136:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  TimeFormat This parameter can be one of the following values:
2137:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_TIME_FORMAT_AM
2138:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_TIME_FORMAT_PM
2139:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2140:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2141:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_SetTimeFormat(RTC_TypeDef *RTCx, uint32_t TimeFormat)
2142:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2143:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMBR, RTC_ALRMBR_PM, TimeFormat);
2144:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2145:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2146:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2147:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM B time format (AM or PM notation)
2148:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       PM            LL_RTC_ALMB_GetTimeFormat
2149:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2150:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
2151:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_TIME_FORMAT_AM
2152:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_TIME_FORMAT_PM
2153:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2154:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMB_GetTimeFormat(RTC_TypeDef *RTCx)
2155:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2156:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->ALRMBR, RTC_ALRMBR_PM));
2157:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2158:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2159:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2160:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM B Hours in BCD format
2161:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Hours from binary to BCD fo
2162:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       HT            LL_RTC_ALMB_SetHour\n
2163:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       HU            LL_RTC_ALMB_SetHour
2164:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2165:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Hours Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Da
2166:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2167:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2168:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_SetHour(RTC_TypeDef *RTCx, uint32_t Hours)
ARM GAS  /tmp/cchhGUYN.s 			page 88


2169:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2170:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMBR, (RTC_ALRMBR_HT | RTC_ALRMBR_HU),
2171:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Hours & 0xF0U) << (RTC_ALRMBR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMBR_HU_Pos
2172:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2173:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2174:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2175:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM B Hours in BCD format
2176:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Hours from BCD to Binary fo
2177:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       HT            LL_RTC_ALMB_GetHour\n
2178:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       HU            LL_RTC_ALMB_GetHour
2179:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2180:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x2
2181:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2182:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMB_GetHour(RTC_TypeDef *RTCx)
2183:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2184:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
2185:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2186:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->ALRMBR, (RTC_ALRMBR_HT | RTC_ALRMBR_HU));
2187:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_ALRMBR_HT) >> RTC_ALRMBR_HT_Pos) << 4U) | ((temp & RTC_ALRMBR_HU)
2188:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2189:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2190:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2191:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM B Minutes in BCD format
2192:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Minutes from binary to BCD 
2193:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       MNT           LL_RTC_ALMB_SetMinute\n
2194:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MNU           LL_RTC_ALMB_SetMinute
2195:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2196:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Minutes between Min_Data=0x00 and Max_Data=0x59
2197:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2198:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2199:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_SetMinute(RTC_TypeDef *RTCx, uint32_t Minutes)
2200:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2201:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMBR, (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU),
2202:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Minutes & 0xF0U) << (RTC_ALRMBR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_ALRMBR_M
2203:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2204:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2205:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2206:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM B Minutes in BCD format
2207:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Minutes from BCD to Binary 
2208:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       MNT           LL_RTC_ALMB_GetMinute\n
2209:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MNU           LL_RTC_ALMB_GetMinute
2210:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2211:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x59
2212:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2213:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMB_GetMinute(RTC_TypeDef *RTCx)
2214:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2215:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
2216:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2217:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->ALRMBR, (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU));
2218:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_ALRMBR_MNT) >> RTC_ALRMBR_MNT_Pos) << 4U) | ((temp & RTC_ALRMBR_M
2219:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2220:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2221:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2222:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set ALARM B Seconds in BCD format
2223:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BIN2BCD is available to convert Seconds from binary to BCD 
2224:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       ST            LL_RTC_ALMB_SetSecond\n
2225:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       SU            LL_RTC_ALMB_SetSecond
ARM GAS  /tmp/cchhGUYN.s 			page 89


2226:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2227:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
2228:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2229:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2230:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_SetSecond(RTC_TypeDef *RTCx, uint32_t Seconds)
2231:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2232:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMBR, (RTC_ALRMBR_ST | RTC_ALRMBR_SU),
2233:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****              (((Seconds & 0xF0U) << (RTC_ALRMBR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_ALRMBR_SU
2234:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2235:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2236:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2237:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get ALARM B Seconds in BCD format
2238:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Seconds from BCD to Binary 
2239:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       ST            LL_RTC_ALMB_GetSecond\n
2240:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       SU            LL_RTC_ALMB_GetSecond
2241:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2242:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x59
2243:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2244:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMB_GetSecond(RTC_TypeDef *RTCx)
2245:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2246:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
2247:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2248:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = READ_BIT(RTCx->ALRMBR, (RTC_ALRMBR_ST | RTC_ALRMBR_SU));
2249:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((((temp & RTC_ALRMBR_ST) >> RTC_ALRMBR_ST_Pos) << 4U) | ((temp & RTC_ALRMBR_SU)
2250:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2251:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2252:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2253:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Alarm B Time (hour, minute and second) in BCD format
2254:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       PM            LL_RTC_ALMB_ConfigTime\n
2255:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       HT            LL_RTC_ALMB_ConfigTime\n
2256:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       HU            LL_RTC_ALMB_ConfigTime\n
2257:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MNT           LL_RTC_ALMB_ConfigTime\n
2258:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MNU           LL_RTC_ALMB_ConfigTime\n
2259:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       ST            LL_RTC_ALMB_ConfigTime\n
2260:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       SU            LL_RTC_ALMB_ConfigTime
2261:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2262:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Format12_24 This parameter can be one of the following values:
2263:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_TIME_FORMAT_AM
2264:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_ALMB_TIME_FORMAT_PM
2265:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Hours Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Da
2266:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
2267:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
2268:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2269:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2270:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_ConfigTime(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours
2271:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2272:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   uint32_t temp;
2273:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2274:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMBR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALR
2275:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****          (((Minutes & 0xF0U) << (RTC_ALRMBR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_ALRMBR_MNU_P
2276:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****          (((Seconds & 0xF0U) << (RTC_ALRMBR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_ALRMBR_SU_Pos
2277:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2278:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMBR, RTC_ALRMBR_PM | RTC_ALRMBR_HT | RTC_ALRMBR_HU | RTC_ALRMBR_MNT | RTC_ALR
2279:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2280:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2281:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2282:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Alarm B Time (hour, minute and second) in BCD format
ARM GAS  /tmp/cchhGUYN.s 			page 90


2283:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macros __LL_RTC_GET_HOUR, __LL_RTC_GET_MINUTE and __LL_RTC_GET_SECOND
2284:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * are available to get independently each parameter.
2285:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBR       HT            LL_RTC_ALMB_GetTime\n
2286:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       HU            LL_RTC_ALMB_GetTime\n
2287:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MNT           LL_RTC_ALMB_GetTime\n
2288:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       MNU           LL_RTC_ALMB_GetTime\n
2289:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       ST            LL_RTC_ALMB_GetTime\n
2290:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         ALRMBR       SU            LL_RTC_ALMB_GetTime
2291:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2292:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Combination of hours, minutes and seconds.
2293:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2294:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMB_GetTime(RTC_TypeDef *RTCx)
2295:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2296:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)((LL_RTC_ALMB_GetHour(RTCx) << RTC_OFFSET_HOUR) | (LL_RTC_ALMB_GetMinute(RTCx) <
2297:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2298:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2299:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2300:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Alarm B Mask the most-significant bits starting at this bit
2301:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note This register can be written only when ALRBE is reset in RTC_CR register,
2302:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *       or in initialization mode.
2303:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBSSR     MASKSS        LL_RTC_ALMB_SetSubSecondMask
2304:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2305:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Mask Value between Min_Data=0x00 and Max_Data=0xF
2306:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2307:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2308:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_SetSubSecondMask(RTC_TypeDef *RTCx, uint32_t Mask)
2309:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2310:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMBSSR, RTC_ALRMBSSR_MASKSS, Mask << RTC_ALRMBSSR_MASKSS_Pos);
2311:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2312:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2313:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2314:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Alarm B Mask the most-significant bits starting at this bit
2315:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBSSR     MASKSS        LL_RTC_ALMB_GetSubSecondMask
2316:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2317:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xF
2318:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2319:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMB_GetSubSecondMask(RTC_TypeDef *RTCx)
2320:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2321:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->ALRMBSSR, RTC_ALRMBSSR_MASKSS)  >> RTC_ALRMBSSR_MASKSS_Pos);
2322:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2323:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2324:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2325:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Alarm B Sub seconds value
2326:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBSSR     SS            LL_RTC_ALMB_SetSubSecond
2327:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2328:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Subsecond Value between Min_Data=0x00 and Max_Data=0x7FFF
2329:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2330:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2331:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_ALMB_SetSubSecond(RTC_TypeDef *RTCx, uint32_t Subsecond)
2332:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2333:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->ALRMBSSR, RTC_ALRMBSSR_SS, Subsecond);
2334:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2335:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2336:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2337:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Alarm B Sub seconds value
2338:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll ALRMBSSR     SS            LL_RTC_ALMB_GetSubSecond
2339:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
ARM GAS  /tmp/cchhGUYN.s 			page 91


2340:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7FFF
2341:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2342:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_ALMB_GetSubSecond(RTC_TypeDef *RTCx)
2343:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2344:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->ALRMBSSR, RTC_ALRMBSSR_SS));
2345:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2346:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2347:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2348:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
2349:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2350:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2351:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EF_Timestamp Timestamp
2352:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
2353:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2354:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2355:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2356:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable Timestamp
2357:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
2358:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           TSE           LL_RTC_TS_Enable
2359:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2360:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2361:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2362:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TS_Enable(RTC_TypeDef *RTCx)
2363:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2364:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->CR, RTC_CR_TSE);
2365:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2366:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2367:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2368:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable Timestamp
2369:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
2370:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           TSE           LL_RTC_TS_Disable
2371:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2372:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2373:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2374:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TS_Disable(RTC_TypeDef *RTCx)
2375:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2376:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->CR, RTC_CR_TSE);
2377:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2378:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2379:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2380:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Time-stamp event active edge
2381:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
2382:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note TSE must be reset when TSEDGE is changed to avoid unwanted TSF setting
2383:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           TSEDGE        LL_RTC_TS_SetActiveEdge
2384:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2385:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Edge This parameter can be one of the following values:
2386:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TIMESTAMP_EDGE_RISING
2387:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TIMESTAMP_EDGE_FALLING
2388:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2389:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2390:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TS_SetActiveEdge(RTC_TypeDef *RTCx, uint32_t Edge)
2391:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2392:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->CR, RTC_CR_TSEDGE, Edge);
2393:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2394:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2395:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2396:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Time-stamp event active edge
ARM GAS  /tmp/cchhGUYN.s 			page 92


2397:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
2398:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           TSEDGE        LL_RTC_TS_GetActiveEdge
2399:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2400:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
2401:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TIMESTAMP_EDGE_RISING
2402:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TIMESTAMP_EDGE_FALLING
2403:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2404:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetActiveEdge(RTC_TypeDef *RTCx)
2405:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2406:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_TSEDGE));
2407:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2408:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2409:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2410:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Timestamp AM/PM notation (AM or 24-hour format)
2411:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TSTR         PM            LL_RTC_TS_GetTimeFormat
2412:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2413:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
2414:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TS_TIME_FORMAT_AM
2415:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TS_TIME_FORMAT_PM
2416:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2417:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetTimeFormat(RTC_TypeDef *RTCx)
2418:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2419:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TSTR, RTC_TSTR_PM));
2420:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2421:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2422:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2423:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Timestamp Hours in BCD format
2424:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Hours from BCD to Binary fo
2425:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TSTR         HT            LL_RTC_TS_GetHour\n
2426:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSTR         HU            LL_RTC_TS_GetHour
2427:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2428:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x2
2429:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2430:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetHour(RTC_TypeDef *RTCx)
2431:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2432:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TSTR, RTC_TSTR_HT | RTC_TSTR_HU) >> RTC_TSTR_HU_Pos);
2433:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2434:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2435:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2436:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Timestamp Minutes in BCD format
2437:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Minutes from BCD to Binary 
2438:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TSTR         MNT           LL_RTC_TS_GetMinute\n
2439:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSTR         MNU           LL_RTC_TS_GetMinute
2440:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2441:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x59
2442:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2443:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetMinute(RTC_TypeDef *RTCx)
2444:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2445:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TSTR, RTC_TSTR_MNT | RTC_TSTR_MNU) >> RTC_TSTR_MNU_Pos);
2446:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2447:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2448:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2449:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Timestamp Seconds in BCD format
2450:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Seconds from BCD to Binary 
2451:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TSTR         ST            LL_RTC_TS_GetSecond\n
2452:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSTR         SU            LL_RTC_TS_GetSecond
2453:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
ARM GAS  /tmp/cchhGUYN.s 			page 93


2454:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x59
2455:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2456:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetSecond(RTC_TypeDef *RTCx)
2457:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2458:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TSTR, RTC_TSTR_ST | RTC_TSTR_SU));
2459:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2460:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2461:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2462:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Timestamp time (hour, minute and second) in BCD format
2463:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macros __LL_RTC_GET_HOUR, __LL_RTC_GET_MINUTE and __LL_RTC_GET_SECOND
2464:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * are available to get independently each parameter.
2465:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TSTR         HT            LL_RTC_TS_GetTime\n
2466:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSTR         HU            LL_RTC_TS_GetTime\n
2467:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSTR         MNT           LL_RTC_TS_GetTime\n
2468:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSTR         MNU           LL_RTC_TS_GetTime\n
2469:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSTR         ST            LL_RTC_TS_GetTime\n
2470:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSTR         SU            LL_RTC_TS_GetTime
2471:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2472:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Combination of hours, minutes and seconds.
2473:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2474:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetTime(RTC_TypeDef *RTCx)
2475:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2476:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TSTR,
2477:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****                              RTC_TSTR_HT | RTC_TSTR_HU | RTC_TSTR_MNT | RTC_TSTR_MNU | RTC_TSTR_ST 
2478:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2479:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2480:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2481:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Timestamp Week day
2482:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TSDR         WDU           LL_RTC_TS_GetWeekDay
2483:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2484:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
2485:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_MONDAY
2486:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_TUESDAY
2487:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_WEDNESDAY
2488:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_THURSDAY
2489:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_FRIDAY
2490:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SATURDAY
2491:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WEEKDAY_SUNDAY
2492:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2493:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetWeekDay(RTC_TypeDef *RTCx)
2494:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2495:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TSDR, RTC_TSDR_WDU) >> RTC_TSDR_WDU_Pos);
2496:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2497:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2498:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2499:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Timestamp Month in BCD format
2500:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Month from BCD to Binary fo
2501:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TSDR         MT            LL_RTC_TS_GetMonth\n
2502:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSDR         MU            LL_RTC_TS_GetMonth
2503:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2504:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
2505:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JANUARY
2506:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_FEBRUARY
2507:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_MARCH
2508:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_APRIL
2509:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_MAY
2510:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JUNE
ARM GAS  /tmp/cchhGUYN.s 			page 94


2511:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_JULY
2512:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_AUGUST
2513:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_SEPTEMBER
2514:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_OCTOBER
2515:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_NOVEMBER
2516:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_MONTH_DECEMBER
2517:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2518:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetMonth(RTC_TypeDef *RTCx)
2519:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2520:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TSDR, RTC_TSDR_MT | RTC_TSDR_MU) >> RTC_TSDR_MU_Pos);
2521:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2522:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2523:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2524:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Timestamp Day in BCD format
2525:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macro __LL_RTC_CONVERT_BCD2BIN is available to convert Day from BCD to Binary form
2526:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TSDR         DT            LL_RTC_TS_GetDay\n
2527:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSDR         DU            LL_RTC_TS_GetDay
2528:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2529:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x01 and Max_Data=0x31
2530:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2531:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetDay(RTC_TypeDef *RTCx)
2532:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2533:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TSDR, RTC_TSDR_DT | RTC_TSDR_DU));
2534:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2535:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2536:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2537:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Timestamp date (WeekDay, Day and Month) in BCD format
2538:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note helper macros __LL_RTC_GET_WEEKDAY, __LL_RTC_GET_MONTH,
2539:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * and __LL_RTC_GET_DAY are available to get independently each parameter.
2540:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TSDR         WDU           LL_RTC_TS_GetDate\n
2541:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSDR         MT            LL_RTC_TS_GetDate\n
2542:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSDR         MU            LL_RTC_TS_GetDate\n
2543:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSDR         DT            LL_RTC_TS_GetDate\n
2544:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TSDR         DU            LL_RTC_TS_GetDate
2545:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2546:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Combination of Weekday, Day and Month
2547:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2548:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetDate(RTC_TypeDef *RTCx)
2549:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2550:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TSDR, RTC_TSDR_WDU | RTC_TSDR_MT | RTC_TSDR_MU | RTC_TSDR_DT | R
2551:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2552:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2553:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2554:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get time-stamp sub second value
2555:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TSSSR        SS            LL_RTC_TS_GetSubSecond
2556:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2557:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
2558:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2559:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TS_GetSubSecond(RTC_TypeDef *RTCx)
2560:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2561:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TSSSR, RTC_TSSSR_SS));
2562:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2563:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2564:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPCR_TAMPTS)
2565:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2566:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Activate timestamp on tamper detection event
2567:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMPTS        LL_RTC_TS_EnableOnTamper
ARM GAS  /tmp/cchhGUYN.s 			page 95


2568:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2569:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2570:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2571:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TS_EnableOnTamper(RTC_TypeDef *RTCx)
2572:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2573:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->TAMPCR, RTC_TAMPCR_TAMPTS);
2574:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2575:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2576:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2577:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable timestamp on tamper detection event
2578:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMPTS        LL_RTC_TS_DisableOnTamper
2579:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2580:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2581:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2582:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TS_DisableOnTamper(RTC_TypeDef *RTCx)
2583:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2584:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->TAMPCR, RTC_TAMPCR_TAMPTS);
2585:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2586:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPCR_TAMPTS */
2587:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2588:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2589:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
2590:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2591:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2592:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EF_Tamper Tamper
2593:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
2594:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2595:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2596:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2597:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable RTC_TAMPx input detection
2598:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMP1E        LL_RTC_TAMPER_Enable\n
2599:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP2E        LL_RTC_TAMPER_Enable\n
2600:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP3E        LL_RTC_TAMPER_Enable
2601:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2602:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Tamper This parameter can be a combination of the following values:
2603:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_1
2604:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_2
2605:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_3
2606:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
2607:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2608:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2609:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_Enable(RTC_TypeDef *RTCx, uint32_t Tamper)
2610:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2611:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->TAMPCR, Tamper);
2612:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2613:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2614:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2615:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Clear RTC_TAMPx input detection
2616:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMP1E        LL_RTC_TAMPER_Disable\n
2617:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP2E        LL_RTC_TAMPER_Disable\n
2618:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP3E        LL_RTC_TAMPER_Disable
2619:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2620:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Tamper This parameter can be a combination of the following values:
2621:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_1
2622:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_2
2623:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_3
2624:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
ARM GAS  /tmp/cchhGUYN.s 			page 96


2625:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2626:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2627:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_Disable(RTC_TypeDef *RTCx, uint32_t Tamper)
2628:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2629:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->TAMPCR, Tamper);
2630:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2631:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2632:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2633:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable Tamper mask flag
2634:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note Associated Tamper IT must not enabled when tamper mask is set.
2635:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMP1MF       LL_RTC_TAMPER_EnableMask\n
2636:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP2MF       LL_RTC_TAMPER_EnableMask\n
2637:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP3MF       LL_RTC_TAMPER_EnableMask
2638:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2639:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Mask This parameter can be a combination of the following values:
2640:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_MASK_TAMPER1
2641:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_MASK_TAMPER2
2642:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_MASK_TAMPER3
2643:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
2644:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2645:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2646:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_EnableMask(RTC_TypeDef *RTCx, uint32_t Mask)
2647:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2648:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->TAMPCR, Mask);
2649:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2650:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2651:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2652:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable Tamper mask flag
2653:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMP1MF       LL_RTC_TAMPER_DisableMask\n
2654:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP2MF       LL_RTC_TAMPER_DisableMask\n
2655:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP3MF       LL_RTC_TAMPER_DisableMask
2656:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2657:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Mask This parameter can be a combination of the following values:
2658:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_MASK_TAMPER1
2659:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_MASK_TAMPER2
2660:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_MASK_TAMPER3
2661:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
2662:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2663:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2664:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_DisableMask(RTC_TypeDef *RTCx, uint32_t Mask)
2665:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2666:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->TAMPCR, Mask);
2667:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2668:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2669:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2670:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable backup register erase after Tamper event detection
2671:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMP1NOERASE  LL_RTC_TAMPER_EnableEraseBKP\n
2672:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP2NOERASE  LL_RTC_TAMPER_EnableEraseBKP\n
2673:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP3NOERASE  LL_RTC_TAMPER_EnableEraseBKP
2674:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2675:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Tamper This parameter can be a combination of the following values:
2676:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_NOERASE_TAMPER1
2677:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_NOERASE_TAMPER2
2678:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_NOERASE_TAMPER3
2679:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
2680:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2681:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
ARM GAS  /tmp/cchhGUYN.s 			page 97


2682:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_EnableEraseBKP(RTC_TypeDef *RTCx, uint32_t Tamper)
2683:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2684:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->TAMPCR, Tamper);
2685:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2686:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2687:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2688:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable backup register erase after Tamper event detection
2689:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMP1NOERASE  LL_RTC_TAMPER_DisableEraseBKP\n
2690:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP2NOERASE  LL_RTC_TAMPER_DisableEraseBKP\n
2691:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP3NOERASE  LL_RTC_TAMPER_DisableEraseBKP
2692:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2693:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Tamper This parameter can be a combination of the following values:
2694:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_NOERASE_TAMPER1
2695:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_NOERASE_TAMPER2
2696:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_NOERASE_TAMPER3
2697:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
2698:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2699:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2700:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_DisableEraseBKP(RTC_TypeDef *RTCx, uint32_t Tamper)
2701:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2702:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->TAMPCR, Tamper);
2703:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2704:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2705:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPCR_TAMPPUDIS)
2706:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2707:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable RTC_TAMPx pull-up disable (Disable precharge of RTC_TAMPx pins)
2708:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMPPUDIS     LL_RTC_TAMPER_DisablePullUp
2709:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2710:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2711:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2712:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_DisablePullUp(RTC_TypeDef *RTCx)
2713:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2714:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->TAMPCR, RTC_TAMPCR_TAMPPUDIS);
2715:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2716:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2717:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2718:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable RTC_TAMPx pull-up disable ( Precharge RTC_TAMPx pins before sampling)
2719:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMPPUDIS     LL_RTC_TAMPER_EnablePullUp
2720:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2721:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2722:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2723:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_EnablePullUp(RTC_TypeDef *RTCx)
2724:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2725:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->TAMPCR, RTC_TAMPCR_TAMPPUDIS);
2726:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2727:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPCR_TAMPPUDIS */
2728:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2729:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPCR_TAMPPRCH)
2730:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2731:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set RTC_TAMPx precharge duration
2732:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMPPRCH      LL_RTC_TAMPER_SetPrecharge
2733:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2734:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Duration This parameter can be one of the following values:
2735:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_DURATION_1RTCCLK
2736:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_DURATION_2RTCCLK
2737:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_DURATION_4RTCCLK
2738:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_DURATION_8RTCCLK
ARM GAS  /tmp/cchhGUYN.s 			page 98


2739:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2740:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2741:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_SetPrecharge(RTC_TypeDef *RTCx, uint32_t Duration)
2742:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2743:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->TAMPCR, RTC_TAMPCR_TAMPPRCH, Duration);
2744:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2745:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2746:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2747:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get RTC_TAMPx precharge duration
2748:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMPPRCH      LL_RTC_TAMPER_GetPrecharge
2749:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2750:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
2751:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_DURATION_1RTCCLK
2752:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_DURATION_2RTCCLK
2753:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_DURATION_4RTCCLK
2754:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_DURATION_8RTCCLK
2755:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2756:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TAMPER_GetPrecharge(RTC_TypeDef *RTCx)
2757:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2758:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TAMPCR, RTC_TAMPCR_TAMPPRCH));
2759:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2760:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPCR_TAMPPRCH */
2761:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2762:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPCR_TAMPFLT)
2763:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2764:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set RTC_TAMPx filter count
2765:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMPFLT       LL_RTC_TAMPER_SetFilterCount
2766:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2767:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  FilterCount This parameter can be one of the following values:
2768:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_FILTER_DISABLE
2769:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_FILTER_2SAMPLE
2770:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_FILTER_4SAMPLE
2771:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_FILTER_8SAMPLE
2772:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2773:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2774:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_SetFilterCount(RTC_TypeDef *RTCx, uint32_t FilterCount)
2775:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2776:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->TAMPCR, RTC_TAMPCR_TAMPFLT, FilterCount);
2777:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2778:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2779:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2780:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get RTC_TAMPx filter count
2781:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMPFLT       LL_RTC_TAMPER_GetFilterCount
2782:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2783:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
2784:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_FILTER_DISABLE
2785:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_FILTER_2SAMPLE
2786:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_FILTER_4SAMPLE
2787:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_FILTER_8SAMPLE
2788:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2789:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TAMPER_GetFilterCount(RTC_TypeDef *RTCx)
2790:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2791:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TAMPCR, RTC_TAMPCR_TAMPFLT));
2792:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2793:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPCR_TAMPFLT */
2794:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2795:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_TAMPCR_TAMPFREQ)
ARM GAS  /tmp/cchhGUYN.s 			page 99


2796:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2797:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Set Tamper sampling frequency
2798:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMPFREQ      LL_RTC_TAMPER_SetSamplingFreq
2799:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2800:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  SamplingFreq This parameter can be one of the following values:
2801:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_32768
2802:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_16384
2803:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_8192
2804:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_4096
2805:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_2048
2806:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_1024
2807:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_512
2808:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_256
2809:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2810:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2811:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_SetSamplingFreq(RTC_TypeDef *RTCx, uint32_t SamplingFreq)
2812:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2813:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->TAMPCR, RTC_TAMPCR_TAMPFREQ, SamplingFreq);
2814:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2815:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2816:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2817:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Get Tamper sampling frequency
2818:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMPFREQ      LL_RTC_TAMPER_GetSamplingFreq
2819:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2820:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval Returned value can be one of the following values:
2821:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_32768
2822:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_16384
2823:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_8192
2824:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_4096
2825:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_2048
2826:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_1024
2827:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_512
2828:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_SAMPLFREQDIV_256
2829:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2830:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_TAMPER_GetSamplingFreq(RTC_TypeDef *RTCx)
2831:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2832:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return (uint32_t)(READ_BIT(RTCx->TAMPCR, RTC_TAMPCR_TAMPFREQ));
2833:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2834:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #endif /* RTC_TAMPCR_TAMPFREQ */
2835:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2836:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2837:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable Active level for Tamper input
2838:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMP1TRG      LL_RTC_TAMPER_EnableActiveLevel\n
2839:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP2TRG      LL_RTC_TAMPER_EnableActiveLevel\n
2840:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP3TRG      LL_RTC_TAMPER_EnableActiveLevel
2841:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2842:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Tamper This parameter can be a combination of the following values:
2843:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_ACTIVELEVEL_TAMP1
2844:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_ACTIVELEVEL_TAMP2
2845:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_ACTIVELEVEL_TAMP3
2846:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
2847:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2848:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2849:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_EnableActiveLevel(RTC_TypeDef *RTCx, uint32_t Tamper)
2850:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2851:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->TAMPCR, Tamper);
2852:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
ARM GAS  /tmp/cchhGUYN.s 			page 100


2853:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2854:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2855:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable Active level for Tamper input
2856:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll TAMPCR       TAMP1TRG      LL_RTC_TAMPER_DisableActiveLevel\n
2857:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP2TRG      LL_RTC_TAMPER_DisableActiveLevel\n
2858:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         TAMPCR       TAMP3TRG      LL_RTC_TAMPER_DisableActiveLevel
2859:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2860:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  Tamper This parameter can be a combination of the following values:
2861:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_ACTIVELEVEL_TAMP1
2862:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_ACTIVELEVEL_TAMP2
2863:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_TAMPER_ACTIVELEVEL_TAMP3
2864:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *
2865:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2866:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2867:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_TAMPER_DisableActiveLevel(RTC_TypeDef *RTCx, uint32_t Tamper)
2868:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2869:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->TAMPCR, Tamper);
2870:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2871:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2872:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2873:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @}
2874:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2875:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2876:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** #if defined(RTC_WAKEUP_SUPPORT)
2877:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /** @defgroup RTC_LL_EF_Wakeup Wakeup
2878:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @{
2879:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2880:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2881:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2882:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Enable Wakeup timer
2883:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
2884:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           WUTE          LL_RTC_WAKEUP_Enable
2885:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2886:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2887:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2888:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
2889:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2890:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   SET_BIT(RTCx->CR, RTC_CR_WUTE);
2891:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2892:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2893:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2894:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Disable Wakeup timer
2895:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
2896:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           WUTE          LL_RTC_WAKEUP_Disable
2897:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2898:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2899:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2900:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_WAKEUP_Disable(RTC_TypeDef *RTCx)
2901:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2902:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
2903:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2904:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2905:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2906:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Check if Wakeup timer is enabled or not
2907:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           WUTE          LL_RTC_WAKEUP_IsEnabled
2908:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2909:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/cchhGUYN.s 			page 101


2910:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2911:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE uint32_t LL_RTC_WAKEUP_IsEnabled(RTC_TypeDef *RTCx)
2912:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2913:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   return ((READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) ? 1UL : 0UL);
2914:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** }
2915:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** 
2916:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** /**
2917:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @brief  Select Wakeup clock
2918:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note   Bit is write-protected. @ref LL_RTC_DisableWriteProtection function should be called be
2919:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @note Bit can be written only when RTC_CR WUTE bit = 0 and RTC_ISR WUTWF bit = 1
2920:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @rmtoll CR           WUCKSEL       LL_RTC_WAKEUP_SetClock
2921:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  RTCx RTC Instance
2922:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @param  WakeupClock This parameter can be one of the following values:
2923:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WAKEUPCLOCK_DIV_16
2924:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WAKEUPCLOCK_DIV_8
2925:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WAKEUPCLOCK_DIV_4
2926:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WAKEUPCLOCK_DIV_2
2927:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
2928:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
2929:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   * @retval None
2930:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   */
2931:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** __STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
 148              		.loc 4 2931 22 view .LVU39
 149              	.LBB27:
2932:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h **** {
2933:Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_rtc.h ****   MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 150              		.loc 4 2933 3 view .LVU40
 151 0038 0722     		movs	r2, #7
 152 003a A368     		ldr	r3, [r4, #8]
 153 003c 9343     		bics	r3, r2
 154 003e 2B43     		orrs	r3, r5
 155 0040 A360     		str	r3, [r4, #8]
 156              	.LVL4:
 157              		.loc 4 2933 3 is_stmt 0 view .LVU41
 158              	.LBE27:
 159              	.LBE26:
  50:Core/Src/rtc.c **** 
  51:Core/Src/rtc.c **** }
 160              		.loc 1 51 1 view .LVU42
 161 0042 05B0     		add	sp, sp, #20
 162              		@ sp needed
 163 0044 30BD     		pop	{r4, r5, pc}
 164              	.L4:
 165 0046 C046     		.align	2
 166              	.L3:
 167 0048 00100240 		.word	1073876992
 168 004c 00E100E0 		.word	-536813312
 169 0050 FFFF00FF 		.word	-16711681
 170 0054 00280040 		.word	1073752064
 171              		.cfi_endproc
 172              	.LFE1053:
 174              		.text
 175              	.Letext0:
 176              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l051xx.h"
 177              		.file 6 "/usr/local/arm-none-eabi/include/machine/_default_types.h"
 178              		.file 7 "/usr/local/arm-none-eabi/include/sys/_stdint.h"
 179              		.file 8 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
ARM GAS  /tmp/cchhGUYN.s 			page 102


 180              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_ll_dma.h"
ARM GAS  /tmp/cchhGUYN.s 			page 103


DEFINED SYMBOLS
                            *ABS*:0000000000000000 rtc.c
     /tmp/cchhGUYN.s:16     .text.MX_RTC_Init:0000000000000000 $t
     /tmp/cchhGUYN.s:25     .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/cchhGUYN.s:167    .text.MX_RTC_Init:0000000000000048 $d

UNDEFINED SYMBOLS
LL_RTC_Init
