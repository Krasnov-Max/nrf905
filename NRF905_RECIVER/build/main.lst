ARM GAS  /tmp/cckXtAl6.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemClock_Config,"ax",%progbits
  18              		.align	1
  19              		.global	SystemClock_Config
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SystemClock_Config:
  26              	.LFB131:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "spi.h"
  24:Src/main.c    **** #include "usart.h"
  25:Src/main.c    **** #include "gpio.h"
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** #include "nrf905.h"
  30:Src/main.c    **** /* USER CODE END Includes */
  31:Src/main.c    **** 
ARM GAS  /tmp/cckXtAl6.s 			page 2


  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN PTD */
  34:Src/main.c    **** /*volatile const struct NRF905_Conf __attribute__((section (".myBufSection"))) NRF905_Config = {
  35:Src/main.c    ****         AUTO_RET_DISABLE,138,0,CRC_CHECK_ENABLE,CRC_MODE_16bit,FREQ_433MHz, PWR_10mdBm, 
  36:Src/main.c    ****         0xE7E7E7E7, RX_ADDR_WIDTH_4Byte,28,RED_PWR_DISABLE, TX_ADDR_WIDTH_4Byte, 28,
  37:Src/main.c    ****         OUT_CLOCK_ENABLE, OUT_CLOCK_FREQ_500kHz, CRYSTAL_OSC_FREQ_16MHz};
  38:Src/main.c    **** */
  39:Src/main.c    **** volatile const uint8_t __attribute__((section (".myBufSection"))) Conf[10] = {0};       
  40:Src/main.c    **** /* USER CODE END PTD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PD */
  44:Src/main.c    **** /* USER CODE END PD */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  47:Src/main.c    **** /* USER CODE BEGIN PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PM */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN PV */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END PV */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  58:Src/main.c    **** void SystemClock_Config(void);
  59:Src/main.c    **** /* USER CODE BEGIN PFP */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE END PFP */
  62:Src/main.c    **** 
  63:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  64:Src/main.c    **** /* USER CODE BEGIN 0 */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END 0 */
  67:Src/main.c    **** 
  68:Src/main.c    **** /**
  69:Src/main.c    ****   * @brief  The application entry point.
  70:Src/main.c    ****   * @retval int
  71:Src/main.c    ****   */
  72:Src/main.c    **** int main(void)
  73:Src/main.c    **** {
  74:Src/main.c    ****   /* USER CODE BEGIN 1 */
  75:Src/main.c    **** uint8_t tmp;
  76:Src/main.c    **** uint8_t buff[255] = {0};
  77:Src/main.c    **** Packet_send P;
  78:Src/main.c    **** struct NRF905_Conf  NRF905_Config_t;
  79:Src/main.c    **** volatile uint8_t y;
  80:Src/main.c    ****   /* USER CODE END 1 */
  81:Src/main.c    ****   
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  86:Src/main.c    ****   HAL_Init();
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE BEGIN Init */
ARM GAS  /tmp/cckXtAl6.s 			page 3


  89:Src/main.c    **** 
  90:Src/main.c    ****   /* USER CODE END Init */
  91:Src/main.c    **** 
  92:Src/main.c    ****   /* Configure the system clock */
  93:Src/main.c    ****   SystemClock_Config();
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* USER CODE END SysInit */
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* Initialize all configured peripherals */
 100:Src/main.c    ****   MX_GPIO_Init();
 101:Src/main.c    ****   MX_SPI3_Init();
 102:Src/main.c    ****   MX_USART2_UART_Init();
 103:Src/main.c    ****   /* USER CODE BEGIN 2 */
 104:Src/main.c    **** HAL_GPIO_WritePin(CS_NRF_GPIO_Port, CS_NRF_Pin, GPIO_PIN_SET);
 105:Src/main.c    **** NRF905_POWER_ON();
 106:Src/main.c    **** HAL_Delay(500);
 107:Src/main.c    **** y = sizeof(P);
 108:Src/main.c    **** /*HAL_FLASH_Unlock();
 109:Src/main.c    **** NRF905_Config_t.AUTO_RETRAN = AUTO_RET_DISABLE ;
 110:Src/main.c    **** NRF905_Config_t.CH_NO_1 = 138;
 111:Src/main.c    **** NRF905_Config_t.CH_NO_2 = 0;
 112:Src/main.c    **** NRF905_Config_t.CRC_EN = CRC_CHECK_ENABLE;
 113:Src/main.c    **** NRF905_Config_t.CRC_MODE = CRC_MODE_16bit;
 114:Src/main.c    **** NRF905_Config_t.HFREQ_PLL = FREQ_433MHz ;
 115:Src/main.c    **** NRF905_Config_t.PA_PWR = PWR_10mdBm;
 116:Src/main.c    **** NRF905_Config_t.RX_ADDRESS = 0xE7E7E7E7 ; 
 117:Src/main.c    **** NRF905_Config_t.RX_AFW = RX_ADDR_WIDTH_4Byte ;
 118:Src/main.c    **** NRF905_Config_t.RX_PW =  sizeof(P);
 119:Src/main.c    **** NRF905_Config_t.RX_RED_PWR = RED_PWR_DISABLE;
 120:Src/main.c    **** NRF905_Config_t.TX_AFW = TX_ADDR_WIDTH_4Byte;
 121:Src/main.c    **** NRF905_Config_t.TX_PW = sizeof(P);
 122:Src/main.c    **** NRF905_Config_t.UP_CLK_EN = OUT_CLOCK_ENABLE;
 123:Src/main.c    **** NRF905_Config_t.UP_CLK_FREQ =  OUT_CLOCK_FREQ_500kHz;
 124:Src/main.c    **** NRF905_Config_t.XOF = CRYSTAL_OSC_FREQ_16MHz;
 125:Src/main.c    **** HAL_FLASH_Lock(); 
 126:Src/main.c    **** NRF905_Config_t.AUTO_RETRAN = NRF905_Config.AUTO_RETRAN;
 127:Src/main.c    **** NRF905_Config_t.CH_NO_1 = NRF905_Config.CH_NO_1;
 128:Src/main.c    **** NRF905_Config_t.CH_NO_2 = NRF905_Config.CH_NO_2;
 129:Src/main.c    **** NRF905_Config_t.CRC_EN = NRF905_Config.CRC_EN ;
 130:Src/main.c    **** NRF905_Config_t.CRC_MODE = NRF905_Config.CRC_MODE;
 131:Src/main.c    **** NRF905_Config_t.HFREQ_PLL = NRF905_Config.HFREQ_PLL ;
 132:Src/main.c    **** NRF905_Config_t.PA_PWR = NRF905_Config.PA_PWR;
 133:Src/main.c    **** NRF905_Config_t.RX_ADDRESS = NRF905_Config.RX_ADDRESS ; 
 134:Src/main.c    **** NRF905_Config_t.RX_AFW = NRF905_Config.RX_AFW ;
 135:Src/main.c    **** NRF905_Config_t.RX_PW =  NRF905_Config.RX_PW;
 136:Src/main.c    **** NRF905_Config_t.RX_RED_PWR = NRF905_Config.RX_RED_PWR;
 137:Src/main.c    **** NRF905_Config_t.TX_AFW = NRF905_Config.TX_AFW;
 138:Src/main.c    **** NRF905_Config_t.TX_PW = NRF905_Config.TX_PW;
 139:Src/main.c    **** NRF905_Config_t.UP_CLK_EN = NRF905_Config.UP_CLK_EN;
 140:Src/main.c    **** NRF905_Config_t.UP_CLK_FREQ =  NRF905_Config.UP_CLK_FREQ;
 141:Src/main.c    **** NRF905_Config_t.XOF = NRF905_Config.XOF;
 142:Src/main.c    **** */
 143:Src/main.c    **** memcpy(&NRF905_Config_t, 0x08060000, 10);
 144:Src/main.c    **** if (NRF905_INIT(&NRF905_Config_t ))
 145:Src/main.c    **** {
ARM GAS  /tmp/cckXtAl6.s 			page 4


 146:Src/main.c    ****  // ReciveMode();
 147:Src/main.c    ****  HAL_GPIO_WritePin(TXE_GPIO_Port, TXE_Pin, GPIO_PIN_RESET);
 148:Src/main.c    ****  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 149:Src/main.c    ****  HAL_Delay(5);
 150:Src/main.c    **** }
 151:Src/main.c    ****   /* USER CODE END 2 */
 152:Src/main.c    ****  
 153:Src/main.c    ****  
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* Infinite loop */
 156:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 157:Src/main.c    ****   while (1)
 158:Src/main.c    ****   {
 159:Src/main.c    ****     y = HAL_GPIO_ReadPin(CD_GPIO_Port, CD_Pin);
 160:Src/main.c    ****     y = HAL_GPIO_ReadPin(AM_GPIO_Port, AM_Pin);
 161:Src/main.c    ****     y = HAL_GPIO_ReadPin(DR_GPIO_Port, DR_Pin);
 162:Src/main.c    ****     if (HAL_GPIO_ReadPin(DR_GPIO_Port, DR_Pin) == 1)
 163:Src/main.c    ****      {
 164:Src/main.c    ****       ReadReciveData(&P, sizeof(P));
 165:Src/main.c    ****       tmp = sprintf(buff, "HUMM - %d %%RH\n\rPRESS - %d hPa\n\rTEMP - %d C\n\rCOUNT - %d \n\n\r", P
 166:Src/main.c    **** 		  HAL_UART_Transmit(&huart2, &buff, tmp+1, 10);
 167:Src/main.c    ****      }
 168:Src/main.c    ****     /* USER CODE END WHILE */
 169:Src/main.c    **** 
 170:Src/main.c    ****     /* USER CODE BEGIN 3 */
 171:Src/main.c    ****     
 172:Src/main.c    ****   }
 173:Src/main.c    ****   /* USER CODE END 3 */
 174:Src/main.c    **** }
 175:Src/main.c    **** 
 176:Src/main.c    **** /**
 177:Src/main.c    ****   * @brief System Clock Configuration
 178:Src/main.c    ****   * @retval None
 179:Src/main.c    ****   */
 180:Src/main.c    **** void SystemClock_Config(void)
 181:Src/main.c    **** {
  28              		.loc 1 181 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 80
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 94B0     		sub	sp, sp, #80
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 88
 182:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  40              		.loc 1 182 0
  41 0004 3022     		movs	r2, #48
  42 0006 0021     		movs	r1, #0
  43 0008 08A8     		add	r0, sp, #32
  44 000a FFF7FEFF 		bl	memset
  45              	.LVL0:
 183:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  46              		.loc 1 183 0
ARM GAS  /tmp/cckXtAl6.s 			page 5


  47 000e 0024     		movs	r4, #0
  48 0010 0394     		str	r4, [sp, #12]
  49 0012 0494     		str	r4, [sp, #16]
  50 0014 0594     		str	r4, [sp, #20]
  51 0016 0694     		str	r4, [sp, #24]
  52 0018 0794     		str	r4, [sp, #28]
  53              	.LBB2:
 184:Src/main.c    **** 
 185:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 186:Src/main.c    ****   */
 187:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
  54              		.loc 1 187 0
  55 001a 0194     		str	r4, [sp, #4]
  56 001c 174B     		ldr	r3, .L3
  57 001e 1A6C     		ldr	r2, [r3, #64]
  58 0020 42F08052 		orr	r2, r2, #268435456
  59 0024 1A64     		str	r2, [r3, #64]
  60 0026 1B6C     		ldr	r3, [r3, #64]
  61 0028 03F08053 		and	r3, r3, #268435456
  62 002c 0193     		str	r3, [sp, #4]
  63 002e 019B     		ldr	r3, [sp, #4]
  64              	.LBE2:
  65              	.LBB3:
 188:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  66              		.loc 1 188 0
  67 0030 0294     		str	r4, [sp, #8]
  68 0032 134A     		ldr	r2, .L3+4
  69 0034 1368     		ldr	r3, [r2]
  70 0036 23F44043 		bic	r3, r3, #49152
  71 003a 43F40043 		orr	r3, r3, #32768
  72 003e 1360     		str	r3, [r2]
  73 0040 1368     		ldr	r3, [r2]
  74 0042 03F44043 		and	r3, r3, #49152
  75 0046 0293     		str	r3, [sp, #8]
  76 0048 029B     		ldr	r3, [sp, #8]
  77              	.LBE3:
 189:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 190:Src/main.c    ****   */
 191:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  78              		.loc 1 191 0
  79 004a 0223     		movs	r3, #2
  80 004c 0893     		str	r3, [sp, #32]
 192:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  81              		.loc 1 192 0
  82 004e 0123     		movs	r3, #1
  83 0050 0B93     		str	r3, [sp, #44]
 193:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  84              		.loc 1 193 0
  85 0052 1023     		movs	r3, #16
  86 0054 0C93     		str	r3, [sp, #48]
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  87              		.loc 1 194 0
  88 0056 0E94     		str	r4, [sp, #56]
 195:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  89              		.loc 1 195 0
  90 0058 08A8     		add	r0, sp, #32
  91 005a FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /tmp/cckXtAl6.s 			page 6


  92              	.LVL1:
 196:Src/main.c    ****   {
 197:Src/main.c    ****     Error_Handler();
 198:Src/main.c    ****   }
 199:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 200:Src/main.c    ****   */
 201:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
  93              		.loc 1 201 0
  94 005e 0F23     		movs	r3, #15
  95 0060 0393     		str	r3, [sp, #12]
 202:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 203:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  96              		.loc 1 203 0
  97 0062 0494     		str	r4, [sp, #16]
 204:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  98              		.loc 1 204 0
  99 0064 0594     		str	r4, [sp, #20]
 205:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 100              		.loc 1 205 0
 101 0066 4FF48053 		mov	r3, #4096
 102 006a 0693     		str	r3, [sp, #24]
 206:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 103              		.loc 1 206 0
 104 006c 0794     		str	r4, [sp, #28]
 207:Src/main.c    **** 
 208:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 105              		.loc 1 208 0
 106 006e 2146     		mov	r1, r4
 107 0070 03A8     		add	r0, sp, #12
 108 0072 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 109              	.LVL2:
 209:Src/main.c    ****   {
 210:Src/main.c    ****     Error_Handler();
 211:Src/main.c    ****   }
 212:Src/main.c    **** }
 110              		.loc 1 212 0
 111 0076 14B0     		add	sp, sp, #80
 112              	.LCFI2:
 113              		.cfi_def_cfa_offset 8
 114              		@ sp needed
 115 0078 10BD     		pop	{r4, pc}
 116              	.L4:
 117 007a 00BF     		.align	2
 118              	.L3:
 119 007c 00380240 		.word	1073887232
 120 0080 00700040 		.word	1073770496
 121              		.cfi_endproc
 122              	.LFE131:
 124              		.section	.text.main,"ax",%progbits
 125              		.align	1
 126              		.global	main
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu fpv4-sp-d16
 132              	main:
 133              	.LFB130:
ARM GAS  /tmp/cckXtAl6.s 			page 7


  73:Src/main.c    ****   /* USER CODE BEGIN 1 */
 134              		.loc 1 73 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 304
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138 0000 10B5     		push	{r4, lr}
 139              	.LCFI3:
 140              		.cfi_def_cfa_offset 8
 141              		.cfi_offset 4, -8
 142              		.cfi_offset 14, -4
 143 0002 CEB0     		sub	sp, sp, #312
 144              	.LCFI4:
 145              		.cfi_def_cfa_offset 320
  76:Src/main.c    **** Packet_send P;
 146              		.loc 1 76 0
 147 0004 FF22     		movs	r2, #255
 148 0006 0021     		movs	r1, #0
 149 0008 0EA8     		add	r0, sp, #56
 150 000a FFF7FEFF 		bl	memset
 151              	.LVL3:
  86:Src/main.c    **** 
 152              		.loc 1 86 0
 153 000e FFF7FEFF 		bl	HAL_Init
 154              	.LVL4:
  93:Src/main.c    **** 
 155              		.loc 1 93 0
 156 0012 FFF7FEFF 		bl	SystemClock_Config
 157              	.LVL5:
 100:Src/main.c    ****   MX_SPI3_Init();
 158              		.loc 1 100 0
 159 0016 FFF7FEFF 		bl	MX_GPIO_Init
 160              	.LVL6:
 101:Src/main.c    ****   MX_USART2_UART_Init();
 161              		.loc 1 101 0
 162 001a FFF7FEFF 		bl	MX_SPI3_Init
 163              	.LVL7:
 102:Src/main.c    ****   /* USER CODE BEGIN 2 */
 164              		.loc 1 102 0
 165 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 166              	.LVL8:
 104:Src/main.c    **** NRF905_POWER_ON();
 167              		.loc 1 104 0
 168 0022 0122     		movs	r2, #1
 169 0024 4FF40071 		mov	r1, #512
 170 0028 3448     		ldr	r0, .L11
 171 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 172              	.LVL9:
 105:Src/main.c    **** HAL_Delay(500);
 173              		.loc 1 105 0
 174 002e FFF7FEFF 		bl	NRF905_POWER_ON
 175              	.LVL10:
 106:Src/main.c    **** y = sizeof(P);
 176              		.loc 1 106 0
 177 0032 4FF4FA70 		mov	r0, #500
 178 0036 FFF7FEFF 		bl	HAL_Delay
 179              	.LVL11:
 107:Src/main.c    **** /*HAL_FLASH_Unlock();
ARM GAS  /tmp/cckXtAl6.s 			page 8


 180              		.loc 1 107 0
 181 003a 1C23     		movs	r3, #28
 182 003c 8DF80F30 		strb	r3, [sp, #15]
 143:Src/main.c    **** if (NRF905_INIT(&NRF905_Config_t ))
 183              		.loc 1 143 0
 184 0040 2F4A     		ldr	r2, .L11+4
 185 0042 04AB     		add	r3, sp, #16
 186 0044 07CA     		ldm	r2, {r0, r1, r2}
 187 0046 03C3     		stmia	r3!, {r0, r1}
 188 0048 1A80     		strh	r2, [r3]	@ movhi
 144:Src/main.c    **** {
 189              		.loc 1 144 0
 190 004a 04A8     		add	r0, sp, #16
 191 004c FFF7FEFF 		bl	NRF905_INIT
 192              	.LVL12:
 193 0050 18B3     		cbz	r0, .L7
 147:Src/main.c    ****  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 194              		.loc 1 147 0
 195 0052 2A4C     		ldr	r4, .L11
 196 0054 0022     		movs	r2, #0
 197 0056 8021     		movs	r1, #128
 198 0058 2046     		mov	r0, r4
 199 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 200              	.LVL13:
 148:Src/main.c    ****  HAL_Delay(5);
 201              		.loc 1 148 0
 202 005e 0122     		movs	r2, #1
 203 0060 4021     		movs	r1, #64
 204 0062 2046     		mov	r0, r4
 205 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 206              	.LVL14:
 149:Src/main.c    **** }
 207              		.loc 1 149 0
 208 0068 0520     		movs	r0, #5
 209 006a FFF7FEFF 		bl	HAL_Delay
 210              	.LVL15:
 211 006e 14E0     		b	.L7
 212              	.L8:
 213              	.LBB4:
 165:Src/main.c    **** 		  HAL_UART_Transmit(&huart2, &buff, tmp+1, 10);
 214              		.loc 1 165 0
 215 0070 0C98     		ldr	r0, [sp, #48]
 216 0072 0190     		str	r0, [sp, #4]
 217 0074 2348     		ldr	r0, .L11+8
 218 0076 80FB0140 		smull	r4, r0, r0, r1
 219 007a C917     		asrs	r1, r1, #31
 220 007c C1EB6011 		rsb	r1, r1, r0, asr #5
 221 0080 0091     		str	r1, [sp]
 222 0082 9212     		asrs	r2, r2, #10
 223 0084 2049     		ldr	r1, .L11+12
 224 0086 0EA8     		add	r0, sp, #56
 225 0088 FFF7FEFF 		bl	sprintf
 226              	.LVL16:
 227 008c C2B2     		uxtb	r2, r0
 228              	.LVL17:
 166:Src/main.c    ****      }
 229              		.loc 1 166 0
ARM GAS  /tmp/cckXtAl6.s 			page 9


 230 008e 0A23     		movs	r3, #10
 231 0090 0132     		adds	r2, r2, #1
 232              	.LVL18:
 233 0092 0EA9     		add	r1, sp, #56
 234 0094 1D48     		ldr	r0, .L11+16
 235 0096 FFF7FEFF 		bl	HAL_UART_Transmit
 236              	.LVL19:
 237              	.L7:
 238              	.LBE4:
 159:Src/main.c    ****     y = HAL_GPIO_ReadPin(AM_GPIO_Port, AM_Pin);
 239              		.loc 1 159 0
 240 009a 1D4C     		ldr	r4, .L11+20
 241 009c 4FF40051 		mov	r1, #8192
 242 00a0 2046     		mov	r0, r4
 243 00a2 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 244              	.LVL20:
 245 00a6 8DF80F00 		strb	r0, [sp, #15]
 160:Src/main.c    ****     y = HAL_GPIO_ReadPin(DR_GPIO_Port, DR_Pin);
 246              		.loc 1 160 0
 247 00aa 4FF48041 		mov	r1, #16384
 248 00ae 2046     		mov	r0, r4
 249 00b0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 250              	.LVL21:
 251 00b4 8DF80F00 		strb	r0, [sp, #15]
 161:Src/main.c    ****     if (HAL_GPIO_ReadPin(DR_GPIO_Port, DR_Pin) == 1)
 252              		.loc 1 161 0
 253 00b8 4FF40041 		mov	r1, #32768
 254 00bc 2046     		mov	r0, r4
 255 00be FFF7FEFF 		bl	HAL_GPIO_ReadPin
 256              	.LVL22:
 257 00c2 8DF80F00 		strb	r0, [sp, #15]
 162:Src/main.c    ****      {
 258              		.loc 1 162 0
 259 00c6 4FF40041 		mov	r1, #32768
 260 00ca 2046     		mov	r0, r4
 261 00cc FFF7FEFF 		bl	HAL_GPIO_ReadPin
 262              	.LVL23:
 263 00d0 0128     		cmp	r0, #1
 264 00d2 E2D1     		bne	.L7
 265              	.LBB5:
 164:Src/main.c    ****       tmp = sprintf(buff, "HUMM - %d %%RH\n\rPRESS - %d hPa\n\rTEMP - %d C\n\rCOUNT - %d \n\n\r", P
 266              		.loc 1 164 0
 267 00d4 1C21     		movs	r1, #28
 268 00d6 0DEB0100 		add	r0, sp, r1
 269 00da FFF7FEFF 		bl	ReadReciveData
 270              	.LVL24:
 165:Src/main.c    **** 		  HAL_UART_Transmit(&huart2, &buff, tmp+1, 10);
 271              		.loc 1 165 0
 272 00de 0998     		ldr	r0, [sp, #36]
 273 00e0 0B9A     		ldr	r2, [sp, #44]
 274 00e2 0A99     		ldr	r1, [sp, #40]
 275 00e4 074B     		ldr	r3, .L11+8
 276 00e6 83FB0243 		smull	r4, r3, r3, r2
 277 00ea D217     		asrs	r2, r2, #31
 278 00ec C2EB6313 		rsb	r3, r2, r3, asr #5
 279 00f0 0246     		mov	r2, r0
 280 00f2 0028     		cmp	r0, #0
ARM GAS  /tmp/cckXtAl6.s 			page 10


 281 00f4 BCDA     		bge	.L8
 282 00f6 00F2FF32 		addw	r2, r0, #1023
 283 00fa B9E7     		b	.L8
 284              	.L12:
 285              		.align	2
 286              	.L11:
 287 00fc 00080240 		.word	1073874944
 288 0100 00000608 		.word	134610944
 289 0104 1F85EB51 		.word	1374389535
 290 0108 00000000 		.word	.LC0
 291 010c 00000000 		.word	huart2
 292 0110 00040240 		.word	1073873920
 293              	.LBE5:
 294              		.cfi_endproc
 295              	.LFE130:
 297              		.section	.text.Error_Handler,"ax",%progbits
 298              		.align	1
 299              		.global	Error_Handler
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 303              		.fpu fpv4-sp-d16
 305              	Error_Handler:
 306              	.LFB132:
 213:Src/main.c    **** 
 214:Src/main.c    **** /* USER CODE BEGIN 4 */
 215:Src/main.c    **** 
 216:Src/main.c    **** /* USER CODE END 4 */
 217:Src/main.c    **** 
 218:Src/main.c    **** /**
 219:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 220:Src/main.c    ****   * @retval None
 221:Src/main.c    ****   */
 222:Src/main.c    **** void Error_Handler(void)
 223:Src/main.c    **** {
 307              		.loc 1 223 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 224:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 225:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 226:Src/main.c    **** 
 227:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 228:Src/main.c    **** }
 312              		.loc 1 228 0
 313 0000 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE132:
 317              		.global	Conf
 318              		.section	.myBufSection,"aw",%progbits
 319              		.align	2
 322              	Conf:
 323 0000 00000000 		.space	10
 323      00000000 
 323      0000
 324              		.section	.rodata.main.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/cckXtAl6.s 			page 11


 325              		.align	2
 326              	.LC0:
 327 0000 48554D4D 		.ascii	"HUMM - %d %%RH\012\015PRESS - %d hPa\012\015TEMP - "
 327      202D2025 
 327      64202525 
 327      52480A0D 
 327      50524553 
 328 0027 25642043 		.ascii	"%d C\012\015COUNT - %d \012\012\015\000"
 328      0A0D434F 
 328      554E5420 
 328      2D202564 
 328      200A0A0D 
 329              		.text
 330              	.Letext0:
 331              		.file 2 "/home/maxx/develop/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_defa
 332              		.file 3 "/home/maxx/develop/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h
 333              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 334              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 335              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 336              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 337              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 338              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 339              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 340              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 341              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 342              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 343              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 344              		.file 15 "Inc/main.h"
 345              		.file 16 "Inc/spi.h"
 346              		.file 17 "Inc/usart.h"
 347              		.file 18 "Inc/nrf905.h"
 348              		.file 19 "<built-in>"
 349              		.file 20 "Inc/gpio.h"
ARM GAS  /tmp/cckXtAl6.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cckXtAl6.s:18     .text.SystemClock_Config:0000000000000000 $t
     /tmp/cckXtAl6.s:25     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cckXtAl6.s:119    .text.SystemClock_Config:000000000000007c $d
     /tmp/cckXtAl6.s:125    .text.main:0000000000000000 $t
     /tmp/cckXtAl6.s:132    .text.main:0000000000000000 main
     /tmp/cckXtAl6.s:287    .text.main:00000000000000fc $d
     /tmp/cckXtAl6.s:298    .text.Error_Handler:0000000000000000 $t
     /tmp/cckXtAl6.s:305    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cckXtAl6.s:322    .myBufSection:0000000000000000 Conf
     /tmp/cckXtAl6.s:319    .myBufSection:0000000000000000 $d
     /tmp/cckXtAl6.s:325    .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_SPI3_Init
MX_USART2_UART_Init
HAL_GPIO_WritePin
NRF905_POWER_ON
HAL_Delay
NRF905_INIT
sprintf
HAL_UART_Transmit
HAL_GPIO_ReadPin
ReadReciveData
huart2
